json

#import io
#import mem
#import str
#import array as arr
#import os

print_whitespace := false;
indent := 0;

struct KeyValuePair {
    name: string,
    obj: Value,
}

struct Dictionary {
    val: []KeyValuePair
}

union ValueUnion {
    number: f64,
    integer: int,
    str: string,
    object: Dictionary,
    array: []Value,
    boolean: bool,
}

struct Value {
    t: Type,
    v: ValueUnion,
}

enum Type {
	Invalid,
    Number,
    Integer,
    String,
    Object,
    Array,
    Boolean,
    Null
}

make_string :: fn(str: string) -> Value {
	v := Value {
		t = Type.String
	};
	v.v.str = str;
	return v;
}

make_bool :: fn(b: bool) -> Value {
	v := Value {
		t = Type.Boolean
	};
	v.v.boolean = b;
	return v;
}

make_integer :: fn(i: int) -> Value {
	v := Value {
		t = Type.Integer
	};
	v.v.integer = i;
	return v;
}

make_obj :: fn(alloc: *mem.Allocator) -> Value {
	v := Value {
		t = Type.Object
	};
	v.v.object = create_dict(alloc);
	return v;
}

make_array :: fn(alloc: *mem.Allocator) -> Value {
	v := Value {
		t = Type.Array
	};
	v.v.array = arr.create(Value, alloc);
	return v;
}

add_item :: fn(json_arr: *Value, v: Value) {
	json_arr := json_arr;
	arr.add(&json_arr.v.array, v);
}

add_field :: fn(obj: *Value, name: string, v: Value) {
	obj := obj;
	add_kvp(&obj.v.object, name, v);
}

print :: fn(json: Value, alloc: *mem.Allocator) -> string {
	b := str.create(alloc);
	print_value(json, &b);
	return str.from_builder(&b, alloc);
}

print_value :: fn(v: Value, b: *str.Builder) {
	match v.t {
		Type.Object: print_object(v, b);
		Type.Array: print_array(v, b);
		Type.Boolean: print_bool(v, b);
		Type.String: print_string(v, b);
		Type.Integer: print_integer(v, b);
		Type.Number: os.assert(false, "doubles are not supported");
		Type.Invalid: os.assert(false, "invalid value passed for printing");
		Type.Null: str.append(b, "null");
	};
}

print_integer :: fn(json: Value, b: *str.Builder) {
	os.assert(json.t == Type.Integer, "Value must be integer");
	v := json.v.integer;
	if v < 0 {
		str.append_u32(b, '-');
		v = -v;
	}
	if v == 0 {
		str.append_u32(b, '0');
		return;
	}

	tmp := [128]u32 {};
	count := 0;
	for v != 0 {
		c := (@u32 (v % 10)) + '0';
		tmp[count] = c;
		count += 1;
		v /= 10;
	}

	count -= 1;
	for count >= 0 {
		str.append_u32(b, tmp[count]);
		count -= 1;
	}
}

print_string :: fn(s: Value, b: *str.Builder) {
	os.assert(s.t == Type.String, "Value must be string");
	str.append_u32(b, '"');
	str.append(b, s.v.str);
	str.append_u32(b, '"');
}

print_bool :: fn(boolean: Value, b: *str.Builder) {
	os.assert(boolean.t == Type.Boolean, "Value must be boolean");
	if boolean.v.boolean {
		str.append(b, "true");
	} else {
		str.append(b, "false");
	}
}

print_array :: fn(arr: Value, b: *str.Builder) {
	os.assert(arr.t == Type.Array, "Value must be array");
	str.append(b, "[");
	print_nl(b);
	indent += 1;
	for v in arr.v.array {
		if i != 0 {
			str.append_u32(b, ',');
			print_nl(b);
		}
		print_indent(b);
		print_value(v, b);
	}
	indent -= 1;
	print_nl(b);
	print_indent(b);
	str.append(b, "]");
}

print_indent :: fn(b: *str.Builder) {
	if !print_whitespace return;
	for i in indent {
		str.append_u32(b, '\t');
	}
}

print_nl :: fn(b: *str.Builder) {
	if !print_whitespace return;
	str.append_u32(b, '\n');
}

print_object :: fn(obj: Value, b: *str.Builder) {
	os.assert(obj.t == Type.Object, "Value must be object");

	indent += 1;

	str.append(b, "{");
	print_nl(b);
	for pair in obj.v.object.val {
		if i != 0 {
			str.append_u32(b, ',');
			print_nl(b);
		}
		print_indent(b);
		str.append_u32(b, '"');
		str.append(b, pair.name);
		str.append_u32(b, '"');
		str.append_u32(b, ':');
		if print_whitespace str.append_u32(b, ' ');
		print_value(pair.obj, b);
	}
	print_nl(b);
	indent -= 1;
	print_indent(b);
	str.append(b, "}");

}

get_array_item :: fn(arr: Value, idx: int) -> (Value, bool) {
    if arr.t != Type.Array return Value {}, false;
	if arr.v.array.count <= idx return Value {}, false;

    return arr.v.array[idx], true;
}

get_obj_field :: fn(obj: Value, str: string) -> (Value, bool) {
    if obj.t != Type.Object return Value {}, false;
    vals := obj.v.object.val;
    for val in vals {
        if val.name == str {
			return val.obj, true;
        }
    }
    return Value {}, false;
}

parse :: fn(text: string, alloc: *mem.Allocator) -> Value {
    p := make_parser(text);
	eat_whitespace(&p);
    return parse_object(&p, alloc);
}



struct Parser {
    str: string,
    pos: *u8,
    at: int,
    failed: bool
}

make_parser :: fn(text: string) -> Parser {
    return Parser {
        text,
        text.data,
        0,
        false
    };
}

is_number :: fn(c: u32) -> bool {
    return c >= '0' && c <= '9';
}

parse_number :: fn(p: *Parser) -> Value {
    is_neg := false;
    if peek_char(p) == '-' {
        is_neg = true;
        next_char(p);
        if !is_number(peek_char(p)) {
            io.println("Invalid number literal");
            return Value {};
        }
    }

    num := 0;
    for is_number(peek_char(p)) {
        num *= 10;
        num += @int (next_char(p) - '0');
    }

    if is_neg num = -num;

    res := Value { };
    res.t = Type.Integer;
    res.v.integer = num;
    return res;
}


peek_char :: fn(p: *Parser) -> u32 {
    return str.deref(p.pos);
}

next_char :: fn(p: *Parser) -> u32 {
    p := p;
    if p.at >= p.str.count {
        p.failed = true;
        return 0;
    }
    c := str.deref(p.pos);
    p.pos = str.advance(p.pos);
    p.at += 1;
    return c;
}

eat_char :: fn(p: *Parser, c: u32) -> u32 {
    p := p;
    if peek_char(p) != c {
        io.println("Expected %c but got %c", c, peek_char(p));
        p.failed = true;
        return 0;
    }
    next_char(p);
    return c;
}

eat_whitespace :: fn(p: *Parser) {
    for is_whitespace(peek_char(p)) {
        next_char(p);
    }
}


#private
create_dict :: fn (alloc: *mem.Allocator) -> Dictionary {
    return Dictionary {
        val = arr.create(KeyValuePair, alloc)
    };
}

add_kvp :: fn (dict: *Dictionary, name: string, value: Value) {
    dict := dict;
    arr.add(&dict.val, KeyValuePair { name, value });
}

is_whitespace :: fn(c: u32) -> bool {
    return c == '\n' || c == '\r' || c == '\t' || c == ' ';
}

parse_string :: fn(p: *Parser) -> Value {
    eat_char(p, '"');
    if p.failed return Value {};
    start := p.pos;
    end := start;
    for peek_char(p) != '"' && !p.failed {
        if peek_char(p) == '\\' {
            next_char(p);
        }
        next_char(p);
        end = p.pos;
    }

    if p.failed return Value {};
    eat_char(p, '"');

    v_str := string { end-start, start };
	if v_str.count == 0 v_str = "";
    value := Value {};
    value.t = Type.String;
    value.v.str = v_str;
    return value;
}

parse_literal :: fn(p: *Parser) -> Value {
    p := p;
    if peek_char(p) == 't' {
        eat_char(p, 't');
        eat_char(p, 'r');
        eat_char(p, 'u');
        eat_char(p, 'e');
        if p.failed return Value {};

        ret := Value {};
        ret.t = Type.Boolean;
        ret.v.boolean = true;
        return ret;

    } else if peek_char(p) == 'f' {
        eat_char(p, 'f');
        eat_char(p, 'a');
        eat_char(p, 'l');
        eat_char(p, 's');
        eat_char(p, 'e');
        if p.failed return Value {};

        ret := Value {};
        ret.t = Type.Boolean;
        ret.v.boolean = false;
        return ret;

    } else if peek_char(p) == 'n' {
        eat_char(p, 'n');
        eat_char(p, 'u');
        eat_char(p, 'l');
        eat_char(p, 'l');
        if p.failed return Value {};

        ret := Value {};
        ret.t = Type.Null;
        return ret;
    }

    io.println("Invalid literal value");
    p.failed = true;
    return Value {};
}

parse_value :: fn(p: *Parser, alloc: *mem.Allocator) -> Value {
    p := p;
    eat_whitespace(p);
    c := peek_char(p);
    if c == '"' {
        return parse_string(p);
    } else if c == '{' {
        return parse_object(p, alloc);
    } else if c == '[' {
        return parse_array(p, alloc);
    } else if is_number(c) {
        return parse_number(p);
    } else {
        return parse_literal(p);
    }
    p.failed = true;
    return Value {};
}

parse_array :: fn(p: *Parser, alloc: *mem.Allocator) -> Value {
    p := p;
    eat_char(p, '[');
    if p.failed {
        io.println("Array should start with a '['");
        return Value {};
    }

    value := Value {};
    value.t = Type.Array;
    eat_whitespace(p);
    if peek_char(p) == ']' {
        return value;
    }
    value.v.array = arr.create(Value, alloc);

    for {
        v := parse_value(p, alloc);
        if p.failed {
            io.println("Invalid value in array");
            return Value {};
        }

        arr.add(&value.v.array, v);

        eat_whitespace(p);
        if peek_char(p) == ']' {
            next_char(p);
            return value;
        }

        eat_char(p, ',');
        if p.failed {
            io.println("Expected , or ] after value in array");
            return Value {};
        }
    }

    return Value {};
}

parse_object :: fn(p: *Parser, alloc: *mem.Allocator) -> Value {
    eat_char(p, '{');
    if p.failed {
        io.println("Object should start with a '{'");
        return Value {};
    }

    obj := Value {};
    obj.t = Type.Object;
    obj.v.object = create_dict(alloc);
    eat_whitespace(p);
    if peek_char(p) == '}' {
		next_char(p);
        return obj;
    }

    for {
        name := parse_string(p);
        if p.failed {
            io.println("Invalid name in json");
            return Value {};
        }
        eat_whitespace(p);
        eat_char(p, ':');
        if p.failed {
            io.println("Expected : after \"%\"", name.v.str);
            return Value {};
        }
        value := parse_value(p, alloc);
        if p.failed {
            io.println("Invalid value for \"%\"", name.v.str);
            return Value {};
        }

        add_kvp(&obj.v.object, name.v.str, value);

        eat_whitespace(p);
        if peek_char(p) == '}' {
			next_char(p);
            return obj;
        }

        eat_char(p, ',');
        if p.failed {
            io.println("Expected , or } after \"%\" value ", name.v.str);
            return Value {};
        }

        eat_whitespace(p);

    }

    return Value {};
}


