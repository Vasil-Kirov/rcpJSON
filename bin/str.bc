; ModuleID = 'str'
source_filename = "strings.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%string = type { ptr, i64 }
%slice.5 = type { i64, ptr }
%str.Builder = type { %slice.3 }
%slice.3 = type { i64, ptr }
%slice.6 = type { i64, ptr }

@main.test_string = external global %string
@init.INVALID_TYPE = external global i64
@init.type_table = external global %slice.5
@os.STD_INPUT_HANDLE = external global i32
@os.STD_OUTPUT_HANDLE = external global i32
@os.STD_ERROR_HANDLE = external global i32
@os.INVALID_HANDLE_VALUE = external global ptr
@os.CP_UTF7 = external global i32
@os.CP_UTF8 = external global i32
@os.MEM_COMMIT = external global i32
@os.MEM_RESERVE = external global i32
@os.MEM_RELEASE = external global i32
@os.PAGE_NOACCESS = external global i32
@os.PAGE_READONLY = external global i32
@os.PAGE_READWRITE = external global i32
@os.PAGE_WRITECOPY = external global i32
@os.PAGE_EXECUTE = external global i32
@os.PAGE_EXECUTE_READ = external global i32
@os.PAGE_EXECUTE_READWRITE = external global i32
@os.PAGE_EXECUTE_WRITECOPY = external global i32
@os.PAGE_GUARD = external global i32
@os.PAGE_NOCACHE = external global i32
@os.PAGE_WRITECOMBINE = external global i32
@str.CONTINUE_BIT = global i8 0

define void @str.__GlobalInitializerFunction.0() {
block_0:
  store i8 -128, ptr @str.CONTINUE_BIT, align 1
  ret void
}

declare i32 @main.main()

declare void @json.get_item(ptr, ptr, ptr)

declare void @json.parse(ptr, ptr, ptr)

declare void @json.create_dict(ptr, ptr)

declare void @json.add_kvp(ptr, ptr, ptr)

declare i1 @json.is_whitespace(i32)

declare i32 @json.peek_char(ptr)

declare i32 @json.next_char(ptr)

declare i32 @json.eat_char(ptr, i32)

declare void @json.eat_whitespace(ptr)

declare void @json.parse_string(ptr, ptr)

declare void @json.make_parser(ptr, ptr)

declare i1 @json.is_number(i32)

declare void @json.parse_number(ptr, ptr)

declare void @json.parse_literal(ptr, ptr)

declare void @json.parse_value(ptr, ptr, ptr)

declare void @json.parse_array(ptr, ptr, ptr)

declare void @json.parse_object(ptr, ptr, ptr)

declare void @init.global_initializers()

declare i64 @init.get_struct_alignment(i64)

declare i64 @init.get_type_alignment(i64)

declare i64 @init.get_basic_type_size(ptr)

declare i64 @init.get_struct_size(i64)

declare i64 @init.get_type_size(i64)

declare i64 @init.get_struct_member_offset(ptr, i64)

declare i32 @main.main.1()

declare i32 @main()

declare void @os.assert(i1, ptr)

declare i1 @WriteFile(ptr, ptr, i32, ptr, ptr)

declare ptr @GetStdHandle(i32)

declare void @ExitProcess(i32)

declare i32 @SetConsoleOutputCP(i32)

declare ptr @VirtualAlloc(ptr, i64, i32, i32)

declare i1 @VirtualFree(ptr, i64, i32)

declare i1 @ReadConsoleA(ptr, ptr, i32, ptr, ptr)

declare void @os.abort()

declare void @os.print(ptr, i32)

declare ptr @os.alloc(i64)

declare void @os.free(ptr)

declare i32 @os.read_stdin_line(ptr, i32)

declare void @io.push_string(ptr, ptr)

declare void @io.format_uint(ptr, i64)

declare void @io.format_int(ptr, i64)

declare void @io.print_typetype(ptr, ptr)

declare void @io.print_type(ptr, ptr)

declare void @io.builder_to_string(ptr, ptr)

declare void @io.print_type_with_formatter(ptr, i32, ptr)

declare void @io.__internal_print(ptr, ptr, ptr)

declare void @io.vsprint(ptr, ptr, ptr)

declare void @io.sprint(ptr, ptr, ptr)

declare void @io.print(ptr, ptr)

declare void @io.println(ptr, ptr)

declare void @io.readln(ptr, ptr, i32)

declare i32 @io.get_next(ptr)

declare void @"io.format_float:(type,*[]u32,f32,i32)->void"(i64, ptr, float, i32)

declare void @"io.format_float:(type,*[]u32,f64,i32)->void"(i64, ptr, double, i32)

declare ptr @mem.generic_alloc(i64, ptr)

declare void @mem.generic_free(ptr, ptr)

declare void @mem.create_generic_allocator(ptr)

declare ptr @mem.arena_alloc(i64, ptr)

declare void @mem.no_free(ptr, ptr)

declare void @mem.create_scratch(ptr, i64)

declare void @mem.destroy_scratch(ptr)

declare ptr @memcpy(ptr, ptr, i64)

declare ptr @memset(ptr, i32, i64)

declare i32 @memcmp(ptr, ptr, i64)

declare void @"mem.make_slice:(type,int,*mem.Allocator)->[]u8"(ptr, i64, i64, ptr)

define i64 @str.to_int(ptr %0) !dbg !82 {
block_0:
  %1 = alloca %string, align 8
  %2 = alloca i1, align 1
  %3 = alloca i64, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %1, ptr align 8 %0, i64 16, i1 false), !dbg !93
  call void @llvm.dbg.value(metadata ptr %1, metadata !94, metadata !DIExpression()), !dbg !93
  store i1 false, ptr %2, align 1, !dbg !95
  call void @llvm.dbg.declare(metadata ptr %2, metadata !96, metadata !DIExpression()), !dbg !95
  store i64 0, ptr %3, align 8, !dbg !98
  call void @llvm.dbg.declare(metadata ptr %3, metadata !99, metadata !DIExpression()), !dbg !98
  %9 = getelementptr inbounds %string, ptr %1, i32 0, i32 1, !dbg !100
  %10 = load i64, ptr %9, align 8, !dbg !100
  %11 = getelementptr inbounds %string, ptr %1, i32 0, i32 0, !dbg !100
  %12 = load ptr, ptr %11, align 8, !dbg !100
  store ptr %12, ptr %4, align 8, !dbg !100
  store i64 0, ptr %5, align 8, !dbg !100
  br label %block_1, !dbg !100

block_1:                                          ; preds = %block_3, %block_0
  %13 = load i64, ptr %5, align 8, !dbg !100
  %14 = icmp ult i64 %13, %10, !dbg !100
  br i1 %14, label %block_2, label %block_4, !dbg !100

block_2:                                          ; preds = %block_1
  %15 = load ptr, ptr %4, align 8, !dbg !100
  %16 = call i32 @str.deref(ptr %15), !dbg !100
  store i32 %16, ptr %6, align 4, !dbg !100
  call void @llvm.dbg.declare(metadata ptr %6, metadata !101, metadata !DIExpression()), !dbg !100
  call void @llvm.dbg.declare(metadata ptr %5, metadata !103, metadata !DIExpression()), !dbg !100
  %17 = load i32, ptr %6, align 4, !dbg !104
  %18 = icmp eq i32 %17, 45, !dbg !104
  br i1 %18, label %block_5, label %block_6, !dbg !104

block_5:                                          ; preds = %block_2
  %19 = load i1, ptr %2, align 1, !dbg !105
  br i1 %19, label %block_8, label %block_9, !dbg !105

block_8:                                          ; preds = %block_5
  ret i64 0, !dbg !105

block_9:                                          ; preds = %block_5
  br label %block_10, !dbg !105

block_10:                                         ; preds = %block_9
  store i1 true, ptr %2, align 1, !dbg !106
  br label %block_3, !dbg !107

block_6:                                          ; preds = %block_2
  br label %block_7, !dbg !107

block_7:                                          ; preds = %block_6
  %20 = load i64, ptr %3, align 8, !dbg !108
  %21 = mul i64 %20, 10, !dbg !108
  store i64 %21, ptr %3, align 8, !dbg !108
  %22 = load i32, ptr %6, align 4, !dbg !109
  switch i32 %22, label %block_11 [
    i32 48, label %block_12
    i32 49, label %block_13
    i32 50, label %block_14
    i32 51, label %block_15
    i32 52, label %block_16
    i32 53, label %block_17
    i32 54, label %block_18
    i32 55, label %block_19
    i32 56, label %block_20
    i32 57, label %block_21
  ], !dbg !109

block_12:                                         ; preds = %block_7
  store i64 0, ptr %7, align 8, !dbg !109
  br label %block_11, !dbg !109

block_13:                                         ; preds = %block_7
  store i64 1, ptr %7, align 8, !dbg !109
  br label %block_11, !dbg !109

block_14:                                         ; preds = %block_7
  store i64 2, ptr %7, align 8, !dbg !109
  br label %block_11, !dbg !109

block_15:                                         ; preds = %block_7
  store i64 3, ptr %7, align 8, !dbg !109
  br label %block_11, !dbg !109

block_16:                                         ; preds = %block_7
  store i64 4, ptr %7, align 8, !dbg !109
  br label %block_11, !dbg !109

block_17:                                         ; preds = %block_7
  store i64 5, ptr %7, align 8, !dbg !109
  br label %block_11, !dbg !109

block_18:                                         ; preds = %block_7
  store i64 6, ptr %7, align 8, !dbg !109
  br label %block_11, !dbg !109

block_19:                                         ; preds = %block_7
  store i64 7, ptr %7, align 8, !dbg !109
  br label %block_11, !dbg !109

block_20:                                         ; preds = %block_7
  store i64 8, ptr %7, align 8, !dbg !109
  br label %block_11, !dbg !109

block_21:                                         ; preds = %block_7
  store i64 9, ptr %7, align 8, !dbg !109
  br label %block_11, !dbg !109

block_11:                                         ; preds = %block_21, %block_20, %block_19, %block_18, %block_17, %block_16, %block_15, %block_14, %block_13, %block_12, %block_7
  %23 = load i64, ptr %7, align 8, !dbg !109
  store i64 %23, ptr %8, align 8, !dbg !109
  call void @llvm.dbg.declare(metadata ptr %8, metadata !110, metadata !DIExpression()), !dbg !109
  %24 = load i64, ptr %3, align 8, !dbg !111
  %25 = load i64, ptr %8, align 8, !dbg !111
  %26 = add i64 %24, %25, !dbg !111
  store i64 %26, ptr %3, align 8, !dbg !111
  br label %block_3, !dbg !111

block_3:                                          ; preds = %block_11, %block_10
  %27 = load i64, ptr %5, align 8, !dbg !111
  %28 = add i64 %27, 1, !dbg !111
  store i64 %28, ptr %5, align 8, !dbg !111
  %29 = load ptr, ptr %4, align 8, !dbg !111
  %30 = call ptr @str.advance(ptr %29), !dbg !111
  store ptr %30, ptr %4, align 8, !dbg !111
  br label %block_1, !dbg !111

block_4:                                          ; preds = %block_1
  %31 = load i1, ptr %2, align 1, !dbg !112
  br i1 %31, label %block_22, label %block_23, !dbg !112

block_22:                                         ; preds = %block_4
  %32 = load i64, ptr %3, align 8, !dbg !112
  %33 = sub i64 0, %32, !dbg !112
  store i64 %33, ptr %3, align 8, !dbg !112
  br label %block_24, !dbg !112

block_23:                                         ; preds = %block_4
  br label %block_24, !dbg !112

block_24:                                         ; preds = %block_23, %block_22
  %34 = load i64, ptr %3, align 8, !dbg !113
  ret i64 %34, !dbg !113
}

define void @str.create(ptr %0, ptr %1) !dbg !114 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca %str.Builder, align 8
  %4 = alloca %slice.3, align 8
  store ptr %1, ptr %2, align 8, !dbg !127
  call void @llvm.dbg.value(metadata ptr %2, metadata !128, metadata !DIExpression()), !dbg !127
  %5 = load ptr, ptr %2, align 8, !dbg !129
  call void @"array.create:(type,*mem.Allocator)->[]u32"(ptr %4, i64 4, ptr %5), !dbg !129
  %6 = getelementptr inbounds %str.Builder, ptr %3, i32 0, i32 0, !dbg !129
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %4, i64 16, i1 false), !dbg !129
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %3, i64 16, i1 false), !dbg !129
  ret void, !dbg !129
}

define void @str.append(ptr %0, ptr %1) !dbg !130 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca %string, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  store ptr %0, ptr %2, align 8, !dbg !134
  call void @llvm.dbg.value(metadata ptr %2, metadata !135, metadata !DIExpression()), !dbg !134
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %1, i64 16, i1 false), !dbg !134
  call void @llvm.dbg.value(metadata ptr %3, metadata !136, metadata !DIExpression()), !dbg !134
  %8 = load ptr, ptr %2, align 8, !dbg !137
  store ptr %8, ptr %4, align 8, !dbg !137
  call void @llvm.dbg.declare(metadata ptr %4, metadata !138, metadata !DIExpression()), !dbg !137
  %9 = getelementptr inbounds %string, ptr %3, i32 0, i32 1, !dbg !139
  %10 = load i64, ptr %9, align 8, !dbg !139
  %11 = getelementptr inbounds %string, ptr %3, i32 0, i32 0, !dbg !139
  %12 = load ptr, ptr %11, align 8, !dbg !139
  store ptr %12, ptr %5, align 8, !dbg !139
  store i64 0, ptr %6, align 8, !dbg !139
  br label %block_1, !dbg !139

block_1:                                          ; preds = %block_3, %block_0
  %13 = load i64, ptr %6, align 8, !dbg !139
  %14 = icmp ult i64 %13, %10, !dbg !139
  br i1 %14, label %block_2, label %block_4, !dbg !139

block_2:                                          ; preds = %block_1
  %15 = load ptr, ptr %5, align 8, !dbg !139
  %16 = call i32 @str.deref(ptr %15), !dbg !139
  store i32 %16, ptr %7, align 4, !dbg !139
  call void @llvm.dbg.declare(metadata ptr %7, metadata !140, metadata !DIExpression()), !dbg !139
  call void @llvm.dbg.declare(metadata ptr %6, metadata !141, metadata !DIExpression()), !dbg !139
  %17 = load ptr, ptr %4, align 8, !dbg !142
  %18 = getelementptr inbounds %str.Builder, ptr %17, i32 0, i32 0, !dbg !142
  %19 = load i32, ptr %7, align 4, !dbg !142
  call void @"array.add:(*[]u32,u32)->void"(ptr %18, i32 %19), !dbg !142
  br label %block_3, !dbg !142

block_3:                                          ; preds = %block_2
  %20 = load i64, ptr %6, align 8, !dbg !142
  %21 = add i64 %20, 1, !dbg !142
  store i64 %21, ptr %6, align 8, !dbg !142
  %22 = load ptr, ptr %5, align 8, !dbg !142
  %23 = call ptr @str.advance(ptr %22), !dbg !142
  store ptr %23, ptr %5, align 8, !dbg !142
  br label %block_1, !dbg !142

block_4:                                          ; preds = %block_1
  ret void, !dbg !143
}

define void @str.append_u32(ptr %0, i32 %1) !dbg !144 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8, !dbg !147
  call void @llvm.dbg.value(metadata ptr %2, metadata !148, metadata !DIExpression()), !dbg !147
  store i32 %1, ptr %3, align 4, !dbg !147
  call void @llvm.dbg.value(metadata ptr %3, metadata !149, metadata !DIExpression()), !dbg !147
  %5 = load ptr, ptr %2, align 8, !dbg !150
  store ptr %5, ptr %4, align 8, !dbg !150
  call void @llvm.dbg.declare(metadata ptr %4, metadata !151, metadata !DIExpression()), !dbg !150
  %6 = load ptr, ptr %4, align 8, !dbg !152
  %7 = getelementptr inbounds %str.Builder, ptr %6, i32 0, i32 0, !dbg !152
  %8 = load i32, ptr %3, align 4, !dbg !152
  call void @"array.add:(*[]u32,u32)->void"(ptr %7, i32 %8), !dbg !152
  ret void, !dbg !153
}

define void @str.append_u8(ptr %0, i8 %1) !dbg !154 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca i8, align 1
  %4 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8, !dbg !157
  call void @llvm.dbg.value(metadata ptr %2, metadata !158, metadata !DIExpression()), !dbg !157
  store i8 %1, ptr %3, align 1, !dbg !157
  call void @llvm.dbg.value(metadata ptr %3, metadata !159, metadata !DIExpression()), !dbg !157
  %5 = load ptr, ptr %2, align 8, !dbg !160
  store ptr %5, ptr %4, align 8, !dbg !160
  call void @llvm.dbg.declare(metadata ptr %4, metadata !161, metadata !DIExpression()), !dbg !160
  %6 = load ptr, ptr %4, align 8, !dbg !162
  %7 = getelementptr inbounds %str.Builder, ptr %6, i32 0, i32 0, !dbg !162
  %8 = load i8, ptr %3, align 1, !dbg !162
  %9 = zext i8 %8 to i32, !dbg !162
  call void @"array.add:(*[]u32,u32)->void"(ptr %7, i32 %9), !dbg !162
  ret void, !dbg !163
}

define void @str.from_builder(ptr %0, ptr %1, ptr %2) !dbg !164 {
block_0:
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca %slice.6, align 8
  %6 = alloca %slice.6, align 8
  %7 = alloca i64, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i64, align 8
  %10 = alloca %string, align 8
  store ptr %1, ptr %3, align 8, !dbg !167
  call void @llvm.dbg.value(metadata ptr %3, metadata !168, metadata !DIExpression()), !dbg !167
  store ptr %2, ptr %4, align 8, !dbg !167
  call void @llvm.dbg.value(metadata ptr %4, metadata !169, metadata !DIExpression()), !dbg !167
  %11 = load ptr, ptr %3, align 8, !dbg !170
  %12 = getelementptr inbounds %str.Builder, ptr %11, i32 0, i32 0, !dbg !170
  %13 = getelementptr inbounds %slice.3, ptr %12, i32 0, i32 0, !dbg !170
  %14 = load i64, ptr %13, align 8, !dbg !170
  %15 = mul i64 %14, 4, !dbg !170
  %16 = load ptr, ptr %4, align 8, !dbg !170
  call void @"mem.make_slice:(type,int,*mem.Allocator)->[]u8"(ptr %5, i64 2, i64 %15, ptr %16), !dbg !170
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %5, i64 16, i1 false), !dbg !170
  call void @llvm.dbg.declare(metadata ptr %6, metadata !171, metadata !DIExpression()), !dbg !170
  store i64 0, ptr %7, align 8, !dbg !175
  call void @llvm.dbg.declare(metadata ptr %7, metadata !176, metadata !DIExpression()), !dbg !175
  %17 = load ptr, ptr %3, align 8, !dbg !177
  %18 = getelementptr inbounds %str.Builder, ptr %17, i32 0, i32 0, !dbg !177
  %19 = getelementptr inbounds %slice.3, ptr %18, i32 0, i32 1, !dbg !177
  %20 = load ptr, ptr %19, align 8, !dbg !177
  store ptr %20, ptr %8, align 8, !dbg !177
  call void @llvm.dbg.declare(metadata ptr %8, metadata !178, metadata !DIExpression()), !dbg !177
  store i64 0, ptr %9, align 8, !dbg !179
  call void @llvm.dbg.declare(metadata ptr %9, metadata !180, metadata !DIExpression()), !dbg !179
  br label %block_1, !dbg !179

block_1:                                          ; preds = %block_3, %block_0
  %21 = load i64, ptr %9, align 8, !dbg !179
  %22 = load ptr, ptr %3, align 8, !dbg !179
  %23 = getelementptr inbounds %str.Builder, ptr %22, i32 0, i32 0, !dbg !179
  %24 = getelementptr inbounds %slice.3, ptr %23, i32 0, i32 0, !dbg !179
  %25 = load i64, ptr %24, align 8, !dbg !179
  %26 = mul i64 %25, 4, !dbg !179
  %27 = icmp slt i64 %21, %26, !dbg !179
  br i1 %27, label %block_2, label %block_4, !dbg !179

block_2:                                          ; preds = %block_1
  %28 = load ptr, ptr %8, align 8, !dbg !181
  %29 = load i64, ptr %9, align 8, !dbg !181
  %30 = getelementptr i8, ptr %28, i64 %29, !dbg !181
  %31 = load i8, ptr %30, align 1, !dbg !181
  %32 = icmp eq i8 %31, 0, !dbg !181
  br i1 %32, label %block_5, label %block_6, !dbg !181

block_5:                                          ; preds = %block_2
  br label %block_3, !dbg !181

block_6:                                          ; preds = %block_2
  br label %block_7, !dbg !181

block_7:                                          ; preds = %block_6
  %33 = load i64, ptr %7, align 8, !dbg !182
  %34 = getelementptr inbounds %slice.6, ptr %6, i32 0, i32 1, !dbg !182
  %35 = load ptr, ptr %34, align 8, !dbg !182
  %36 = getelementptr i8, ptr %35, i64 %33, !dbg !182
  %37 = load ptr, ptr %8, align 8, !dbg !182
  %38 = load i64, ptr %9, align 8, !dbg !182
  %39 = getelementptr i8, ptr %37, i64 %38, !dbg !182
  %40 = load i8, ptr %39, align 1, !dbg !182
  store i8 %40, ptr %36, align 1, !dbg !182
  %41 = load i64, ptr %7, align 8, !dbg !183
  %42 = add i64 %41, 1, !dbg !183
  store i64 %42, ptr %7, align 8, !dbg !183
  br label %block_3, !dbg !183

block_3:                                          ; preds = %block_7, %block_5
  %43 = load i64, ptr %9, align 8, !dbg !183
  %44 = add i64 %43, 1, !dbg !183
  store i64 %44, ptr %9, align 8, !dbg !183
  %45 = load i64, ptr %9, align 8, !dbg !183
  br label %block_1, !dbg !183

block_4:                                          ; preds = %block_1
  %46 = getelementptr inbounds %slice.6, ptr %6, i32 0, i32 1, !dbg !184
  %47 = load ptr, ptr %46, align 8, !dbg !184
  %48 = getelementptr i8, ptr %47, i64 0, !dbg !184
  %49 = getelementptr inbounds %string, ptr %10, i32 0, i32 0, !dbg !184
  store ptr %48, ptr %49, align 8, !dbg !184
  %50 = load i64, ptr %7, align 8, !dbg !184
  %51 = getelementptr inbounds %string, ptr %10, i32 0, i32 1, !dbg !184
  store i64 %50, ptr %51, align 8, !dbg !184
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %10, i64 16, i1 false), !dbg !184
  ret void, !dbg !184
}

define void @str.substr(ptr %0, ptr %1, i64 %2, i64 %3) !dbg !185 {
block_0:
  %4 = alloca %string, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca %string, align 8
  %8 = alloca %string, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %1, i64 16, i1 false), !dbg !188
  call void @llvm.dbg.value(metadata ptr %4, metadata !189, metadata !DIExpression()), !dbg !188
  store i64 %2, ptr %5, align 8, !dbg !188
  call void @llvm.dbg.value(metadata ptr %5, metadata !190, metadata !DIExpression()), !dbg !188
  store i64 %3, ptr %6, align 8, !dbg !188
  call void @llvm.dbg.value(metadata ptr %6, metadata !191, metadata !DIExpression()), !dbg !188
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %4, i64 16, i1 false), !dbg !192
  call void @llvm.dbg.declare(metadata ptr %7, metadata !193, metadata !DIExpression()), !dbg !192
  call void @llvm.memset.p0.i64(ptr align 8 %8, i8 0, i64 16, i1 false), !dbg !194
  call void @llvm.dbg.declare(metadata ptr %8, metadata !195, metadata !DIExpression()), !dbg !194
  %9 = getelementptr inbounds %string, ptr %8, i32 0, i32 0, !dbg !196
  %10 = getelementptr inbounds %string, ptr %7, i32 0, i32 0, !dbg !196
  %11 = load ptr, ptr %10, align 8, !dbg !196
  %12 = load i64, ptr %5, align 8, !dbg !196
  %13 = getelementptr i8, ptr %11, i64 %12, !dbg !196
  store ptr %13, ptr %9, align 8, !dbg !196
  %14 = getelementptr inbounds %string, ptr %8, i32 0, i32 1, !dbg !197
  %15 = load i64, ptr %6, align 8, !dbg !197
  %16 = load i64, ptr %5, align 8, !dbg !197
  %17 = sub i64 %15, %16, !dbg !197
  store i64 %17, ptr %14, align 8, !dbg !197
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %8, i64 16, i1 false), !dbg !198
  ret void, !dbg !198
}

define i64 @str.get_codepoint_size(ptr %0) !dbg !199 {
block_0:
  %1 = alloca ptr, align 8
  %2 = alloca ptr, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store ptr %0, ptr %1, align 8, !dbg !202
  call void @llvm.dbg.value(metadata ptr %1, metadata !203, metadata !DIExpression()), !dbg !202
  %5 = load ptr, ptr %1, align 8, !dbg !204
  store ptr %5, ptr %2, align 8, !dbg !204
  call void @llvm.dbg.declare(metadata ptr %2, metadata !205, metadata !DIExpression()), !dbg !204
  %6 = load ptr, ptr %2, align 8, !dbg !206
  %7 = load i8, ptr %6, align 1, !dbg !206
  %8 = load i8, ptr @str.CONTINUE_BIT, align 1, !dbg !206
  %9 = and i8 %7, %8, !dbg !206
  %10 = icmp eq i8 %9, 0, !dbg !206
  br i1 %10, label %block_1, label %block_2, !dbg !206

block_1:                                          ; preds = %block_0
  ret i64 1, !dbg !207

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !207

block_3:                                          ; preds = %block_2
  store i64 1, ptr %3, align 8, !dbg !208
  call void @llvm.dbg.declare(metadata ptr %3, metadata !209, metadata !DIExpression()), !dbg !208
  store i64 1, ptr %4, align 8, !dbg !210
  call void @llvm.dbg.declare(metadata ptr %4, metadata !211, metadata !DIExpression()), !dbg !210
  br label %block_4, !dbg !210

block_4:                                          ; preds = %block_6, %block_3
  %11 = load ptr, ptr %2, align 8, !dbg !210
  %12 = load i8, ptr %11, align 1, !dbg !210
  %13 = zext i8 %12 to i32, !dbg !210
  %14 = load i8, ptr @str.CONTINUE_BIT, align 1, !dbg !210
  %15 = zext i8 %14 to i32, !dbg !210
  %16 = load i64, ptr %4, align 8, !dbg !210
  %17 = trunc i64 %16 to i32, !dbg !210
  %18 = lshr i32 %15, %17, !dbg !210
  %19 = and i32 %13, %18, !dbg !210
  %20 = icmp ne i32 %19, 0, !dbg !210
  br i1 %20, label %block_5, label %block_7, !dbg !210

block_5:                                          ; preds = %block_4
  %21 = load i64, ptr %3, align 8, !dbg !212
  %22 = add i64 %21, 1, !dbg !212
  store i64 %22, ptr %3, align 8, !dbg !212
  br label %block_6, !dbg !212

block_6:                                          ; preds = %block_5
  %23 = load i64, ptr %4, align 8, !dbg !212
  %24 = add i64 %23, 1, !dbg !212
  store i64 %24, ptr %4, align 8, !dbg !212
  %25 = load i64, ptr %4, align 8, !dbg !212
  br label %block_4, !dbg !212

block_7:                                          ; preds = %block_4
  %26 = load i64, ptr %3, align 8, !dbg !213
  ret i64 %26, !dbg !213
}

define ptr @str.advance(ptr %0) !dbg !214 {
block_0:
  %1 = alloca ptr, align 8
  %2 = alloca i64, align 8
  %3 = alloca ptr, align 8
  store ptr %0, ptr %1, align 8, !dbg !217
  call void @llvm.dbg.value(metadata ptr %1, metadata !218, metadata !DIExpression()), !dbg !217
  %4 = load ptr, ptr %1, align 8, !dbg !219
  %5 = call i64 @str.get_codepoint_size(ptr %4), !dbg !219
  store i64 %5, ptr %2, align 8, !dbg !219
  call void @llvm.dbg.declare(metadata ptr %2, metadata !220, metadata !DIExpression()), !dbg !219
  %6 = load ptr, ptr %1, align 8, !dbg !221
  store ptr %6, ptr %3, align 8, !dbg !221
  call void @llvm.dbg.declare(metadata ptr %3, metadata !222, metadata !DIExpression()), !dbg !221
  %7 = load ptr, ptr %3, align 8, !dbg !223
  %8 = load i64, ptr %2, align 8, !dbg !223
  %9 = getelementptr i8, ptr %7, i64 %8, !dbg !223
  ret ptr %9, !dbg !223
}

define i32 @str.deref(ptr %0) !dbg !224 {
block_0:
  %1 = alloca ptr, align 8
  %2 = alloca ptr, align 8
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  store ptr %0, ptr %1, align 8, !dbg !227
  call void @llvm.dbg.value(metadata ptr %1, metadata !228, metadata !DIExpression()), !dbg !227
  %6 = load ptr, ptr %1, align 8, !dbg !229
  store ptr %6, ptr %2, align 8, !dbg !229
  call void @llvm.dbg.declare(metadata ptr %2, metadata !230, metadata !DIExpression()), !dbg !229
  %7 = load ptr, ptr %2, align 8, !dbg !231
  %8 = call i64 @str.get_codepoint_size(ptr %7), !dbg !231
  store i64 %8, ptr %3, align 8, !dbg !231
  call void @llvm.dbg.declare(metadata ptr %3, metadata !232, metadata !DIExpression()), !dbg !231
  store i32 0, ptr %4, align 4, !dbg !233
  call void @llvm.dbg.declare(metadata ptr %4, metadata !234, metadata !DIExpression()), !dbg !233
  %9 = load i64, ptr %3, align 8, !dbg !235
  store i64 0, ptr %5, align 8, !dbg !235
  br label %block_1, !dbg !235

block_1:                                          ; preds = %block_3, %block_0
  %10 = load i64, ptr %5, align 8, !dbg !235
  %11 = icmp ult i64 %10, %9, !dbg !235
  br i1 %11, label %block_2, label %block_4, !dbg !235

block_2:                                          ; preds = %block_1
  call void @llvm.dbg.declare(metadata ptr %5, metadata !236, metadata !DIExpression()), !dbg !235
  %12 = load i32, ptr %4, align 4, !dbg !237
  %13 = shl i32 %12, 8, !dbg !237
  store i32 %13, ptr %4, align 4, !dbg !237
  %14 = load i32, ptr %4, align 4, !dbg !238
  %15 = load ptr, ptr %2, align 8, !dbg !238
  %16 = load i64, ptr %5, align 8, !dbg !238
  %17 = getelementptr i8, ptr %15, i64 %16, !dbg !238
  %18 = load i8, ptr %17, align 1, !dbg !238
  %19 = zext i8 %18 to i32, !dbg !238
  %20 = or i32 %14, %19, !dbg !238
  store i32 %20, ptr %4, align 4, !dbg !238
  br label %block_3, !dbg !238

block_3:                                          ; preds = %block_2
  %21 = load i64, ptr %5, align 8, !dbg !238
  %22 = add i64 %21, 1, !dbg !238
  store i64 %22, ptr %5, align 8, !dbg !238
  br label %block_1, !dbg !238

block_4:                                          ; preds = %block_1
  %23 = load i32, ptr %4, align 4, !dbg !239
  ret i32 %23, !dbg !239
}

define i32 @str.index(ptr %0, i64 %1) !dbg !240 {
block_0:
  %2 = alloca %string, align 8
  %3 = alloca i64, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i64, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %2, ptr align 8 %0, i64 16, i1 false), !dbg !243
  call void @llvm.dbg.value(metadata ptr %2, metadata !244, metadata !DIExpression()), !dbg !243
  store i64 %1, ptr %3, align 8, !dbg !243
  call void @llvm.dbg.value(metadata ptr %3, metadata !245, metadata !DIExpression()), !dbg !243
  %6 = load i64, ptr %3, align 8, !dbg !246
  %7 = getelementptr inbounds %string, ptr %2, i32 0, i32 1, !dbg !246
  %8 = load i64, ptr %7, align 8, !dbg !246
  %9 = icmp sge i64 %6, %8, !dbg !246
  br i1 %9, label %block_1, label %block_2, !dbg !246

block_1:                                          ; preds = %block_0
  ret i32 0, !dbg !247

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !247

block_3:                                          ; preds = %block_2
  %10 = getelementptr inbounds %string, ptr %2, i32 0, i32 0, !dbg !248
  %11 = load ptr, ptr %10, align 8, !dbg !248
  store ptr %11, ptr %4, align 8, !dbg !248
  call void @llvm.dbg.declare(metadata ptr %4, metadata !249, metadata !DIExpression()), !dbg !248
  %12 = load i64, ptr %3, align 8, !dbg !250
  store i64 0, ptr %5, align 8, !dbg !250
  br label %block_4, !dbg !250

block_4:                                          ; preds = %block_6, %block_3
  %13 = load i64, ptr %5, align 8, !dbg !250
  %14 = icmp ult i64 %13, %12, !dbg !250
  br i1 %14, label %block_5, label %block_7, !dbg !250

block_5:                                          ; preds = %block_4
  call void @llvm.dbg.declare(metadata ptr %5, metadata !251, metadata !DIExpression()), !dbg !250
  %15 = load ptr, ptr %4, align 8, !dbg !252
  %16 = call ptr @str.advance(ptr %15), !dbg !252
  store ptr %16, ptr %4, align 8, !dbg !252
  br label %block_6, !dbg !252

block_6:                                          ; preds = %block_5
  %17 = load i64, ptr %5, align 8, !dbg !252
  %18 = add i64 %17, 1, !dbg !252
  store i64 %18, ptr %5, align 8, !dbg !252
  br label %block_4, !dbg !252

block_7:                                          ; preds = %block_4
  %19 = load ptr, ptr %4, align 8, !dbg !253
  %20 = call i32 @str.deref(ptr %19), !dbg !253
  ret i32 %20, !dbg !253
}

declare void @"array.create:(type,*mem.Allocator)->[]json.KeyValuePair"(ptr, i64, ptr)

declare void @"array.add:(json.KeyValuePair {string,json.Value},json.KeyValuePair {string,json.Value})->void"(ptr, ptr)

declare void @"array.create:(type,*mem.Allocator)->[]json.Value"(ptr, i64, ptr)

declare void @"array.add:(json.Value {json.Type,json.ValueUnion},json.Value {json.Type,json.ValueUnion})->void"(ptr, ptr)

declare void @"array.add:(*[]u32,u32)->void"(ptr, i32)

declare void @"array.create:(type,*mem.Allocator)->[]u8"(ptr, i64, ptr)

declare void @"array.add:(*[]u8,u8)->void"(ptr, i8)

declare void @"array.create:(type,*mem.Allocator)->[]u32"(ptr, i64, ptr)

declare void @"array.free:(*[]u32)->void"(ptr)

declare void @"array.free:(*[]u8)->void"(ptr)

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: write) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!80, !81}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false)
!1 = !DIFile(filename: "strings.rcp", directory: "E:\\C_Projects\\ReComp\\std")
!2 = !{!3, !15, !36, !45, !50, !54, !65, !71}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.TypeKind", scope: !1, file: !1, size: 64, align: 64, elements: !4)
!4 = !{!5, !6, !7, !8, !9, !10, !11, !12, !13, !14}
!5 = !DIEnumerator(name: "Invalid", value: 0, isUnsigned: true)
!6 = !DIEnumerator(name: "Basic", value: 1, isUnsigned: true)
!7 = !DIEnumerator(name: "Function", value: 2, isUnsigned: true)
!8 = !DIEnumerator(name: "Struct", value: 3, isUnsigned: true)
!9 = !DIEnumerator(name: "Pointer", value: 4, isUnsigned: true)
!10 = !DIEnumerator(name: "Array", value: 5, isUnsigned: true)
!11 = !DIEnumerator(name: "Slice", value: 6, isUnsigned: true)
!12 = !DIEnumerator(name: "Vector", value: 7, isUnsigned: true)
!13 = !DIEnumerator(name: "Enum", value: 8, isUnsigned: true)
!14 = !DIEnumerator(name: "Generic", value: 9, isUnsigned: true)
!15 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.BasicKind", scope: !1, file: !1, size: 64, align: 64, elements: !16)
!16 = !{!17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35}
!17 = !DIEnumerator(name: "Bool", value: 0, isUnsigned: true)
!18 = !DIEnumerator(name: "String", value: 1, isUnsigned: true)
!19 = !DIEnumerator(name: "U8", value: 2, isUnsigned: true)
!20 = !DIEnumerator(name: "U16", value: 3, isUnsigned: true)
!21 = !DIEnumerator(name: "U32", value: 4, isUnsigned: true)
!22 = !DIEnumerator(name: "U64", value: 5, isUnsigned: true)
!23 = !DIEnumerator(name: "I8", value: 6, isUnsigned: true)
!24 = !DIEnumerator(name: "I16", value: 7, isUnsigned: true)
!25 = !DIEnumerator(name: "I32", value: 8, isUnsigned: true)
!26 = !DIEnumerator(name: "I64", value: 9, isUnsigned: true)
!27 = !DIEnumerator(name: "F32", value: 10, isUnsigned: true)
!28 = !DIEnumerator(name: "F64", value: 11, isUnsigned: true)
!29 = !DIEnumerator(name: "untypedInteger", value: 12, isUnsigned: true)
!30 = !DIEnumerator(name: "untypedFloat", value: 13, isUnsigned: true)
!31 = !DIEnumerator(name: "Int", value: 14, isUnsigned: true)
!32 = !DIEnumerator(name: "Uint", value: 15, isUnsigned: true)
!33 = !DIEnumerator(name: "Type", value: 16, isUnsigned: true)
!34 = !DIEnumerator(name: "Auto", value: 17, isUnsigned: true)
!35 = !DIEnumerator(name: "Module", value: 18, isUnsigned: true)
!36 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.BasicFlag", scope: !1, file: !1, size: 32, align: 32, elements: !37)
!37 = !{!38, !39, !40, !41, !42, !43, !44}
!38 = !DIEnumerator(name: "Boolean", value: 1, isUnsigned: true)
!39 = !DIEnumerator(name: "Integer", value: 2, isUnsigned: true)
!40 = !DIEnumerator(name: "Float", value: 4, isUnsigned: true)
!41 = !DIEnumerator(name: "String", value: 8, isUnsigned: true)
!42 = !DIEnumerator(name: "Untyped", value: 32, isUnsigned: true)
!43 = !DIEnumerator(name: "Unsigned", value: 64, isUnsigned: true)
!44 = !DIEnumerator(name: "TypeID", value: 128, isUnsigned: true)
!45 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.StructFlag", scope: !1, file: !1, size: 32, align: 32, elements: !46)
!46 = !{!47, !48, !49}
!47 = !DIEnumerator(name: "Packed", value: 1, isUnsigned: true)
!48 = !DIEnumerator(name: "Generic", value: 2, isUnsigned: true)
!49 = !DIEnumerator(name: "Union", value: 4, isUnsigned: true)
!50 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.VectorKind", scope: !1, file: !1, size: 64, align: 64, elements: !51)
!51 = !{!52, !53}
!52 = !DIEnumerator(name: "Float", value: 0, isUnsigned: true)
!53 = !DIEnumerator(name: "Int", value: 1, isUnsigned: true)
!54 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compile.CompileFlag", scope: !1, file: !1, size: 32, align: 32, elements: !55)
!55 = !{!56, !57, !58, !59, !60, !61, !62, !63, !64}
!56 = !DIEnumerator(name: "Debug", value: 1, isUnsigned: true)
!57 = !DIEnumerator(name: "SanAddress", value: 2, isUnsigned: true)
!58 = !DIEnumerator(name: "SanMemory", value: 4, isUnsigned: true)
!59 = !DIEnumerator(name: "SanThread", value: 8, isUnsigned: true)
!60 = !DIEnumerator(name: "SanUndefined", value: 16, isUnsigned: true)
!61 = !DIEnumerator(name: "NoStdLib", value: 32, isUnsigned: true)
!62 = !DIEnumerator(name: "SharedLib", value: 64, isUnsigned: true)
!63 = !DIEnumerator(name: "CrossAndroid", value: 128, isUnsigned: true)
!64 = !DIEnumerator(name: "NoLink", value: 256, isUnsigned: true)
!65 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compile.Arch", scope: !1, file: !1, size: 32, align: 32, elements: !66)
!66 = !{!67, !68, !69, !70}
!67 = !DIEnumerator(name: "x86_64", value: 0, isUnsigned: true)
!68 = !DIEnumerator(name: "x86", value: 1, isUnsigned: true)
!69 = !DIEnumerator(name: "Arm32", value: 2, isUnsigned: true)
!70 = !DIEnumerator(name: "Arm64", value: 4, isUnsigned: true)
!71 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "json.Type", scope: !1, file: !1, size: 64, align: 64, elements: !72)
!72 = !{!73, !74, !75, !76, !77, !78, !79}
!73 = !DIEnumerator(name: "Number", value: 0, isUnsigned: true)
!74 = !DIEnumerator(name: "Integer", value: 1, isUnsigned: true)
!75 = !DIEnumerator(name: "String", value: 2, isUnsigned: true)
!76 = !DIEnumerator(name: "Object", value: 3, isUnsigned: true)
!77 = !DIEnumerator(name: "Array", value: 4, isUnsigned: true)
!78 = !DIEnumerator(name: "Boolean", value: 5, isUnsigned: true)
!79 = !DIEnumerator(name: "Null", value: 6, isUnsigned: true)
!80 = !{i32 2, !"CodeView", i32 1}
!81 = !{i32 2, !"Debug Info Version", i32 3}
!82 = distinct !DISubprogram(name: "to_int", linkageName: "str.to_int", scope: !1, file: !1, line: 10, type: !83, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !92)
!83 = !DISubroutineType(types: !84)
!84 = !{!85, !86}
!85 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!86 = !DICompositeType(tag: DW_TAG_structure_type, name: "string", scope: !1, file: !1, size: 128, elements: !87)
!87 = !{!88, !91}
!88 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !89, size: 64, align: 64)
!89 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*u8", baseType: !90, size: 64, align: 64, dwarfAddressSpace: 0)
!90 = !DIBasicType(name: "u8", size: 8, encoding: DW_ATE_unsigned)
!91 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1, file: !1, baseType: !85, size: 64, align: 64, offset: 64)
!92 = !{}
!93 = !DILocation(line: 10, scope: !82)
!94 = !DILocalVariable(name: "str", scope: !82, file: !1, line: 10, type: !86)
!95 = !DILocation(line: 11, scope: !82)
!96 = !DILocalVariable(name: "neg", scope: !82, file: !1, line: 11, type: !97)
!97 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!98 = !DILocation(line: 12, scope: !82)
!99 = !DILocalVariable(name: "res", scope: !82, file: !1, line: 12, type: !85)
!100 = !DILocation(line: 13, scope: !82)
!101 = !DILocalVariable(name: "c", scope: !82, file: !1, line: 13, type: !102)
!102 = !DIBasicType(name: "u32", size: 32, encoding: DW_ATE_unsigned)
!103 = !DILocalVariable(name: "i", scope: !82, file: !1, line: 13, type: !85)
!104 = !DILocation(line: 14, scope: !82)
!105 = !DILocation(line: 15, scope: !82)
!106 = !DILocation(line: 16, scope: !82)
!107 = !DILocation(line: 17, scope: !82)
!108 = !DILocation(line: 20, scope: !82)
!109 = !DILocation(line: 22, scope: !82)
!110 = !DILocalVariable(name: "val", scope: !82, file: !1, line: 22, type: !85)
!111 = !DILocation(line: 34, scope: !82)
!112 = !DILocation(line: 37, scope: !82)
!113 = !DILocation(line: 38, scope: !82)
!114 = distinct !DISubprogram(name: "create", linkageName: "str.create", scope: !1, file: !1, line: 41, type: !115, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !92)
!115 = !DISubroutineType(types: !116)
!116 = !{!117, !125}
!117 = !DICompositeType(tag: DW_TAG_structure_type, name: "str.Builder", scope: !1, file: !1, size: 128, elements: !118)
!118 = !{!119}
!119 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !120, size: 128, align: 64)
!120 = !DICompositeType(tag: DW_TAG_structure_type, scope: !1, file: !1, size: 128, align: 64, elements: !121)
!121 = !{!122, !123}
!122 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1, file: !1, baseType: !85, size: 64, align: 64)
!123 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !124, size: 64, align: 64, offset: 64)
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*u32", baseType: !102, size: 64, align: 64, dwarfAddressSpace: 0)
!125 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*mem.Allocator", baseType: !126, size: 64, align: 64, dwarfAddressSpace: 0)
!126 = !DICompositeType(tag: DW_TAG_structure_type, name: "mem.Allocator", scope: !1, file: !1, size: 192, align: 64, flags: DIFlagFwdDecl)
!127 = !DILocation(line: 41, scope: !114)
!128 = !DILocalVariable(name: "alloc", scope: !114, file: !1, line: 41, type: !125)
!129 = !DILocation(line: 42, scope: !114)
!130 = distinct !DISubprogram(name: "append", linkageName: "str.append", scope: !1, file: !1, line: 47, type: !131, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !92)
!131 = !DISubroutineType(types: !132)
!132 = !{null, !133, !86}
!133 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*str.Builder", baseType: !117, size: 64, align: 64, dwarfAddressSpace: 0)
!134 = !DILocation(line: 47, scope: !130)
!135 = !DILocalVariable(name: "b", scope: !130, file: !1, line: 47, type: !133)
!136 = !DILocalVariable(name: "str", arg: 1, scope: !130, file: !1, line: 47, type: !86)
!137 = !DILocation(line: 48, scope: !130)
!138 = !DILocalVariable(name: "b", scope: !130, file: !1, line: 48, type: !133)
!139 = !DILocation(line: 49, scope: !130)
!140 = !DILocalVariable(name: "c", scope: !130, file: !1, line: 49, type: !102)
!141 = !DILocalVariable(name: "i", scope: !130, file: !1, line: 49, type: !85)
!142 = !DILocation(line: 50, scope: !130)
!143 = !DILocation(line: 52, scope: !130)
!144 = distinct !DISubprogram(name: "append_u32", linkageName: "str.append_u32", scope: !1, file: !1, line: 54, type: !145, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !92)
!145 = !DISubroutineType(types: !146)
!146 = !{null, !133, !102}
!147 = !DILocation(line: 54, scope: !144)
!148 = !DILocalVariable(name: "b", scope: !144, file: !1, line: 54, type: !133)
!149 = !DILocalVariable(name: "c", arg: 1, scope: !144, file: !1, line: 54, type: !102)
!150 = !DILocation(line: 55, scope: !144)
!151 = !DILocalVariable(name: "b", scope: !144, file: !1, line: 55, type: !133)
!152 = !DILocation(line: 56, scope: !144)
!153 = !DILocation(line: 57, scope: !144)
!154 = distinct !DISubprogram(name: "append_u8", linkageName: "str.append_u8", scope: !1, file: !1, line: 59, type: !155, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !92)
!155 = !DISubroutineType(types: !156)
!156 = !{null, !133, !90}
!157 = !DILocation(line: 59, scope: !154)
!158 = !DILocalVariable(name: "b", scope: !154, file: !1, line: 59, type: !133)
!159 = !DILocalVariable(name: "c", arg: 1, scope: !154, file: !1, line: 59, type: !90)
!160 = !DILocation(line: 60, scope: !154)
!161 = !DILocalVariable(name: "b", scope: !154, file: !1, line: 60, type: !133)
!162 = !DILocation(line: 61, scope: !154)
!163 = !DILocation(line: 62, scope: !154)
!164 = distinct !DISubprogram(name: "from_builder", linkageName: "str.from_builder", scope: !1, file: !1, line: 64, type: !165, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !92)
!165 = !DISubroutineType(types: !166)
!166 = !{!86, !133, !125}
!167 = !DILocation(line: 64, scope: !164)
!168 = !DILocalVariable(name: "b", scope: !164, file: !1, line: 64, type: !133)
!169 = !DILocalVariable(name: "alloc", arg: 1, scope: !164, file: !1, line: 64, type: !125)
!170 = !DILocation(line: 65, scope: !164)
!171 = !DILocalVariable(name: "data", scope: !164, file: !1, line: 65, type: !172)
!172 = !DICompositeType(tag: DW_TAG_structure_type, scope: !1, file: !1, size: 128, align: 64, elements: !173)
!173 = !{!122, !174}
!174 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !89, size: 64, align: 64, offset: 64)
!175 = !DILocation(line: 66, scope: !164)
!176 = !DILocalVariable(name: "len", scope: !164, file: !1, line: 66, type: !85)
!177 = !DILocation(line: 67, scope: !164)
!178 = !DILocalVariable(name: "as_u8", scope: !164, file: !1, line: 67, type: !89)
!179 = !DILocation(line: 68, scope: !164)
!180 = !DILocalVariable(name: "i", scope: !164, file: !1, line: 68, type: !85)
!181 = !DILocation(line: 69, scope: !164)
!182 = !DILocation(line: 71, scope: !164)
!183 = !DILocation(line: 72, scope: !164)
!184 = !DILocation(line: 75, scope: !164)
!185 = distinct !DISubprogram(name: "substr", linkageName: "str.substr", scope: !1, file: !1, line: 80, type: !186, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !92)
!186 = !DISubroutineType(types: !187)
!187 = !{!86, !86, !85, !85}
!188 = !DILocation(line: 80, scope: !185)
!189 = !DILocalVariable(name: "original", scope: !185, file: !1, line: 80, type: !86)
!190 = !DILocalVariable(name: "from", arg: 1, scope: !185, file: !1, line: 80, type: !85)
!191 = !DILocalVariable(name: "to_excl", arg: 2, scope: !185, file: !1, line: 80, type: !85)
!192 = !DILocation(line: 81, scope: !185)
!193 = !DILocalVariable(name: "o", scope: !185, file: !1, line: 81, type: !86)
!194 = !DILocation(line: 82, scope: !185)
!195 = !DILocalVariable(name: "r", scope: !185, file: !1, line: 82, type: !86)
!196 = !DILocation(line: 83, scope: !185)
!197 = !DILocation(line: 84, scope: !185)
!198 = !DILocation(line: 85, scope: !185)
!199 = distinct !DISubprogram(name: "get_codepoint_size", linkageName: "str.get_codepoint_size", scope: !1, file: !1, line: 88, type: !200, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !92)
!200 = !DISubroutineType(types: !201)
!201 = !{!85, !89}
!202 = !DILocation(line: 88, scope: !199)
!203 = !DILocalVariable(name: "codepoint", scope: !199, file: !1, line: 88, type: !89)
!204 = !DILocation(line: 89, scope: !199)
!205 = !DILocalVariable(name: "p", scope: !199, file: !1, line: 89, type: !89)
!206 = !DILocation(line: 90, scope: !199)
!207 = !DILocation(line: 91, scope: !199)
!208 = !DILocation(line: 94, scope: !199)
!209 = !DILocalVariable(name: "size", scope: !199, file: !1, line: 94, type: !85)
!210 = !DILocation(line: 95, scope: !199)
!211 = !DILocalVariable(name: "i", scope: !199, file: !1, line: 95, type: !85)
!212 = !DILocation(line: 96, scope: !199)
!213 = !DILocation(line: 98, scope: !199)
!214 = distinct !DISubprogram(name: "advance", linkageName: "str.advance", scope: !1, file: !1, line: 101, type: !215, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !92)
!215 = !DISubroutineType(types: !216)
!216 = !{!89, !89}
!217 = !DILocation(line: 101, scope: !214)
!218 = !DILocalVariable(name: "pos", scope: !214, file: !1, line: 101, type: !89)
!219 = !DILocation(line: 102, scope: !214)
!220 = !DILocalVariable(name: "size", scope: !214, file: !1, line: 102, type: !85)
!221 = !DILocation(line: 103, scope: !214)
!222 = !DILocalVariable(name: "p", scope: !214, file: !1, line: 103, type: !89)
!223 = !DILocation(line: 104, scope: !214)
!224 = distinct !DISubprogram(name: "deref", linkageName: "str.deref", scope: !1, file: !1, line: 107, type: !225, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !92)
!225 = !DISubroutineType(types: !226)
!226 = !{!102, !89}
!227 = !DILocation(line: 107, scope: !224)
!228 = !DILocalVariable(name: "pos", scope: !224, file: !1, line: 107, type: !89)
!229 = !DILocation(line: 108, scope: !224)
!230 = !DILocalVariable(name: "p", scope: !224, file: !1, line: 108, type: !89)
!231 = !DILocation(line: 109, scope: !224)
!232 = !DILocalVariable(name: "size", scope: !224, file: !1, line: 109, type: !85)
!233 = !DILocation(line: 110, scope: !224)
!234 = !DILocalVariable(name: "res", scope: !224, file: !1, line: 110, type: !102)
!235 = !DILocation(line: 111, scope: !224)
!236 = !DILocalVariable(name: "i", scope: !224, file: !1, line: 111, type: !85)
!237 = !DILocation(line: 112, scope: !224)
!238 = !DILocation(line: 113, scope: !224)
!239 = !DILocation(line: 116, scope: !224)
!240 = distinct !DISubprogram(name: "index", linkageName: "str.index", scope: !1, file: !1, line: 119, type: !241, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !92)
!241 = !DISubroutineType(types: !242)
!242 = !{!102, !86, !85}
!243 = !DILocation(line: 119, scope: !240)
!244 = !DILocalVariable(name: "s", scope: !240, file: !1, line: 119, type: !86)
!245 = !DILocalVariable(name: "idx", arg: 1, scope: !240, file: !1, line: 119, type: !85)
!246 = !DILocation(line: 120, scope: !240)
!247 = !DILocation(line: 121, scope: !240)
!248 = !DILocation(line: 124, scope: !240)
!249 = !DILocalVariable(name: "p", scope: !240, file: !1, line: 124, type: !89)
!250 = !DILocation(line: 125, scope: !240)
!251 = !DILocalVariable(name: "i", scope: !240, file: !1, line: 125, type: !85)
!252 = !DILocation(line: 126, scope: !240)
!253 = !DILocation(line: 128, scope: !240)
