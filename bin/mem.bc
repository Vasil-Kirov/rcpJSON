; ModuleID = 'mem'
source_filename = "mem.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%string = type { ptr, i64 }
%slice.5 = type { i64, ptr }
%mem.Allocator = type { ptr, ptr, ptr }
%mem.ScratchContext = type { ptr, ptr }
%slice.6 = type { i64, ptr }

@main.test_string = external global %string
@init.INVALID_TYPE = external global i64
@init.type_table = external global %slice.5
@os.STD_INPUT_HANDLE = external global i32
@os.STD_OUTPUT_HANDLE = external global i32
@os.STD_ERROR_HANDLE = external global i32
@os.INVALID_HANDLE_VALUE = external global ptr
@os.CP_UTF7 = external global i32
@os.CP_UTF8 = external global i32
@os.MEM_COMMIT = external global i32
@os.MEM_RESERVE = external global i32
@os.MEM_RELEASE = external global i32
@os.PAGE_NOACCESS = external global i32
@os.PAGE_READONLY = external global i32
@os.PAGE_READWRITE = external global i32
@os.PAGE_WRITECOPY = external global i32
@os.PAGE_EXECUTE = external global i32
@os.PAGE_EXECUTE_READ = external global i32
@os.PAGE_EXECUTE_READWRITE = external global i32
@os.PAGE_EXECUTE_WRITECOPY = external global i32
@os.PAGE_GUARD = external global i32
@os.PAGE_NOCACHE = external global i32
@os.PAGE_WRITECOMBINE = external global i32
@str.CONTINUE_BIT = external global i8
@0 = private unnamed_addr constant [36 x i8] c"Invalid allocator for arena_alloc()\00", align 1
@1 = private unnamed_addr constant [50 x i8] c"Calling arena_alloc() with an out of memory arena\00", align 1
@2 = private unnamed_addr constant [40 x i8] c"Invalid allocator for destroy_scratch()\00", align 1

define void @mem.__GlobalInitializerFunction.0() {
block_0:
  ret void
}

declare i32 @main.main()

declare void @json.get_item(ptr, ptr, ptr)

declare void @json.parse(ptr, ptr, ptr)

declare void @json.create_dict(ptr, ptr)

declare void @json.add_kvp(ptr, ptr, ptr)

declare i1 @json.is_whitespace(i32)

declare i32 @json.peek_char(ptr)

declare i32 @json.next_char(ptr)

declare i32 @json.eat_char(ptr, i32)

declare void @json.eat_whitespace(ptr)

declare void @json.parse_string(ptr, ptr)

declare void @json.make_parser(ptr, ptr)

declare i1 @json.is_number(i32)

declare void @json.parse_number(ptr, ptr)

declare void @json.parse_literal(ptr, ptr)

declare void @json.parse_value(ptr, ptr, ptr)

declare void @json.parse_array(ptr, ptr, ptr)

declare void @json.parse_object(ptr, ptr, ptr)

declare void @init.global_initializers()

declare i64 @init.get_struct_alignment(i64)

declare i64 @init.get_type_alignment(i64)

declare i64 @init.get_basic_type_size(ptr)

declare i64 @init.get_struct_size(i64)

declare i64 @init.get_type_size(i64)

declare i64 @init.get_struct_member_offset(ptr, i64)

declare i32 @main.main.1()

declare i32 @main()

declare void @os.assert(i1, ptr)

declare i1 @WriteFile(ptr, ptr, i32, ptr, ptr)

declare ptr @GetStdHandle(i32)

declare void @ExitProcess(i32)

declare i32 @SetConsoleOutputCP(i32)

declare ptr @VirtualAlloc(ptr, i64, i32, i32)

declare i1 @VirtualFree(ptr, i64, i32)

declare i1 @ReadConsoleA(ptr, ptr, i32, ptr, ptr)

declare void @os.abort()

declare void @os.print(ptr, i32)

declare ptr @os.alloc(i64)

declare void @os.free(ptr)

declare i32 @os.read_stdin_line(ptr, i32)

declare void @io.push_string(ptr, ptr)

declare void @io.format_uint(ptr, i64)

declare void @io.format_int(ptr, i64)

declare void @io.print_typetype(ptr, ptr)

declare void @io.print_type(ptr, ptr)

declare void @io.builder_to_string(ptr, ptr)

declare void @io.print_type_with_formatter(ptr, i32, ptr)

declare void @io.__internal_print(ptr, ptr, ptr)

declare void @io.vsprint(ptr, ptr, ptr)

declare void @io.sprint(ptr, ptr, ptr)

declare void @io.print(ptr, ptr)

declare void @io.println(ptr, ptr)

declare void @io.readln(ptr, ptr, i32)

declare i32 @io.get_next(ptr)

declare void @"io.format_float:(type,*[]u32,f32,i32)->void"(i64, ptr, float, i32)

declare void @"io.format_float:(type,*[]u32,f64,i32)->void"(i64, ptr, double, i32)

define ptr @mem.generic_alloc(i64 %0, ptr %1) !dbg !82 {
block_0:
  %2 = alloca i64, align 8
  %3 = alloca ptr, align 8
  store i64 %0, ptr %2, align 8, !dbg !90
  call void @llvm.dbg.value(metadata ptr %2, metadata !91, metadata !DIExpression()), !dbg !90
  store ptr %1, ptr %3, align 8, !dbg !90
  call void @llvm.dbg.value(metadata ptr %3, metadata !92, metadata !DIExpression()), !dbg !90
  %4 = load i64, ptr %2, align 8, !dbg !93
  %5 = call ptr @os.alloc(i64 %4), !dbg !93
  ret ptr %5, !dbg !93
}

define void @mem.generic_free(ptr %0, ptr %1) !dbg !94 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8, !dbg !97
  call void @llvm.dbg.value(metadata ptr %2, metadata !98, metadata !DIExpression()), !dbg !97
  store ptr %1, ptr %3, align 8, !dbg !97
  call void @llvm.dbg.value(metadata ptr %3, metadata !99, metadata !DIExpression()), !dbg !97
  %4 = load ptr, ptr %2, align 8, !dbg !100
  call void @os.free(ptr %4), !dbg !100
  ret void, !dbg !101
}

define void @mem.create_generic_allocator(ptr %0) !dbg !102 {
block_0:
  %1 = alloca %mem.Allocator, align 8
  %2 = alloca %mem.Allocator, align 8
  %3 = getelementptr inbounds %mem.Allocator, ptr %1, i32 0, i32 0, !dbg !112
  store ptr @mem.generic_alloc, ptr %3, align 8, !dbg !112
  %4 = getelementptr inbounds %mem.Allocator, ptr %1, i32 0, i32 1, !dbg !112
  store ptr @mem.generic_free, ptr %4, align 8, !dbg !112
  %5 = getelementptr inbounds %mem.Allocator, ptr %1, i32 0, i32 2, !dbg !112
  store ptr null, ptr %5, align 8, !dbg !112
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %2, ptr align 8 %1, i64 24, i1 false), !dbg !112
  call void @llvm.dbg.declare(metadata ptr %2, metadata !113, metadata !DIExpression()), !dbg !112
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %2, i64 24, i1 false), !dbg !114
  ret void, !dbg !114
}

define ptr @mem.arena_alloc(i64 %0, ptr %1) !dbg !115 {
block_0:
  %2 = alloca i64, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca %string, align 8
  %6 = alloca %string, align 8
  %7 = alloca ptr, align 8
  store i64 %0, ptr %2, align 8, !dbg !116
  call void @llvm.dbg.value(metadata ptr %2, metadata !117, metadata !DIExpression()), !dbg !116
  store ptr %1, ptr %3, align 8, !dbg !116
  call void @llvm.dbg.value(metadata ptr %3, metadata !118, metadata !DIExpression()), !dbg !116
  %8 = load ptr, ptr %3, align 8, !dbg !119
  %9 = getelementptr inbounds %mem.Allocator, ptr %8, i32 0, i32 2, !dbg !119
  %10 = load ptr, ptr %9, align 8, !dbg !119
  store ptr %10, ptr %4, align 8, !dbg !119
  call void @llvm.dbg.declare(metadata ptr %4, metadata !120, metadata !DIExpression()), !dbg !119
  %11 = load ptr, ptr %4, align 8, !dbg !128
  %12 = icmp ne ptr %11, null, !dbg !128
  %13 = alloca %string, align 8, !dbg !128
  %String = getelementptr inbounds %string, ptr %13, i32 0, i32 0, !dbg !128
  %Size = getelementptr inbounds %string, ptr %13, i32 0, i32 1, !dbg !128
  store ptr @0, ptr %String, align 8, !dbg !128
  store i64 35, ptr %Size, align 8, !dbg !128
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 %13, i64 16, i1 false), !dbg !128
  call void @os.assert(i1 %12, ptr %5), !dbg !128
  %14 = load ptr, ptr %4, align 8, !dbg !129
  %15 = getelementptr inbounds %mem.ScratchContext, ptr %14, i32 0, i32 1, !dbg !129
  %16 = load ptr, ptr %15, align 8, !dbg !129
  %17 = load ptr, ptr %4, align 8, !dbg !129
  %18 = getelementptr inbounds %mem.ScratchContext, ptr %17, i32 0, i32 0, !dbg !129
  %19 = load ptr, ptr %18, align 8, !dbg !129
  %20 = icmp sgt ptr %16, %19, !dbg !129
  %21 = alloca %string, align 8, !dbg !129
  %String1 = getelementptr inbounds %string, ptr %21, i32 0, i32 0, !dbg !129
  %Size2 = getelementptr inbounds %string, ptr %21, i32 0, i32 1, !dbg !129
  store ptr @1, ptr %String1, align 8, !dbg !129
  store i64 49, ptr %Size2, align 8, !dbg !129
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %21, i64 16, i1 false), !dbg !129
  call void @os.assert(i1 %20, ptr %6), !dbg !129
  %22 = load ptr, ptr %4, align 8, !dbg !130
  %23 = getelementptr inbounds %mem.ScratchContext, ptr %22, i32 0, i32 0, !dbg !130
  %24 = load ptr, ptr %23, align 8, !dbg !130
  store ptr %24, ptr %7, align 8, !dbg !130
  call void @llvm.dbg.declare(metadata ptr %7, metadata !131, metadata !DIExpression()), !dbg !130
  %25 = load ptr, ptr %4, align 8, !dbg !132
  %26 = getelementptr inbounds %mem.ScratchContext, ptr %25, i32 0, i32 0, !dbg !132
  %27 = load ptr, ptr %4, align 8, !dbg !132
  %28 = getelementptr inbounds %mem.ScratchContext, ptr %27, i32 0, i32 0, !dbg !132
  %29 = load ptr, ptr %28, align 8, !dbg !132
  %30 = load i64, ptr %2, align 8, !dbg !132
  %31 = getelementptr i8, ptr %29, i64 %30, !dbg !132
  store ptr %31, ptr %26, align 8, !dbg !132
  %32 = load ptr, ptr %7, align 8, !dbg !133
  ret ptr %32, !dbg !133
}

define void @mem.no_free(ptr %0, ptr %1) !dbg !134 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8, !dbg !135
  call void @llvm.dbg.value(metadata ptr %2, metadata !136, metadata !DIExpression()), !dbg !135
  store ptr %1, ptr %3, align 8, !dbg !135
  call void @llvm.dbg.value(metadata ptr %3, metadata !137, metadata !DIExpression()), !dbg !135
  ret void, !dbg !138
}

define void @mem.create_scratch(ptr %0, i64 %1) !dbg !139 {
block_0:
  %2 = alloca i64, align 8
  %3 = alloca ptr, align 8
  %4 = alloca %mem.Allocator, align 8
  %5 = alloca %mem.Allocator, align 8
  store i64 %1, ptr %2, align 8, !dbg !142
  call void @llvm.dbg.value(metadata ptr %2, metadata !143, metadata !DIExpression()), !dbg !142
  %6 = load i64, ptr %2, align 8, !dbg !144
  %7 = add i64 %6, 16, !dbg !144
  %8 = call ptr @os.alloc(i64 %7), !dbg !144
  store ptr %8, ptr %3, align 8, !dbg !144
  call void @llvm.dbg.declare(metadata ptr %3, metadata !145, metadata !DIExpression()), !dbg !144
  %9 = load ptr, ptr %3, align 8, !dbg !146
  %10 = getelementptr inbounds %mem.ScratchContext, ptr %9, i32 0, i32 0, !dbg !146
  %11 = load ptr, ptr %3, align 8, !dbg !146
  %12 = getelementptr %mem.ScratchContext, ptr %11, i64 1, !dbg !146
  store ptr %12, ptr %10, align 8, !dbg !146
  %13 = load ptr, ptr %3, align 8, !dbg !147
  %14 = getelementptr inbounds %mem.ScratchContext, ptr %13, i32 0, i32 1, !dbg !147
  %15 = load ptr, ptr %3, align 8, !dbg !147
  %16 = getelementptr inbounds %mem.ScratchContext, ptr %15, i32 0, i32 0, !dbg !147
  %17 = load ptr, ptr %16, align 8, !dbg !147
  %18 = load i64, ptr %2, align 8, !dbg !147
  %19 = getelementptr i8, ptr %17, i64 %18, !dbg !147
  store ptr %19, ptr %14, align 8, !dbg !147
  %20 = getelementptr inbounds %mem.Allocator, ptr %4, i32 0, i32 0, !dbg !148
  store ptr @mem.arena_alloc, ptr %20, align 8, !dbg !148
  %21 = getelementptr inbounds %mem.Allocator, ptr %4, i32 0, i32 1, !dbg !148
  store ptr @mem.no_free, ptr %21, align 8, !dbg !148
  %22 = load ptr, ptr %3, align 8, !dbg !148
  %23 = getelementptr inbounds %mem.Allocator, ptr %4, i32 0, i32 2, !dbg !148
  store ptr %22, ptr %23, align 8, !dbg !148
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 %4, i64 24, i1 false), !dbg !148
  call void @llvm.dbg.declare(metadata ptr %5, metadata !149, metadata !DIExpression()), !dbg !148
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %5, i64 24, i1 false), !dbg !150
  ret void, !dbg !150
}

define void @mem.destroy_scratch(ptr %0) !dbg !151 {
block_0:
  %1 = alloca ptr, align 8
  %2 = alloca ptr, align 8
  %3 = alloca %string, align 8
  store ptr %0, ptr %1, align 8, !dbg !154
  call void @llvm.dbg.value(metadata ptr %1, metadata !155, metadata !DIExpression()), !dbg !154
  %4 = load ptr, ptr %1, align 8, !dbg !156
  %5 = getelementptr inbounds %mem.Allocator, ptr %4, i32 0, i32 2, !dbg !156
  %6 = load ptr, ptr %5, align 8, !dbg !156
  store ptr %6, ptr %2, align 8, !dbg !156
  call void @llvm.dbg.declare(metadata ptr %2, metadata !157, metadata !DIExpression()), !dbg !156
  %7 = load ptr, ptr %2, align 8, !dbg !158
  %8 = icmp ne ptr %7, null, !dbg !158
  %9 = alloca %string, align 8, !dbg !158
  %String = getelementptr inbounds %string, ptr %9, i32 0, i32 0, !dbg !158
  %Size = getelementptr inbounds %string, ptr %9, i32 0, i32 1, !dbg !158
  store ptr @2, ptr %String, align 8, !dbg !158
  store i64 39, ptr %Size, align 8, !dbg !158
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %9, i64 16, i1 false), !dbg !158
  call void @os.assert(i1 %8, ptr %3), !dbg !158
  %10 = load ptr, ptr %2, align 8, !dbg !159
  call void @os.free(ptr %10), !dbg !159
  ret void, !dbg !160
}

declare ptr @memcpy(ptr, ptr, i64)

declare ptr @memset(ptr, i32, i64)

declare i32 @memcmp(ptr, ptr, i64)

define void @"mem.make_slice:(type,int,*mem.Allocator)->[]u8"(ptr %0, i64 %1, i64 %2, ptr %3) !dbg !161 {
block_0:
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca ptr, align 8
  %7 = alloca %slice.6, align 8
  %8 = alloca %slice.6, align 8
  store i64 %1, ptr %4, align 8, !dbg !169
  call void @llvm.dbg.value(metadata ptr %4, metadata !170, metadata !DIExpression()), !dbg !169
  store i64 %2, ptr %5, align 8, !dbg !169
  call void @llvm.dbg.value(metadata ptr %5, metadata !171, metadata !DIExpression()), !dbg !169
  store ptr %3, ptr %6, align 8, !dbg !169
  call void @llvm.dbg.value(metadata ptr %6, metadata !172, metadata !DIExpression()), !dbg !169
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %8, ptr align 8 %7, i64 16, i1 false), !dbg !173
  call void @llvm.dbg.declare(metadata ptr %8, metadata !174, metadata !DIExpression()), !dbg !173
  %9 = getelementptr inbounds %slice.6, ptr %8, i32 0, i32 1, !dbg !175
  %10 = load ptr, ptr %6, align 8, !dbg !175
  %11 = getelementptr inbounds %mem.Allocator, ptr %10, i32 0, i32 0, !dbg !175
  %12 = load ptr, ptr %11, align 8, !dbg !175
  %13 = load i64, ptr %5, align 8, !dbg !175
  %14 = mul i64 %13, 1, !dbg !175
  %15 = load ptr, ptr %6, align 8, !dbg !175
  %16 = call ptr %12(i64 %14, ptr %15), !dbg !175
  store ptr %16, ptr %9, align 8, !dbg !175
  %17 = getelementptr inbounds %slice.6, ptr %8, i32 0, i32 0, !dbg !176
  %18 = load i64, ptr %5, align 8, !dbg !176
  store i64 %18, ptr %17, align 8, !dbg !176
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %8, i64 16, i1 false), !dbg !177
  ret void, !dbg !177
}

declare i64 @str.to_int(ptr)

declare void @str.create(ptr, ptr)

declare void @str.append(ptr, ptr)

declare void @str.append_u32(ptr, i32)

declare void @str.append_u8(ptr, i8)

declare void @str.from_builder(ptr, ptr, ptr)

declare void @str.substr(ptr, ptr, i64, i64)

declare i64 @str.get_codepoint_size(ptr)

declare ptr @str.advance(ptr)

declare i32 @str.deref(ptr)

declare i32 @str.index(ptr, i64)

declare void @"array.create:(type,*mem.Allocator)->[]json.KeyValuePair"(ptr, i64, ptr)

declare void @"array.add:(json.KeyValuePair {string,json.Value},json.KeyValuePair {string,json.Value})->void"(ptr, ptr)

declare void @"array.create:(type,*mem.Allocator)->[]json.Value"(ptr, i64, ptr)

declare void @"array.add:(json.Value {json.Type,json.ValueUnion},json.Value {json.Type,json.ValueUnion})->void"(ptr, ptr)

declare void @"array.add:(*[]u32,u32)->void"(ptr, i32)

declare void @"array.create:(type,*mem.Allocator)->[]u8"(ptr, i64, ptr)

declare void @"array.add:(*[]u8,u8)->void"(ptr, i8)

declare void @"array.create:(type,*mem.Allocator)->[]u32"(ptr, i64, ptr)

declare void @"array.free:(*[]u32)->void"(ptr)

declare void @"array.free:(*[]u8)->void"(ptr)

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!80, !81}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false)
!1 = !DIFile(filename: "mem.rcp", directory: "E:\\C_Projects\\ReComp\\std")
!2 = !{!3, !15, !36, !45, !50, !54, !65, !71}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.TypeKind", scope: !1, file: !1, size: 64, align: 64, elements: !4)
!4 = !{!5, !6, !7, !8, !9, !10, !11, !12, !13, !14}
!5 = !DIEnumerator(name: "Invalid", value: 0, isUnsigned: true)
!6 = !DIEnumerator(name: "Basic", value: 1, isUnsigned: true)
!7 = !DIEnumerator(name: "Function", value: 2, isUnsigned: true)
!8 = !DIEnumerator(name: "Struct", value: 3, isUnsigned: true)
!9 = !DIEnumerator(name: "Pointer", value: 4, isUnsigned: true)
!10 = !DIEnumerator(name: "Array", value: 5, isUnsigned: true)
!11 = !DIEnumerator(name: "Slice", value: 6, isUnsigned: true)
!12 = !DIEnumerator(name: "Vector", value: 7, isUnsigned: true)
!13 = !DIEnumerator(name: "Enum", value: 8, isUnsigned: true)
!14 = !DIEnumerator(name: "Generic", value: 9, isUnsigned: true)
!15 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.BasicKind", scope: !1, file: !1, size: 64, align: 64, elements: !16)
!16 = !{!17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35}
!17 = !DIEnumerator(name: "Bool", value: 0, isUnsigned: true)
!18 = !DIEnumerator(name: "String", value: 1, isUnsigned: true)
!19 = !DIEnumerator(name: "U8", value: 2, isUnsigned: true)
!20 = !DIEnumerator(name: "U16", value: 3, isUnsigned: true)
!21 = !DIEnumerator(name: "U32", value: 4, isUnsigned: true)
!22 = !DIEnumerator(name: "U64", value: 5, isUnsigned: true)
!23 = !DIEnumerator(name: "I8", value: 6, isUnsigned: true)
!24 = !DIEnumerator(name: "I16", value: 7, isUnsigned: true)
!25 = !DIEnumerator(name: "I32", value: 8, isUnsigned: true)
!26 = !DIEnumerator(name: "I64", value: 9, isUnsigned: true)
!27 = !DIEnumerator(name: "F32", value: 10, isUnsigned: true)
!28 = !DIEnumerator(name: "F64", value: 11, isUnsigned: true)
!29 = !DIEnumerator(name: "untypedInteger", value: 12, isUnsigned: true)
!30 = !DIEnumerator(name: "untypedFloat", value: 13, isUnsigned: true)
!31 = !DIEnumerator(name: "Int", value: 14, isUnsigned: true)
!32 = !DIEnumerator(name: "Uint", value: 15, isUnsigned: true)
!33 = !DIEnumerator(name: "Type", value: 16, isUnsigned: true)
!34 = !DIEnumerator(name: "Auto", value: 17, isUnsigned: true)
!35 = !DIEnumerator(name: "Module", value: 18, isUnsigned: true)
!36 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.BasicFlag", scope: !1, file: !1, size: 32, align: 32, elements: !37)
!37 = !{!38, !39, !40, !41, !42, !43, !44}
!38 = !DIEnumerator(name: "Boolean", value: 1, isUnsigned: true)
!39 = !DIEnumerator(name: "Integer", value: 2, isUnsigned: true)
!40 = !DIEnumerator(name: "Float", value: 4, isUnsigned: true)
!41 = !DIEnumerator(name: "String", value: 8, isUnsigned: true)
!42 = !DIEnumerator(name: "Untyped", value: 32, isUnsigned: true)
!43 = !DIEnumerator(name: "Unsigned", value: 64, isUnsigned: true)
!44 = !DIEnumerator(name: "TypeID", value: 128, isUnsigned: true)
!45 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.StructFlag", scope: !1, file: !1, size: 32, align: 32, elements: !46)
!46 = !{!47, !48, !49}
!47 = !DIEnumerator(name: "Packed", value: 1, isUnsigned: true)
!48 = !DIEnumerator(name: "Generic", value: 2, isUnsigned: true)
!49 = !DIEnumerator(name: "Union", value: 4, isUnsigned: true)
!50 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.VectorKind", scope: !1, file: !1, size: 64, align: 64, elements: !51)
!51 = !{!52, !53}
!52 = !DIEnumerator(name: "Float", value: 0, isUnsigned: true)
!53 = !DIEnumerator(name: "Int", value: 1, isUnsigned: true)
!54 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compile.CompileFlag", scope: !1, file: !1, size: 32, align: 32, elements: !55)
!55 = !{!56, !57, !58, !59, !60, !61, !62, !63, !64}
!56 = !DIEnumerator(name: "Debug", value: 1, isUnsigned: true)
!57 = !DIEnumerator(name: "SanAddress", value: 2, isUnsigned: true)
!58 = !DIEnumerator(name: "SanMemory", value: 4, isUnsigned: true)
!59 = !DIEnumerator(name: "SanThread", value: 8, isUnsigned: true)
!60 = !DIEnumerator(name: "SanUndefined", value: 16, isUnsigned: true)
!61 = !DIEnumerator(name: "NoStdLib", value: 32, isUnsigned: true)
!62 = !DIEnumerator(name: "SharedLib", value: 64, isUnsigned: true)
!63 = !DIEnumerator(name: "CrossAndroid", value: 128, isUnsigned: true)
!64 = !DIEnumerator(name: "NoLink", value: 256, isUnsigned: true)
!65 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compile.Arch", scope: !1, file: !1, size: 32, align: 32, elements: !66)
!66 = !{!67, !68, !69, !70}
!67 = !DIEnumerator(name: "x86_64", value: 0, isUnsigned: true)
!68 = !DIEnumerator(name: "x86", value: 1, isUnsigned: true)
!69 = !DIEnumerator(name: "Arm32", value: 2, isUnsigned: true)
!70 = !DIEnumerator(name: "Arm64", value: 4, isUnsigned: true)
!71 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "json.Type", scope: !1, file: !1, size: 64, align: 64, elements: !72)
!72 = !{!73, !74, !75, !76, !77, !78, !79}
!73 = !DIEnumerator(name: "Number", value: 0, isUnsigned: true)
!74 = !DIEnumerator(name: "Integer", value: 1, isUnsigned: true)
!75 = !DIEnumerator(name: "String", value: 2, isUnsigned: true)
!76 = !DIEnumerator(name: "Object", value: 3, isUnsigned: true)
!77 = !DIEnumerator(name: "Array", value: 4, isUnsigned: true)
!78 = !DIEnumerator(name: "Boolean", value: 5, isUnsigned: true)
!79 = !DIEnumerator(name: "Null", value: 6, isUnsigned: true)
!80 = !{i32 2, !"CodeView", i32 1}
!81 = !{i32 2, !"Debug Info Version", i32 3}
!82 = distinct !DISubprogram(name: "generic_alloc", linkageName: "mem.generic_alloc", scope: !1, file: !1, line: 26, type: !83, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !89)
!83 = !DISubroutineType(types: !84)
!84 = !{!85, !86, !87}
!85 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*void", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!86 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!87 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*mem.Allocator", baseType: !88, size: 64, align: 64, dwarfAddressSpace: 0)
!88 = !DICompositeType(tag: DW_TAG_structure_type, name: "mem.Allocator", scope: !1, file: !1, size: 192, align: 64, flags: DIFlagFwdDecl)
!89 = !{}
!90 = !DILocation(line: 26, scope: !82)
!91 = !DILocalVariable(name: "size", scope: !82, file: !1, line: 26, type: !86)
!92 = !DILocalVariable(name: "this", arg: 1, scope: !82, file: !1, line: 26, type: !87)
!93 = !DILocation(line: 27, scope: !82)
!94 = distinct !DISubprogram(name: "generic_free", linkageName: "mem.generic_free", scope: !1, file: !1, line: 30, type: !95, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !89)
!95 = !DISubroutineType(types: !96)
!96 = !{null, !85, !87}
!97 = !DILocation(line: 30, scope: !94)
!98 = !DILocalVariable(name: "ptr", scope: !94, file: !1, line: 30, type: !85)
!99 = !DILocalVariable(name: "this", arg: 1, scope: !94, file: !1, line: 30, type: !87)
!100 = !DILocation(line: 31, scope: !94)
!101 = !DILocation(line: 32, scope: !94)
!102 = distinct !DISubprogram(name: "create_generic_allocator", linkageName: "mem.create_generic_allocator", scope: !1, file: !1, line: 34, type: !103, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !89)
!103 = !DISubroutineType(types: !104)
!104 = !{!105}
!105 = !DICompositeType(tag: DW_TAG_structure_type, name: "mem.Allocator", scope: !1, file: !1, size: 192, elements: !106)
!106 = !{!107, !109, !111}
!107 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1, file: !1, baseType: !108, size: 64, align: 64)
!108 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*fn(int, *mem.Allocator) -> ?*", baseType: !83, size: 64, align: 64, dwarfAddressSpace: 0)
!109 = !DIDerivedType(tag: DW_TAG_member, name: "free", scope: !1, file: !1, baseType: !110, size: 64, align: 64, offset: 64)
!110 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*fn(*, *mem.Allocator)", baseType: !95, size: 64, align: 64, dwarfAddressSpace: 0)
!111 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !85, size: 64, align: 64, offset: 128)
!112 = !DILocation(line: 35, scope: !102)
!113 = !DILocalVariable(name: "r", scope: !102, file: !1, line: 35, type: !105)
!114 = !DILocation(line: 40, scope: !102)
!115 = distinct !DISubprogram(name: "arena_alloc", linkageName: "mem.arena_alloc", scope: !1, file: !1, line: 48, type: !83, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !89)
!116 = !DILocation(line: 48, scope: !115)
!117 = !DILocalVariable(name: "size", scope: !115, file: !1, line: 48, type: !86)
!118 = !DILocalVariable(name: "this", arg: 1, scope: !115, file: !1, line: 48, type: !87)
!119 = !DILocation(line: 49, scope: !115)
!120 = !DILocalVariable(name: "ctx", scope: !115, file: !1, line: 49, type: !121)
!121 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*mem.ScratchContext", baseType: !122, size: 64, align: 64, dwarfAddressSpace: 0)
!122 = !DICompositeType(tag: DW_TAG_structure_type, name: "mem.ScratchContext", scope: !1, file: !1, size: 128, elements: !123)
!123 = !{!124, !127}
!124 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1, file: !1, baseType: !125, size: 64, align: 64)
!125 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*u8", baseType: !126, size: 64, align: 64, dwarfAddressSpace: 0)
!126 = !DIBasicType(name: "u8", size: 8, encoding: DW_ATE_unsigned)
!127 = !DIDerivedType(tag: DW_TAG_member, name: "max", scope: !1, file: !1, baseType: !125, size: 64, align: 64, offset: 64)
!128 = !DILocation(line: 50, scope: !115)
!129 = !DILocation(line: 51, scope: !115)
!130 = !DILocation(line: 53, scope: !115)
!131 = !DILocalVariable(name: "res", scope: !115, file: !1, line: 53, type: !125)
!132 = !DILocation(line: 54, scope: !115)
!133 = !DILocation(line: 56, scope: !115)
!134 = distinct !DISubprogram(name: "no_free", linkageName: "mem.no_free", scope: !1, file: !1, line: 59, type: !95, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !89)
!135 = !DILocation(line: 59, scope: !134)
!136 = !DILocalVariable(name: "p", scope: !134, file: !1, line: 59, type: !85)
!137 = !DILocalVariable(name: "this", arg: 1, scope: !134, file: !1, line: 59, type: !87)
!138 = !DILocation(line: 61, scope: !134)
!139 = distinct !DISubprogram(name: "create_scratch", linkageName: "mem.create_scratch", scope: !1, file: !1, line: 63, type: !140, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !89)
!140 = !DISubroutineType(types: !141)
!141 = !{!105, !86}
!142 = !DILocation(line: 63, scope: !139)
!143 = !DILocalVariable(name: "max_size", scope: !139, file: !1, line: 63, type: !86)
!144 = !DILocation(line: 64, scope: !139)
!145 = !DILocalVariable(name: "ctx", scope: !139, file: !1, line: 64, type: !121)
!146 = !DILocation(line: 65, scope: !139)
!147 = !DILocation(line: 66, scope: !139)
!148 = !DILocation(line: 68, scope: !139)
!149 = !DILocalVariable(name: "r", scope: !139, file: !1, line: 68, type: !105)
!150 = !DILocation(line: 74, scope: !139)
!151 = distinct !DISubprogram(name: "destroy_scratch", linkageName: "mem.destroy_scratch", scope: !1, file: !1, line: 77, type: !152, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !89)
!152 = !DISubroutineType(types: !153)
!153 = !{null, !87}
!154 = !DILocation(line: 77, scope: !151)
!155 = !DILocalVariable(name: "a", scope: !151, file: !1, line: 77, type: !87)
!156 = !DILocation(line: 78, scope: !151)
!157 = !DILocalVariable(name: "ctx", scope: !151, file: !1, line: 78, type: !121)
!158 = !DILocation(line: 79, scope: !151)
!159 = !DILocation(line: 80, scope: !151)
!160 = !DILocation(line: 81, scope: !151)
!161 = distinct !DISubprogram(name: "make_slice:(type,int,*mem.Allocator)->[]u8", linkageName: "mem.make_slice:(type,int,*mem.Allocator)->[]u8", scope: !1, file: !1, line: 10, type: !162, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !89)
!162 = !DISubroutineType(types: !163)
!163 = !{!164, !168, !86, !87}
!164 = !DICompositeType(tag: DW_TAG_structure_type, scope: !1, file: !1, size: 128, align: 64, elements: !165)
!165 = !{!166, !167}
!166 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1, file: !1, baseType: !86, size: 64, align: 64)
!167 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !125, size: 64, align: 64, offset: 64)
!168 = !DIBasicType(name: "type", size: 64, encoding: DW_ATE_unsigned)
!169 = !DILocation(line: 10, scope: !161)
!170 = !DILocalVariable(name: "T", scope: !161, file: !1, line: 10, type: !168)
!171 = !DILocalVariable(name: "size", arg: 1, scope: !161, file: !1, line: 10, type: !86)
!172 = !DILocalVariable(name: "alloc", arg: 2, scope: !161, file: !1, line: 10, type: !87)
!173 = !DILocation(line: 11, scope: !161)
!174 = !DILocalVariable(name: "res", scope: !161, file: !1, line: 11, type: !164)
!175 = !DILocation(line: 12, scope: !161)
!176 = !DILocation(line: 13, scope: !161)
!177 = !DILocation(line: 14, scope: !161)
