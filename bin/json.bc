; ModuleID = 'json'
source_filename = "json.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%string = type { ptr, i64 }
%slice.5 = type { i64, ptr }
%json.Value = type { i64, %json.ValueUnion }
%json.ValueUnion = type { %string }
%slice.4 = type { i64, ptr }
%json.KeyValuePair = type { %string, %json.Value }
%json.Dictionary = type { %slice.4 }
%json.Parser = type { %string, ptr, i64, i1 }
%slice.7 = type { i64, ptr }
%init.Arg = type { i64, ptr }
%slice.8 = type { i64, ptr }

@main.test_string = external global %string
@init.INVALID_TYPE = external global i64
@init.type_table = external global %slice.5
@os.STD_INPUT_HANDLE = external global i32
@os.STD_OUTPUT_HANDLE = external global i32
@os.STD_ERROR_HANDLE = external global i32
@os.INVALID_HANDLE_VALUE = external global ptr
@os.CP_UTF7 = external global i32
@os.CP_UTF8 = external global i32
@os.MEM_COMMIT = external global i32
@os.MEM_RESERVE = external global i32
@os.MEM_RELEASE = external global i32
@os.PAGE_NOACCESS = external global i32
@os.PAGE_READONLY = external global i32
@os.PAGE_READWRITE = external global i32
@os.PAGE_WRITECOPY = external global i32
@os.PAGE_EXECUTE = external global i32
@os.PAGE_EXECUTE_READ = external global i32
@os.PAGE_EXECUTE_READWRITE = external global i32
@os.PAGE_EXECUTE_WRITECOPY = external global i32
@os.PAGE_GUARD = external global i32
@os.PAGE_NOCACHE = external global i32
@os.PAGE_WRITECOMBINE = external global i32
@str.CONTINUE_BIT = external global i8
@0 = private unnamed_addr constant [23 x i8] c"Expected %c but got %c\00", align 1
@1 = private unnamed_addr constant [23 x i8] c"Invalid number literal\00", align 1
@2 = private unnamed_addr constant [22 x i8] c"Invalid literal value\00", align 1
@3 = private unnamed_addr constant [30 x i8] c"Array should start with a '['\00", align 1
@4 = private unnamed_addr constant [23 x i8] c"Invalid value in array\00", align 1
@5 = private unnamed_addr constant [37 x i8] c"Expected , or ] after value in array\00", align 1
@6 = private unnamed_addr constant [31 x i8] c"Object should start with a '{'\00", align 1
@7 = private unnamed_addr constant [21 x i8] c"Invalid name in json\00", align 1
@8 = private unnamed_addr constant [23 x i8] c"Expected : after \\\22%\\\22\00", align 1
@9 = private unnamed_addr constant [24 x i8] c"Invalid value for \\\22%\\\22\00", align 1
@10 = private unnamed_addr constant [35 x i8] c"Expected , or } after \\\22%\\\22 value \00", align 1

define void @json.__GlobalInitializerFunction.0() {
block_0:
  ret void
}

declare i32 @main.main()

define void @json.get_item(ptr %0, ptr %1, ptr %2) !dbg !82 {
block_0:
  %3 = alloca %json.Value, align 8
  %4 = alloca %string, align 8
  %5 = alloca %json.Value, align 8
  %6 = alloca %slice.4, align 8
  %7 = alloca i64, align 8
  %8 = alloca %json.KeyValuePair, align 8
  %9 = alloca %json.Value, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %1, i64 24, i1 false), !dbg !124
  call void @llvm.dbg.value(metadata ptr %3, metadata !125, metadata !DIExpression()), !dbg !124
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %2, i64 16, i1 false), !dbg !124
  call void @llvm.dbg.value(metadata ptr %4, metadata !126, metadata !DIExpression()), !dbg !124
  %10 = getelementptr inbounds %json.Value, ptr %3, i32 0, i32 0, !dbg !127
  %11 = load i64, ptr %10, align 8, !dbg !127
  %12 = fcmp one i64 %11, 3, !dbg !127
  br i1 %12, label %block_1, label %block_2, !dbg !127

block_1:                                          ; preds = %block_0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %5, i64 24, i1 false), !dbg !127
  ret void, !dbg !127

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !127

block_3:                                          ; preds = %block_2
  %13 = getelementptr inbounds %json.Value, ptr %3, i32 0, i32 1, !dbg !128
  %14 = getelementptr inbounds %json.Dictionary, ptr %13, i32 0, i32 0, !dbg !128
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %14, i64 16, i1 false), !dbg !128
  call void @llvm.dbg.declare(metadata ptr %6, metadata !129, metadata !DIExpression()), !dbg !128
  %15 = getelementptr inbounds %slice.4, ptr %6, i32 0, i32 0, !dbg !130
  %16 = load i64, ptr %15, align 8, !dbg !130
  store i64 0, ptr %7, align 8, !dbg !130
  br label %block_4, !dbg !130

block_4:                                          ; preds = %block_6, %block_3
  %17 = load i64, ptr %7, align 8, !dbg !130
  %18 = icmp ult i64 %17, %16, !dbg !130
  br i1 %18, label %block_5, label %block_7, !dbg !130

block_5:                                          ; preds = %block_4
  %19 = load i64, ptr %7, align 8, !dbg !130
  %20 = getelementptr inbounds %slice.4, ptr %6, i32 0, i32 1, !dbg !130
  %21 = load ptr, ptr %20, align 8, !dbg !130
  %22 = getelementptr %json.KeyValuePair, ptr %21, i64 %19, !dbg !130
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %8, ptr align 8 %22, i64 40, i1 false), !dbg !130
  call void @llvm.dbg.declare(metadata ptr %8, metadata !131, metadata !DIExpression()), !dbg !130
  call void @llvm.dbg.declare(metadata ptr %7, metadata !132, metadata !DIExpression()), !dbg !130
  %23 = getelementptr inbounds %json.KeyValuePair, ptr %8, i32 0, i32 0, !dbg !133
  %24 = getelementptr inbounds %string, ptr %23, i32 0, i32 1, !dbg !133
  %25 = load i64, ptr %24, align 8, !dbg !133
  %26 = getelementptr inbounds %string, ptr %4, i32 0, i32 1, !dbg !133
  %27 = load i64, ptr %26, align 8, !dbg !133
  %28 = icmp eq i64 %25, %27, !dbg !133
  br i1 %28, label %block_8, label %block_9, !dbg !133

block_8:                                          ; preds = %block_5
  %29 = getelementptr inbounds %json.KeyValuePair, ptr %8, i32 0, i32 0, !dbg !134
  %30 = getelementptr inbounds %string, ptr %29, i32 0, i32 0, !dbg !134
  %31 = load ptr, ptr %30, align 8, !dbg !134
  %32 = getelementptr inbounds %string, ptr %4, i32 0, i32 0, !dbg !134
  %33 = load ptr, ptr %32, align 8, !dbg !134
  %34 = getelementptr inbounds %json.KeyValuePair, ptr %8, i32 0, i32 0, !dbg !134
  %35 = getelementptr inbounds %string, ptr %34, i32 0, i32 1, !dbg !134
  %36 = load i64, ptr %35, align 8, !dbg !134
  %37 = call i32 @memcmp(ptr %31, ptr %33, i64 %36), !dbg !134
  %38 = icmp eq i32 %37, 0, !dbg !134
  br i1 %38, label %block_11, label %block_12, !dbg !134

block_11:                                         ; preds = %block_8
  %39 = getelementptr inbounds %json.KeyValuePair, ptr %8, i32 0, i32 1, !dbg !135
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %39, i64 24, i1 false), !dbg !135
  ret void, !dbg !135

block_12:                                         ; preds = %block_8
  br label %block_13, !dbg !135

block_13:                                         ; preds = %block_12
  br label %block_10, !dbg !135

block_9:                                          ; preds = %block_5
  br label %block_10, !dbg !135

block_10:                                         ; preds = %block_9, %block_13
  br label %block_6, !dbg !135

block_6:                                          ; preds = %block_10
  %40 = load i64, ptr %7, align 8, !dbg !135
  %41 = add i64 %40, 1, !dbg !135
  store i64 %41, ptr %7, align 8, !dbg !135
  br label %block_4, !dbg !135

block_7:                                          ; preds = %block_4
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %9, i64 24, i1 false), !dbg !136
  ret void, !dbg !136
}

define void @json.parse(ptr %0, ptr %1, ptr %2) !dbg !137 {
block_0:
  %3 = alloca %string, align 8
  %4 = alloca ptr, align 8
  %5 = alloca %json.Parser, align 8
  %6 = alloca %string, align 8
  %7 = alloca %json.Parser, align 8
  %8 = alloca %json.Value, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %1, i64 16, i1 false), !dbg !142
  call void @llvm.dbg.value(metadata ptr %3, metadata !143, metadata !DIExpression()), !dbg !142
  store ptr %2, ptr %4, align 8, !dbg !142
  call void @llvm.dbg.value(metadata ptr %4, metadata !144, metadata !DIExpression()), !dbg !142
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %3, i64 16, i1 false), !dbg !145
  call void @json.make_parser(ptr %5, ptr %6), !dbg !145
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %5, i64 40, i1 false), !dbg !145
  call void @llvm.dbg.declare(metadata ptr %7, metadata !146, metadata !DIExpression()), !dbg !145
  %9 = load ptr, ptr %4, align 8, !dbg !152
  call void @json.parse_object(ptr %8, ptr %7, ptr %9), !dbg !152
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %8, i64 24, i1 false), !dbg !152
  ret void, !dbg !152
}

define void @json.create_dict(ptr %0, ptr %1) !dbg !153 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca %json.Dictionary, align 8
  %4 = alloca %slice.4, align 8
  store ptr %1, ptr %2, align 8, !dbg !156
  call void @llvm.dbg.value(metadata ptr %2, metadata !157, metadata !DIExpression()), !dbg !156
  %5 = load ptr, ptr %2, align 8, !dbg !158
  call void @"array.create:(type,*mem.Allocator)->[]json.KeyValuePair"(ptr %4, i64 236, ptr %5), !dbg !158
  %6 = getelementptr inbounds %json.Dictionary, ptr %3, i32 0, i32 0, !dbg !158
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %4, i64 16, i1 false), !dbg !158
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %3, i64 16, i1 false), !dbg !158
  ret void, !dbg !158
}

define void @json.add_kvp(ptr %0, ptr %1, ptr %2) !dbg !159 {
block_0:
  %3 = alloca ptr, align 8
  %4 = alloca %string, align 8
  %5 = alloca %json.Value, align 8
  %6 = alloca ptr, align 8
  %7 = alloca %json.KeyValuePair, align 8
  %8 = alloca %string, align 8
  %9 = alloca %json.KeyValuePair, align 8
  store ptr %0, ptr %3, align 8, !dbg !163
  call void @llvm.dbg.value(metadata ptr %3, metadata !164, metadata !DIExpression()), !dbg !163
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %1, i64 16, i1 false), !dbg !163
  call void @llvm.dbg.value(metadata ptr %4, metadata !165, metadata !DIExpression()), !dbg !163
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 %2, i64 24, i1 false), !dbg !163
  call void @llvm.dbg.value(metadata ptr %5, metadata !166, metadata !DIExpression()), !dbg !163
  %10 = load ptr, ptr %3, align 8, !dbg !167
  store ptr %10, ptr %6, align 8, !dbg !167
  call void @llvm.dbg.declare(metadata ptr %6, metadata !168, metadata !DIExpression()), !dbg !167
  %11 = load ptr, ptr %6, align 8, !dbg !169
  %12 = getelementptr inbounds %json.Dictionary, ptr %11, i32 0, i32 0, !dbg !169
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %8, ptr align 8 %4, i64 16, i1 false), !dbg !169
  %13 = getelementptr inbounds %json.KeyValuePair, ptr %7, i32 0, i32 0, !dbg !169
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %13, ptr align 8 %8, i64 16, i1 false), !dbg !169
  %14 = getelementptr inbounds %json.KeyValuePair, ptr %7, i32 0, i32 1, !dbg !169
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %14, ptr align 8 %5, i64 24, i1 false), !dbg !169
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %9, ptr align 8 %7, i64 40, i1 false), !dbg !169
  call void @"array.add:(json.KeyValuePair {string,json.Value},json.KeyValuePair {string,json.Value})->void"(ptr %12, ptr %9), !dbg !169
  ret void, !dbg !170
}

define i1 @json.is_whitespace(i32 %0) !dbg !171 {
block_0:
  %1 = alloca i32, align 4
  store i32 %0, ptr %1, align 4, !dbg !175
  call void @llvm.dbg.value(metadata ptr %1, metadata !176, metadata !DIExpression()), !dbg !175
  %2 = load i32, ptr %1, align 4, !dbg !177
  %3 = icmp eq i32 %2, 10, !dbg !177
  %4 = load i32, ptr %1, align 4, !dbg !177
  %5 = icmp eq i32 %4, 13, !dbg !177
  %6 = icmp ne i1 %3, false, !dbg !177
  %7 = icmp ne i1 %5, false, !dbg !177
  %8 = or i1 %6, %7, !dbg !177
  %9 = load i32, ptr %1, align 4, !dbg !177
  %10 = icmp eq i32 %9, 9, !dbg !177
  %11 = icmp ne i1 %8, false, !dbg !177
  %12 = icmp ne i1 %10, false, !dbg !177
  %13 = or i1 %11, %12, !dbg !177
  %14 = load i32, ptr %1, align 4, !dbg !177
  %15 = icmp eq i32 %14, 32, !dbg !177
  %16 = icmp ne i1 %13, false, !dbg !177
  %17 = icmp ne i1 %15, false, !dbg !177
  %18 = or i1 %16, %17, !dbg !177
  ret i1 %18, !dbg !177
}

define i32 @json.peek_char(ptr %0) !dbg !178 {
block_0:
  %1 = alloca ptr, align 8
  store ptr %0, ptr %1, align 8, !dbg !182
  call void @llvm.dbg.value(metadata ptr %1, metadata !183, metadata !DIExpression()), !dbg !182
  %2 = load ptr, ptr %1, align 8, !dbg !184
  %3 = getelementptr inbounds %json.Parser, ptr %2, i32 0, i32 1, !dbg !184
  %4 = load ptr, ptr %3, align 8, !dbg !184
  %5 = call i32 @str.deref(ptr %4), !dbg !184
  ret i32 %5, !dbg !184
}

define i32 @json.next_char(ptr %0) !dbg !185 {
block_0:
  %1 = alloca ptr, align 8
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  store ptr %0, ptr %1, align 8, !dbg !186
  call void @llvm.dbg.value(metadata ptr %1, metadata !187, metadata !DIExpression()), !dbg !186
  %4 = load ptr, ptr %1, align 8, !dbg !188
  store ptr %4, ptr %2, align 8, !dbg !188
  call void @llvm.dbg.declare(metadata ptr %2, metadata !189, metadata !DIExpression()), !dbg !188
  %5 = load ptr, ptr %2, align 8, !dbg !190
  %6 = getelementptr inbounds %json.Parser, ptr %5, i32 0, i32 2, !dbg !190
  %7 = load i64, ptr %6, align 8, !dbg !190
  %8 = load ptr, ptr %2, align 8, !dbg !190
  %9 = getelementptr inbounds %json.Parser, ptr %8, i32 0, i32 0, !dbg !190
  %10 = getelementptr inbounds %string, ptr %9, i32 0, i32 1, !dbg !190
  %11 = load i64, ptr %10, align 8, !dbg !190
  %12 = icmp sge i64 %7, %11, !dbg !190
  br i1 %12, label %block_1, label %block_2, !dbg !190

block_1:                                          ; preds = %block_0
  %13 = load ptr, ptr %2, align 8, !dbg !191
  %14 = getelementptr inbounds %json.Parser, ptr %13, i32 0, i32 3, !dbg !191
  store i1 true, ptr %14, align 1, !dbg !191
  ret i32 0, !dbg !192

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !192

block_3:                                          ; preds = %block_2
  %15 = load ptr, ptr %2, align 8, !dbg !193
  %16 = getelementptr inbounds %json.Parser, ptr %15, i32 0, i32 1, !dbg !193
  %17 = load ptr, ptr %16, align 8, !dbg !193
  %18 = call i32 @str.deref(ptr %17), !dbg !193
  store i32 %18, ptr %3, align 4, !dbg !193
  call void @llvm.dbg.declare(metadata ptr %3, metadata !194, metadata !DIExpression()), !dbg !193
  %19 = load ptr, ptr %2, align 8, !dbg !195
  %20 = getelementptr inbounds %json.Parser, ptr %19, i32 0, i32 1, !dbg !195
  %21 = load ptr, ptr %2, align 8, !dbg !195
  %22 = getelementptr inbounds %json.Parser, ptr %21, i32 0, i32 1, !dbg !195
  %23 = load ptr, ptr %22, align 8, !dbg !195
  %24 = call ptr @str.advance(ptr %23), !dbg !195
  store ptr %24, ptr %20, align 8, !dbg !195
  %25 = load ptr, ptr %2, align 8, !dbg !196
  %26 = getelementptr inbounds %json.Parser, ptr %25, i32 0, i32 2, !dbg !196
  %27 = load ptr, ptr %2, align 8, !dbg !196
  %28 = getelementptr inbounds %json.Parser, ptr %27, i32 0, i32 2, !dbg !196
  %29 = load i64, ptr %28, align 8, !dbg !196
  %30 = add i64 %29, 1, !dbg !196
  store i64 %30, ptr %26, align 8, !dbg !196
  %31 = load i32, ptr %3, align 4, !dbg !197
  ret i32 %31, !dbg !197
}

define i32 @json.eat_char(ptr %0, i32 %1) !dbg !198 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  %5 = alloca %slice.7, align 8
  %6 = alloca [2 x %init.Arg], align 8
  %7 = alloca %string, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store ptr %0, ptr %2, align 8, !dbg !201
  call void @llvm.dbg.value(metadata ptr %2, metadata !202, metadata !DIExpression()), !dbg !201
  store i32 %1, ptr %3, align 4, !dbg !201
  call void @llvm.dbg.value(metadata ptr %3, metadata !203, metadata !DIExpression()), !dbg !201
  %10 = load ptr, ptr %2, align 8, !dbg !204
  store ptr %10, ptr %4, align 8, !dbg !204
  call void @llvm.dbg.declare(metadata ptr %4, metadata !205, metadata !DIExpression()), !dbg !204
  %11 = load ptr, ptr %4, align 8, !dbg !206
  %12 = call i32 @json.peek_char(ptr %11), !dbg !206
  %13 = load i32, ptr %3, align 4, !dbg !206
  %14 = icmp ne i32 %12, %13, !dbg !206
  br i1 %14, label %block_1, label %block_2, !dbg !206

block_1:                                          ; preds = %block_0
  %15 = getelementptr inbounds %slice.7, ptr %5, i32 0, i32 0, !dbg !207
  %16 = getelementptr inbounds %slice.7, ptr %5, i32 0, i32 1, !dbg !207
  store i64 2, ptr %15, align 8, !dbg !207
  store ptr %6, ptr %16, align 8, !dbg !207
  %17 = alloca %string, align 8, !dbg !207
  %String = getelementptr inbounds %string, ptr %17, i32 0, i32 0, !dbg !207
  %Size = getelementptr inbounds %string, ptr %17, i32 0, i32 1, !dbg !207
  store ptr @0, ptr %String, align 8, !dbg !207
  store i64 22, ptr %Size, align 8, !dbg !207
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %17, i64 16, i1 false), !dbg !207
  %18 = load i32, ptr %3, align 4, !dbg !207
  store i32 %18, ptr %8, align 4, !dbg !207
  %19 = getelementptr [2 x %init.Arg], ptr %6, i64 0, i64 0, !dbg !207
  %20 = getelementptr inbounds %init.Arg, ptr %19, i32 0, i32 0, !dbg !207
  %21 = getelementptr inbounds %init.Arg, ptr %19, i32 0, i32 1, !dbg !207
  store i64 4, ptr %20, align 8, !dbg !207
  store ptr %8, ptr %21, align 8, !dbg !207
  %22 = load ptr, ptr %4, align 8, !dbg !207
  %23 = call i32 @json.peek_char(ptr %22), !dbg !207
  store i32 %23, ptr %9, align 4, !dbg !207
  %24 = getelementptr [2 x %init.Arg], ptr %6, i64 0, i64 1, !dbg !207
  %25 = getelementptr inbounds %init.Arg, ptr %24, i32 0, i32 0, !dbg !207
  %26 = getelementptr inbounds %init.Arg, ptr %24, i32 0, i32 1, !dbg !207
  store i64 4, ptr %25, align 8, !dbg !207
  store ptr %9, ptr %26, align 8, !dbg !207
  call void @io.println(ptr %7, ptr %5), !dbg !207
  %27 = load ptr, ptr %4, align 8, !dbg !208
  %28 = getelementptr inbounds %json.Parser, ptr %27, i32 0, i32 3, !dbg !208
  store i1 true, ptr %28, align 1, !dbg !208
  ret i32 0, !dbg !209

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !209

block_3:                                          ; preds = %block_2
  %29 = load ptr, ptr %4, align 8, !dbg !210
  %30 = call i32 @json.next_char(ptr %29), !dbg !210
  %31 = load i32, ptr %3, align 4, !dbg !211
  ret i32 %31, !dbg !211
}

define void @json.eat_whitespace(ptr %0) !dbg !212 {
block_0:
  %1 = alloca ptr, align 8
  store ptr %0, ptr %1, align 8, !dbg !215
  call void @llvm.dbg.value(metadata ptr %1, metadata !216, metadata !DIExpression()), !dbg !215
  br label %block_1, !dbg !217

block_1:                                          ; preds = %block_2, %block_0
  %2 = load ptr, ptr %1, align 8, !dbg !217
  %3 = call i32 @json.peek_char(ptr %2), !dbg !217
  %4 = call i1 @json.is_whitespace(i32 %3), !dbg !217
  br i1 %4, label %block_2, label %block_3, !dbg !217

block_2:                                          ; preds = %block_1
  %5 = load ptr, ptr %1, align 8, !dbg !218
  %6 = call i32 @json.next_char(ptr %5), !dbg !218
  br label %block_1, !dbg !218

block_3:                                          ; preds = %block_1
  ret void, !dbg !219
}

define void @json.parse_string(ptr %0, ptr %1) !dbg !220 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca %json.Value, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca %json.Value, align 8
  %7 = alloca %string, align 8
  %8 = alloca %string, align 8
  %9 = alloca %json.Value, align 8
  %10 = alloca %json.Value, align 8
  store ptr %1, ptr %2, align 8, !dbg !223
  call void @llvm.dbg.value(metadata ptr %2, metadata !224, metadata !DIExpression()), !dbg !223
  %11 = load ptr, ptr %2, align 8, !dbg !225
  %12 = call i32 @json.eat_char(ptr %11, i32 34), !dbg !225
  %13 = load ptr, ptr %2, align 8, !dbg !226
  %14 = getelementptr inbounds %json.Parser, ptr %13, i32 0, i32 3, !dbg !226
  %15 = load i1, ptr %14, align 1, !dbg !226
  br i1 %15, label %block_1, label %block_2, !dbg !226

block_1:                                          ; preds = %block_0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %3, i64 24, i1 false), !dbg !226
  ret void, !dbg !226

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !226

block_3:                                          ; preds = %block_2
  %16 = load ptr, ptr %2, align 8, !dbg !227
  %17 = getelementptr inbounds %json.Parser, ptr %16, i32 0, i32 1, !dbg !227
  %18 = load ptr, ptr %17, align 8, !dbg !227
  store ptr %18, ptr %4, align 8, !dbg !227
  call void @llvm.dbg.declare(metadata ptr %4, metadata !228, metadata !DIExpression()), !dbg !227
  %19 = load ptr, ptr %4, align 8, !dbg !229
  store ptr %19, ptr %5, align 8, !dbg !229
  call void @llvm.dbg.declare(metadata ptr %5, metadata !230, metadata !DIExpression()), !dbg !229
  br label %block_4, !dbg !231

block_4:                                          ; preds = %block_9, %block_3
  %20 = load ptr, ptr %2, align 8, !dbg !231
  %21 = call i32 @json.peek_char(ptr %20), !dbg !231
  %22 = icmp ne i32 %21, 34, !dbg !231
  %23 = load ptr, ptr %2, align 8, !dbg !231
  %24 = getelementptr inbounds %json.Parser, ptr %23, i32 0, i32 3, !dbg !231
  %25 = load i1, ptr %24, align 1, !dbg !231
  %26 = icmp eq i1 %25, false, !dbg !231
  %27 = icmp ne i1 %22, false, !dbg !231
  %28 = icmp ne i1 %26, false, !dbg !231
  %29 = and i1 %27, %28, !dbg !231
  br i1 %29, label %block_5, label %block_6, !dbg !231

block_5:                                          ; preds = %block_4
  %30 = load ptr, ptr %2, align 8, !dbg !232
  %31 = call i32 @json.peek_char(ptr %30), !dbg !232
  %32 = icmp eq i32 %31, 92, !dbg !232
  br i1 %32, label %block_7, label %block_8, !dbg !232

block_7:                                          ; preds = %block_5
  %33 = load ptr, ptr %2, align 8, !dbg !233
  %34 = call i32 @json.next_char(ptr %33), !dbg !233
  br label %block_9, !dbg !233

block_8:                                          ; preds = %block_5
  br label %block_9, !dbg !233

block_9:                                          ; preds = %block_8, %block_7
  %35 = load ptr, ptr %2, align 8, !dbg !234
  %36 = getelementptr inbounds %json.Parser, ptr %35, i32 0, i32 1, !dbg !234
  %37 = load ptr, ptr %36, align 8, !dbg !234
  store ptr %37, ptr %5, align 8, !dbg !234
  %38 = load ptr, ptr %2, align 8, !dbg !235
  %39 = call i32 @json.next_char(ptr %38), !dbg !235
  br label %block_4, !dbg !235

block_6:                                          ; preds = %block_4
  %40 = load ptr, ptr %2, align 8, !dbg !236
  %41 = getelementptr inbounds %json.Parser, ptr %40, i32 0, i32 3, !dbg !236
  %42 = load i1, ptr %41, align 1, !dbg !236
  br i1 %42, label %block_10, label %block_11, !dbg !236

block_10:                                         ; preds = %block_6
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 24, i1 false), !dbg !236
  ret void, !dbg !236

block_11:                                         ; preds = %block_6
  br label %block_12, !dbg !236

block_12:                                         ; preds = %block_11
  %43 = load ptr, ptr %2, align 8, !dbg !237
  %44 = call i32 @json.eat_char(ptr %43, i32 34), !dbg !237
  %45 = load ptr, ptr %4, align 8, !dbg !238
  %46 = getelementptr inbounds %string, ptr %7, i32 0, i32 0, !dbg !238
  store ptr %45, ptr %46, align 8, !dbg !238
  %47 = load ptr, ptr %5, align 8, !dbg !238
  %48 = load ptr, ptr %4, align 8, !dbg !238
  %49 = ptrtoint ptr %47 to i64, !dbg !238
  %50 = ptrtoint ptr %48 to i64, !dbg !238
  %51 = sub i64 %49, %50, !dbg !238
  %52 = sdiv exact i64 %51, ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), !dbg !238
  %53 = add i64 %52, 1, !dbg !238
  %54 = getelementptr inbounds %string, ptr %7, i32 0, i32 1, !dbg !238
  store i64 %53, ptr %54, align 8, !dbg !238
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %8, ptr align 8 %7, i64 16, i1 false), !dbg !238
  call void @llvm.dbg.declare(metadata ptr %8, metadata !239, metadata !DIExpression()), !dbg !238
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %10, ptr align 8 %9, i64 24, i1 false), !dbg !240
  call void @llvm.dbg.declare(metadata ptr %10, metadata !241, metadata !DIExpression()), !dbg !240
  %55 = getelementptr inbounds %json.Value, ptr %10, i32 0, i32 0, !dbg !242
  store i64 2, ptr %55, align 8, !dbg !242
  %56 = getelementptr inbounds %json.Value, ptr %10, i32 0, i32 1, !dbg !243
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %56, ptr align 8 %8, i64 16, i1 false), !dbg !243
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %10, i64 24, i1 false), !dbg !244
  ret void, !dbg !244
}

define void @json.make_parser(ptr %0, ptr %1) !dbg !245 {
block_0:
  %2 = alloca %string, align 8
  %3 = alloca %json.Parser, align 8
  %4 = alloca %string, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %2, ptr align 8 %1, i64 16, i1 false), !dbg !248
  call void @llvm.dbg.value(metadata ptr %2, metadata !249, metadata !DIExpression()), !dbg !248
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %2, i64 16, i1 false), !dbg !250
  %5 = getelementptr inbounds %json.Parser, ptr %3, i32 0, i32 0, !dbg !250
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 %4, i64 16, i1 false), !dbg !250
  %6 = getelementptr inbounds %string, ptr %2, i32 0, i32 0, !dbg !250
  %7 = load ptr, ptr %6, align 8, !dbg !250
  %8 = getelementptr inbounds %json.Parser, ptr %3, i32 0, i32 1, !dbg !250
  store ptr %7, ptr %8, align 8, !dbg !250
  %9 = getelementptr inbounds %json.Parser, ptr %3, i32 0, i32 2, !dbg !250
  store i64 0, ptr %9, align 8, !dbg !250
  %10 = getelementptr inbounds %json.Parser, ptr %3, i32 0, i32 3, !dbg !250
  store i1 false, ptr %10, align 1, !dbg !250
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %3, i64 40, i1 false), !dbg !250
  ret void, !dbg !250
}

define i1 @json.is_number(i32 %0) !dbg !251 {
block_0:
  %1 = alloca i32, align 4
  store i32 %0, ptr %1, align 4, !dbg !252
  call void @llvm.dbg.value(metadata ptr %1, metadata !253, metadata !DIExpression()), !dbg !252
  %2 = load i32, ptr %1, align 4, !dbg !254
  %3 = icmp uge i32 %2, 48, !dbg !254
  %4 = load i32, ptr %1, align 4, !dbg !254
  %5 = icmp ule i32 %4, 57, !dbg !254
  %6 = icmp ne i1 %3, false, !dbg !254
  %7 = icmp ne i1 %5, false, !dbg !254
  %8 = and i1 %6, %7, !dbg !254
  ret i1 %8, !dbg !254
}

define void @json.parse_number(ptr %0, ptr %1) !dbg !255 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca i1, align 1
  %4 = alloca %slice.7, align 8
  %5 = alloca [0 x %init.Arg], align 8
  %6 = alloca %string, align 8
  %7 = alloca %json.Value, align 8
  %8 = alloca i64, align 8
  %9 = alloca %json.Value, align 8
  %10 = alloca %json.Value, align 8
  store ptr %1, ptr %2, align 8, !dbg !256
  call void @llvm.dbg.value(metadata ptr %2, metadata !257, metadata !DIExpression()), !dbg !256
  store i1 false, ptr %3, align 1, !dbg !258
  call void @llvm.dbg.declare(metadata ptr %3, metadata !259, metadata !DIExpression()), !dbg !258
  %11 = load ptr, ptr %2, align 8, !dbg !260
  %12 = call i32 @json.peek_char(ptr %11), !dbg !260
  %13 = icmp eq i32 %12, 45, !dbg !260
  br i1 %13, label %block_1, label %block_2, !dbg !260

block_1:                                          ; preds = %block_0
  store i1 true, ptr %3, align 1, !dbg !261
  %14 = load ptr, ptr %2, align 8, !dbg !262
  %15 = call i32 @json.next_char(ptr %14), !dbg !262
  %16 = load ptr, ptr %2, align 8, !dbg !263
  %17 = call i32 @json.peek_char(ptr %16), !dbg !263
  %18 = call i1 @json.is_number(i32 %17), !dbg !263
  %19 = icmp eq i1 %18, false, !dbg !263
  br i1 %19, label %block_4, label %block_5, !dbg !263

block_4:                                          ; preds = %block_1
  %20 = getelementptr inbounds %slice.7, ptr %4, i32 0, i32 0, !dbg !264
  %21 = getelementptr inbounds %slice.7, ptr %4, i32 0, i32 1, !dbg !264
  store i64 0, ptr %20, align 8, !dbg !264
  store ptr %5, ptr %21, align 8, !dbg !264
  %22 = alloca %string, align 8, !dbg !264
  %String = getelementptr inbounds %string, ptr %22, i32 0, i32 0, !dbg !264
  %Size = getelementptr inbounds %string, ptr %22, i32 0, i32 1, !dbg !264
  store ptr @1, ptr %String, align 8, !dbg !264
  store i64 22, ptr %Size, align 8, !dbg !264
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %22, i64 16, i1 false), !dbg !264
  call void @io.println(ptr %6, ptr %4), !dbg !264
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %7, i64 24, i1 false), !dbg !265
  ret void, !dbg !265

block_5:                                          ; preds = %block_1
  br label %block_6, !dbg !265

block_6:                                          ; preds = %block_5
  br label %block_3, !dbg !265

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !265

block_3:                                          ; preds = %block_2, %block_6
  store i64 0, ptr %8, align 8, !dbg !266
  call void @llvm.dbg.declare(metadata ptr %8, metadata !267, metadata !DIExpression()), !dbg !266
  br label %block_7, !dbg !268

block_7:                                          ; preds = %block_8, %block_3
  %23 = load ptr, ptr %2, align 8, !dbg !268
  %24 = call i32 @json.peek_char(ptr %23), !dbg !268
  %25 = call i1 @json.is_number(i32 %24), !dbg !268
  br i1 %25, label %block_8, label %block_9, !dbg !268

block_8:                                          ; preds = %block_7
  %26 = load i64, ptr %8, align 8, !dbg !269
  %27 = mul i64 %26, 10, !dbg !269
  store i64 %27, ptr %8, align 8, !dbg !269
  %28 = load i64, ptr %8, align 8, !dbg !270
  %29 = load ptr, ptr %2, align 8, !dbg !270
  %30 = call i32 @json.next_char(ptr %29), !dbg !270
  %31 = sub i32 %30, 48, !dbg !270
  %32 = zext i32 %31 to i64, !dbg !270
  %33 = add i64 %28, %32, !dbg !270
  store i64 %33, ptr %8, align 8, !dbg !270
  br label %block_7, !dbg !270

block_9:                                          ; preds = %block_7
  %34 = load i1, ptr %3, align 1, !dbg !271
  br i1 %34, label %block_10, label %block_11, !dbg !271

block_10:                                         ; preds = %block_9
  %35 = load i64, ptr %8, align 8, !dbg !271
  %36 = sub i64 0, %35, !dbg !271
  store i64 %36, ptr %8, align 8, !dbg !271
  br label %block_12, !dbg !271

block_11:                                         ; preds = %block_9
  br label %block_12, !dbg !271

block_12:                                         ; preds = %block_11, %block_10
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %10, ptr align 8 %9, i64 24, i1 false), !dbg !272
  call void @llvm.dbg.declare(metadata ptr %10, metadata !273, metadata !DIExpression()), !dbg !272
  %37 = getelementptr inbounds %json.Value, ptr %10, i32 0, i32 0, !dbg !274
  store i64 1, ptr %37, align 8, !dbg !274
  %38 = getelementptr inbounds %json.Value, ptr %10, i32 0, i32 1, !dbg !275
  %39 = load i64, ptr %8, align 8, !dbg !275
  store i64 %39, ptr %38, align 8, !dbg !275
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %10, i64 24, i1 false), !dbg !276
  ret void, !dbg !276
}

define void @json.parse_literal(ptr %0, ptr %1) !dbg !277 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca %json.Value, align 8
  %5 = alloca %json.Value, align 8
  %6 = alloca %json.Value, align 8
  %7 = alloca %json.Value, align 8
  %8 = alloca %json.Value, align 8
  %9 = alloca %json.Value, align 8
  %10 = alloca %json.Value, align 8
  %11 = alloca %json.Value, align 8
  %12 = alloca %json.Value, align 8
  %13 = alloca %slice.7, align 8
  %14 = alloca [0 x %init.Arg], align 8
  %15 = alloca %string, align 8
  %16 = alloca %json.Value, align 8
  store ptr %1, ptr %2, align 8, !dbg !278
  call void @llvm.dbg.value(metadata ptr %2, metadata !279, metadata !DIExpression()), !dbg !278
  %17 = load ptr, ptr %2, align 8, !dbg !280
  store ptr %17, ptr %3, align 8, !dbg !280
  call void @llvm.dbg.declare(metadata ptr %3, metadata !281, metadata !DIExpression()), !dbg !280
  %18 = load ptr, ptr %3, align 8, !dbg !282
  %19 = call i32 @json.peek_char(ptr %18), !dbg !282
  %20 = icmp eq i32 %19, 116, !dbg !282
  br i1 %20, label %block_1, label %block_2, !dbg !282

block_1:                                          ; preds = %block_0
  %21 = load ptr, ptr %3, align 8, !dbg !283
  %22 = call i32 @json.eat_char(ptr %21, i32 114), !dbg !283
  %23 = load ptr, ptr %3, align 8, !dbg !284
  %24 = call i32 @json.eat_char(ptr %23, i32 117), !dbg !284
  %25 = load ptr, ptr %3, align 8, !dbg !285
  %26 = call i32 @json.eat_char(ptr %25, i32 101), !dbg !285
  %27 = load ptr, ptr %3, align 8, !dbg !286
  %28 = getelementptr inbounds %json.Parser, ptr %27, i32 0, i32 3, !dbg !286
  %29 = load i1, ptr %28, align 1, !dbg !286
  br i1 %29, label %block_4, label %block_5, !dbg !286

block_4:                                          ; preds = %block_1
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %4, i64 24, i1 false), !dbg !286
  ret void, !dbg !286

block_5:                                          ; preds = %block_1
  br label %block_6, !dbg !286

block_6:                                          ; preds = %block_5
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %5, i64 24, i1 false), !dbg !287
  call void @llvm.dbg.declare(metadata ptr %6, metadata !288, metadata !DIExpression()), !dbg !287
  %30 = getelementptr inbounds %json.Value, ptr %6, i32 0, i32 0, !dbg !289
  store i64 5, ptr %30, align 8, !dbg !289
  %31 = getelementptr inbounds %json.Value, ptr %6, i32 0, i32 1, !dbg !290
  store i1 true, ptr %31, align 1, !dbg !290
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %6, i64 24, i1 false), !dbg !291
  ret void, !dbg !291

block_2:                                          ; preds = %block_0
  %32 = load ptr, ptr %3, align 8, !dbg !292
  %33 = call i32 @json.peek_char(ptr %32), !dbg !292
  %34 = icmp eq i32 %33, 102, !dbg !292
  br i1 %34, label %block_7, label %block_8, !dbg !292

block_7:                                          ; preds = %block_2
  %35 = load ptr, ptr %3, align 8, !dbg !293
  %36 = call i32 @json.eat_char(ptr %35, i32 97), !dbg !293
  %37 = load ptr, ptr %3, align 8, !dbg !294
  %38 = call i32 @json.eat_char(ptr %37, i32 108), !dbg !294
  %39 = load ptr, ptr %3, align 8, !dbg !295
  %40 = call i32 @json.eat_char(ptr %39, i32 101), !dbg !295
  %41 = load ptr, ptr %3, align 8, !dbg !296
  %42 = call i32 @json.eat_char(ptr %41, i32 101), !dbg !296
  %43 = load ptr, ptr %3, align 8, !dbg !297
  %44 = getelementptr inbounds %json.Parser, ptr %43, i32 0, i32 3, !dbg !297
  %45 = load i1, ptr %44, align 1, !dbg !297
  br i1 %45, label %block_10, label %block_11, !dbg !297

block_10:                                         ; preds = %block_7
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %7, i64 24, i1 false), !dbg !297
  ret void, !dbg !297

block_11:                                         ; preds = %block_7
  br label %block_12, !dbg !297

block_12:                                         ; preds = %block_11
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %9, ptr align 8 %8, i64 24, i1 false), !dbg !298
  call void @llvm.dbg.declare(metadata ptr %9, metadata !299, metadata !DIExpression()), !dbg !298
  %46 = getelementptr inbounds %json.Value, ptr %9, i32 0, i32 0, !dbg !300
  store i64 5, ptr %46, align 8, !dbg !300
  %47 = getelementptr inbounds %json.Value, ptr %9, i32 0, i32 1, !dbg !301
  store i1 false, ptr %47, align 1, !dbg !301
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %9, i64 24, i1 false), !dbg !302
  ret void, !dbg !302

block_8:                                          ; preds = %block_2
  %48 = load ptr, ptr %3, align 8, !dbg !303
  %49 = call i32 @json.peek_char(ptr %48), !dbg !303
  %50 = icmp eq i32 %49, 110, !dbg !303
  br i1 %50, label %block_13, label %block_14, !dbg !303

block_13:                                         ; preds = %block_8
  %51 = load ptr, ptr %3, align 8, !dbg !304
  %52 = call i32 @json.eat_char(ptr %51, i32 117), !dbg !304
  %53 = load ptr, ptr %3, align 8, !dbg !305
  %54 = call i32 @json.eat_char(ptr %53, i32 108), !dbg !305
  %55 = load ptr, ptr %3, align 8, !dbg !306
  %56 = call i32 @json.eat_char(ptr %55, i32 108), !dbg !306
  %57 = load ptr, ptr %3, align 8, !dbg !307
  %58 = getelementptr inbounds %json.Parser, ptr %57, i32 0, i32 3, !dbg !307
  %59 = load i1, ptr %58, align 1, !dbg !307
  br i1 %59, label %block_16, label %block_17, !dbg !307

block_16:                                         ; preds = %block_13
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %10, i64 24, i1 false), !dbg !307
  ret void, !dbg !307

block_17:                                         ; preds = %block_13
  br label %block_18, !dbg !307

block_18:                                         ; preds = %block_17
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %12, ptr align 8 %11, i64 24, i1 false), !dbg !308
  call void @llvm.dbg.declare(metadata ptr %12, metadata !309, metadata !DIExpression()), !dbg !308
  %60 = getelementptr inbounds %json.Value, ptr %12, i32 0, i32 0, !dbg !310
  store i64 6, ptr %60, align 8, !dbg !310
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %12, i64 24, i1 false), !dbg !311
  ret void, !dbg !311

block_14:                                         ; preds = %block_8
  br label %block_15, !dbg !311

block_15:                                         ; preds = %block_14
  br label %block_9, !dbg !311

block_9:                                          ; preds = %block_15
  br label %block_3, !dbg !311

block_3:                                          ; preds = %block_9
  %61 = getelementptr inbounds %slice.7, ptr %13, i32 0, i32 0, !dbg !312
  %62 = getelementptr inbounds %slice.7, ptr %13, i32 0, i32 1, !dbg !312
  store i64 0, ptr %61, align 8, !dbg !312
  store ptr %14, ptr %62, align 8, !dbg !312
  %63 = alloca %string, align 8, !dbg !312
  %String = getelementptr inbounds %string, ptr %63, i32 0, i32 0, !dbg !312
  %Size = getelementptr inbounds %string, ptr %63, i32 0, i32 1, !dbg !312
  store ptr @2, ptr %String, align 8, !dbg !312
  store i64 21, ptr %Size, align 8, !dbg !312
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 %63, i64 16, i1 false), !dbg !312
  call void @io.println(ptr %15, ptr %13), !dbg !312
  %64 = load ptr, ptr %3, align 8, !dbg !313
  %65 = getelementptr inbounds %json.Parser, ptr %64, i32 0, i32 3, !dbg !313
  store i1 true, ptr %65, align 1, !dbg !313
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %16, i64 24, i1 false), !dbg !314
  ret void, !dbg !314
}

define void @json.parse_value(ptr %0, ptr %1, ptr %2) !dbg !315 {
block_0:
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  %7 = alloca %json.Value, align 8
  %8 = alloca %json.Value, align 8
  %9 = alloca %json.Value, align 8
  %10 = alloca %json.Value, align 8
  %11 = alloca %json.Value, align 8
  %12 = alloca %json.Value, align 8
  store ptr %1, ptr %3, align 8, !dbg !318
  call void @llvm.dbg.value(metadata ptr %3, metadata !319, metadata !DIExpression()), !dbg !318
  store ptr %2, ptr %4, align 8, !dbg !318
  call void @llvm.dbg.value(metadata ptr %4, metadata !320, metadata !DIExpression()), !dbg !318
  %13 = load ptr, ptr %3, align 8, !dbg !321
  store ptr %13, ptr %5, align 8, !dbg !321
  call void @llvm.dbg.declare(metadata ptr %5, metadata !322, metadata !DIExpression()), !dbg !321
  %14 = load ptr, ptr %5, align 8, !dbg !323
  call void @json.eat_whitespace(ptr %14), !dbg !323
  %15 = load ptr, ptr %5, align 8, !dbg !324
  %16 = call i32 @json.peek_char(ptr %15), !dbg !324
  store i32 %16, ptr %6, align 4, !dbg !324
  call void @llvm.dbg.declare(metadata ptr %6, metadata !325, metadata !DIExpression()), !dbg !324
  %17 = load i32, ptr %6, align 4, !dbg !326
  %18 = icmp eq i32 %17, 34, !dbg !326
  br i1 %18, label %block_1, label %block_2, !dbg !326

block_1:                                          ; preds = %block_0
  %19 = load ptr, ptr %5, align 8, !dbg !327
  call void @json.parse_string(ptr %7, ptr %19), !dbg !327
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %7, i64 24, i1 false), !dbg !327
  ret void, !dbg !327

block_2:                                          ; preds = %block_0
  %20 = load i32, ptr %6, align 4, !dbg !328
  %21 = icmp eq i32 %20, 123, !dbg !328
  br i1 %21, label %block_4, label %block_5, !dbg !328

block_4:                                          ; preds = %block_2
  %22 = load ptr, ptr %5, align 8, !dbg !329
  %23 = load ptr, ptr %4, align 8, !dbg !329
  call void @json.parse_object(ptr %8, ptr %22, ptr %23), !dbg !329
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %8, i64 24, i1 false), !dbg !329
  ret void, !dbg !329

block_5:                                          ; preds = %block_2
  %24 = load i32, ptr %6, align 4, !dbg !330
  %25 = icmp eq i32 %24, 91, !dbg !330
  br i1 %25, label %block_7, label %block_8, !dbg !330

block_7:                                          ; preds = %block_5
  %26 = load ptr, ptr %5, align 8, !dbg !331
  %27 = load ptr, ptr %4, align 8, !dbg !331
  call void @json.parse_array(ptr %9, ptr %26, ptr %27), !dbg !331
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %9, i64 24, i1 false), !dbg !331
  ret void, !dbg !331

block_8:                                          ; preds = %block_5
  %28 = load i32, ptr %6, align 4, !dbg !332
  %29 = call i1 @json.is_number(i32 %28), !dbg !332
  br i1 %29, label %block_10, label %block_11, !dbg !332

block_10:                                         ; preds = %block_8
  %30 = load ptr, ptr %5, align 8, !dbg !333
  call void @json.parse_number(ptr %10, ptr %30), !dbg !333
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %10, i64 24, i1 false), !dbg !333
  ret void, !dbg !333

block_11:                                         ; preds = %block_8
  %31 = load ptr, ptr %5, align 8, !dbg !334
  call void @json.parse_literal(ptr %11, ptr %31), !dbg !334
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %11, i64 24, i1 false), !dbg !334
  ret void, !dbg !334

block_12:                                         ; No predecessors!
  br label %block_9, !dbg !334

block_9:                                          ; preds = %block_12
  br label %block_6, !dbg !334

block_6:                                          ; preds = %block_9
  br label %block_3, !dbg !334

block_3:                                          ; preds = %block_6
  %32 = load ptr, ptr %5, align 8, !dbg !335
  %33 = getelementptr inbounds %json.Parser, ptr %32, i32 0, i32 3, !dbg !335
  store i1 true, ptr %33, align 1, !dbg !335
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %12, i64 24, i1 false), !dbg !336
  ret void, !dbg !336
}

define void @json.parse_array(ptr %0, ptr %1, ptr %2) !dbg !337 {
block_0:
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca %slice.7, align 8
  %7 = alloca [0 x %init.Arg], align 8
  %8 = alloca %string, align 8
  %9 = alloca %json.Value, align 8
  %10 = alloca %json.Value, align 8
  %11 = alloca %json.Value, align 8
  %12 = alloca %slice.8, align 8
  %13 = alloca %json.Value, align 8
  %14 = alloca %json.Value, align 8
  %15 = alloca %slice.7, align 8
  %16 = alloca [0 x %init.Arg], align 8
  %17 = alloca %string, align 8
  %18 = alloca %json.Value, align 8
  %19 = alloca %json.Value, align 8
  %20 = alloca %slice.7, align 8
  %21 = alloca [0 x %init.Arg], align 8
  %22 = alloca %string, align 8
  %23 = alloca %json.Value, align 8
  %24 = alloca %json.Value, align 8
  store ptr %1, ptr %3, align 8, !dbg !338
  call void @llvm.dbg.value(metadata ptr %3, metadata !339, metadata !DIExpression()), !dbg !338
  store ptr %2, ptr %4, align 8, !dbg !338
  call void @llvm.dbg.value(metadata ptr %4, metadata !340, metadata !DIExpression()), !dbg !338
  %25 = load ptr, ptr %3, align 8, !dbg !341
  store ptr %25, ptr %5, align 8, !dbg !341
  call void @llvm.dbg.declare(metadata ptr %5, metadata !342, metadata !DIExpression()), !dbg !341
  %26 = load ptr, ptr %5, align 8, !dbg !343
  %27 = call i32 @json.eat_char(ptr %26, i32 91), !dbg !343
  %28 = load ptr, ptr %5, align 8, !dbg !344
  %29 = getelementptr inbounds %json.Parser, ptr %28, i32 0, i32 3, !dbg !344
  %30 = load i1, ptr %29, align 1, !dbg !344
  br i1 %30, label %block_1, label %block_2, !dbg !344

block_1:                                          ; preds = %block_0
  %31 = getelementptr inbounds %slice.7, ptr %6, i32 0, i32 0, !dbg !345
  %32 = getelementptr inbounds %slice.7, ptr %6, i32 0, i32 1, !dbg !345
  store i64 0, ptr %31, align 8, !dbg !345
  store ptr %7, ptr %32, align 8, !dbg !345
  %33 = alloca %string, align 8, !dbg !345
  %String = getelementptr inbounds %string, ptr %33, i32 0, i32 0, !dbg !345
  %Size = getelementptr inbounds %string, ptr %33, i32 0, i32 1, !dbg !345
  store ptr @3, ptr %String, align 8, !dbg !345
  store i64 29, ptr %Size, align 8, !dbg !345
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %8, ptr align 8 %33, i64 16, i1 false), !dbg !345
  call void @io.println(ptr %8, ptr %6), !dbg !345
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %9, i64 24, i1 false), !dbg !346
  ret void, !dbg !346

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !346

block_3:                                          ; preds = %block_2
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %11, ptr align 8 %10, i64 24, i1 false), !dbg !347
  call void @llvm.dbg.declare(metadata ptr %11, metadata !348, metadata !DIExpression()), !dbg !347
  %34 = getelementptr inbounds %json.Value, ptr %11, i32 0, i32 0, !dbg !349
  store i64 4, ptr %34, align 8, !dbg !349
  %35 = load ptr, ptr %5, align 8, !dbg !350
  call void @json.eat_whitespace(ptr %35), !dbg !350
  %36 = load ptr, ptr %5, align 8, !dbg !351
  %37 = call i32 @json.peek_char(ptr %36), !dbg !351
  %38 = icmp eq i32 %37, 93, !dbg !351
  br i1 %38, label %block_4, label %block_5, !dbg !351

block_4:                                          ; preds = %block_3
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %11, i64 24, i1 false), !dbg !352
  ret void, !dbg !352

block_5:                                          ; preds = %block_3
  br label %block_6, !dbg !352

block_6:                                          ; preds = %block_5
  %39 = getelementptr inbounds %json.Value, ptr %11, i32 0, i32 1, !dbg !353
  %40 = load ptr, ptr %4, align 8, !dbg !353
  call void @"array.create:(type,*mem.Allocator)->[]json.Value"(ptr %12, i64 239, ptr %40), !dbg !353
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %39, ptr align 8 %12, i64 16, i1 false), !dbg !353
  br label %block_7, !dbg !354

block_7:                                          ; preds = %block_18, %block_6
  br label %block_8, !dbg !354

block_8:                                          ; preds = %block_7
  %41 = load ptr, ptr %5, align 8, !dbg !355
  %42 = load ptr, ptr %4, align 8, !dbg !355
  call void @json.parse_value(ptr %13, ptr %41, ptr %42), !dbg !355
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %14, ptr align 8 %13, i64 24, i1 false), !dbg !355
  call void @llvm.dbg.declare(metadata ptr %14, metadata !356, metadata !DIExpression()), !dbg !355
  %43 = load ptr, ptr %5, align 8, !dbg !357
  %44 = getelementptr inbounds %json.Parser, ptr %43, i32 0, i32 3, !dbg !357
  %45 = load i1, ptr %44, align 1, !dbg !357
  br i1 %45, label %block_10, label %block_11, !dbg !357

block_10:                                         ; preds = %block_8
  %46 = getelementptr inbounds %slice.7, ptr %15, i32 0, i32 0, !dbg !358
  %47 = getelementptr inbounds %slice.7, ptr %15, i32 0, i32 1, !dbg !358
  store i64 0, ptr %46, align 8, !dbg !358
  store ptr %16, ptr %47, align 8, !dbg !358
  %48 = alloca %string, align 8, !dbg !358
  %String1 = getelementptr inbounds %string, ptr %48, i32 0, i32 0, !dbg !358
  %Size2 = getelementptr inbounds %string, ptr %48, i32 0, i32 1, !dbg !358
  store ptr @4, ptr %String1, align 8, !dbg !358
  store i64 22, ptr %Size2, align 8, !dbg !358
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %17, ptr align 8 %48, i64 16, i1 false), !dbg !358
  call void @io.println(ptr %17, ptr %15), !dbg !358
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %18, i64 24, i1 false), !dbg !359
  ret void, !dbg !359

block_11:                                         ; preds = %block_8
  br label %block_12, !dbg !359

block_12:                                         ; preds = %block_11
  %49 = getelementptr inbounds %json.Value, ptr %11, i32 0, i32 1, !dbg !360
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %19, ptr align 8 %14, i64 24, i1 false), !dbg !360
  call void @"array.add:(json.Value {json.Type,json.ValueUnion},json.Value {json.Type,json.ValueUnion})->void"(ptr %49, ptr %19), !dbg !360
  %50 = load ptr, ptr %5, align 8, !dbg !361
  call void @json.eat_whitespace(ptr %50), !dbg !361
  %51 = load ptr, ptr %5, align 8, !dbg !362
  %52 = call i32 @json.peek_char(ptr %51), !dbg !362
  %53 = icmp eq i32 %52, 93, !dbg !362
  br i1 %53, label %block_13, label %block_14, !dbg !362

block_13:                                         ; preds = %block_12
  %54 = load ptr, ptr %5, align 8, !dbg !363
  %55 = call i32 @json.next_char(ptr %54), !dbg !363
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %11, i64 24, i1 false), !dbg !364
  ret void, !dbg !364

block_14:                                         ; preds = %block_12
  br label %block_15, !dbg !364

block_15:                                         ; preds = %block_14
  %56 = load ptr, ptr %5, align 8, !dbg !365
  %57 = call i32 @json.eat_char(ptr %56, i32 44), !dbg !365
  %58 = load ptr, ptr %5, align 8, !dbg !366
  %59 = getelementptr inbounds %json.Parser, ptr %58, i32 0, i32 3, !dbg !366
  %60 = load i1, ptr %59, align 1, !dbg !366
  br i1 %60, label %block_16, label %block_17, !dbg !366

block_16:                                         ; preds = %block_15
  %61 = getelementptr inbounds %slice.7, ptr %20, i32 0, i32 0, !dbg !367
  %62 = getelementptr inbounds %slice.7, ptr %20, i32 0, i32 1, !dbg !367
  store i64 0, ptr %61, align 8, !dbg !367
  store ptr %21, ptr %62, align 8, !dbg !367
  %63 = alloca %string, align 8, !dbg !367
  %String3 = getelementptr inbounds %string, ptr %63, i32 0, i32 0, !dbg !367
  %Size4 = getelementptr inbounds %string, ptr %63, i32 0, i32 1, !dbg !367
  store ptr @5, ptr %String3, align 8, !dbg !367
  store i64 36, ptr %Size4, align 8, !dbg !367
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %22, ptr align 8 %63, i64 16, i1 false), !dbg !367
  call void @io.println(ptr %22, ptr %20), !dbg !367
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %23, i64 24, i1 false), !dbg !368
  ret void, !dbg !368

block_17:                                         ; preds = %block_15
  br label %block_18, !dbg !368

block_18:                                         ; preds = %block_17
  br label %block_7, !dbg !368

block_9:                                          ; No predecessors!
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %24, i64 24, i1 false), !dbg !369
  ret void, !dbg !369
}

define void @json.parse_object(ptr %0, ptr %1, ptr %2) !dbg !370 {
block_0:
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca %slice.7, align 8
  %6 = alloca [0 x %init.Arg], align 8
  %7 = alloca %string, align 8
  %8 = alloca %json.Value, align 8
  %9 = alloca %json.Value, align 8
  %10 = alloca %json.Value, align 8
  %11 = alloca %json.Dictionary, align 8
  %12 = alloca %json.Value, align 8
  %13 = alloca %json.Value, align 8
  %14 = alloca %slice.7, align 8
  %15 = alloca [0 x %init.Arg], align 8
  %16 = alloca %string, align 8
  %17 = alloca %json.Value, align 8
  %18 = alloca %slice.7, align 8
  %19 = alloca [1 x %init.Arg], align 8
  %20 = alloca %string, align 8
  %21 = alloca %string, align 8
  %22 = alloca %json.Value, align 8
  %23 = alloca %json.Value, align 8
  %24 = alloca %json.Value, align 8
  %25 = alloca %slice.7, align 8
  %26 = alloca [1 x %init.Arg], align 8
  %27 = alloca %string, align 8
  %28 = alloca %string, align 8
  %29 = alloca %json.Value, align 8
  %30 = alloca %string, align 8
  %31 = alloca %json.Value, align 8
  %32 = alloca %slice.7, align 8
  %33 = alloca [1 x %init.Arg], align 8
  %34 = alloca %string, align 8
  %35 = alloca %string, align 8
  %36 = alloca %json.Value, align 8
  %37 = alloca %json.Value, align 8
  store ptr %1, ptr %3, align 8, !dbg !371
  call void @llvm.dbg.value(metadata ptr %3, metadata !372, metadata !DIExpression()), !dbg !371
  store ptr %2, ptr %4, align 8, !dbg !371
  call void @llvm.dbg.value(metadata ptr %4, metadata !373, metadata !DIExpression()), !dbg !371
  %38 = load ptr, ptr %3, align 8, !dbg !374
  %39 = call i32 @json.eat_char(ptr %38, i32 123), !dbg !374
  %40 = load ptr, ptr %3, align 8, !dbg !375
  %41 = getelementptr inbounds %json.Parser, ptr %40, i32 0, i32 3, !dbg !375
  %42 = load i1, ptr %41, align 1, !dbg !375
  br i1 %42, label %block_1, label %block_2, !dbg !375

block_1:                                          ; preds = %block_0
  %43 = getelementptr inbounds %slice.7, ptr %5, i32 0, i32 0, !dbg !376
  %44 = getelementptr inbounds %slice.7, ptr %5, i32 0, i32 1, !dbg !376
  store i64 0, ptr %43, align 8, !dbg !376
  store ptr %6, ptr %44, align 8, !dbg !376
  %45 = alloca %string, align 8, !dbg !376
  %String = getelementptr inbounds %string, ptr %45, i32 0, i32 0, !dbg !376
  %Size = getelementptr inbounds %string, ptr %45, i32 0, i32 1, !dbg !376
  store ptr @6, ptr %String, align 8, !dbg !376
  store i64 30, ptr %Size, align 8, !dbg !376
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %45, i64 16, i1 false), !dbg !376
  call void @io.println(ptr %7, ptr %5), !dbg !376
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %8, i64 24, i1 false), !dbg !377
  ret void, !dbg !377

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !377

block_3:                                          ; preds = %block_2
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %10, ptr align 8 %9, i64 24, i1 false), !dbg !378
  call void @llvm.dbg.declare(metadata ptr %10, metadata !379, metadata !DIExpression()), !dbg !378
  %46 = getelementptr inbounds %json.Value, ptr %10, i32 0, i32 0, !dbg !380
  store i64 3, ptr %46, align 8, !dbg !380
  %47 = getelementptr inbounds %json.Value, ptr %10, i32 0, i32 1, !dbg !381
  %48 = load ptr, ptr %4, align 8, !dbg !381
  call void @json.create_dict(ptr %11, ptr %48), !dbg !381
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %47, ptr align 8 %11, i64 16, i1 false), !dbg !381
  %49 = load ptr, ptr %3, align 8, !dbg !382
  call void @json.eat_whitespace(ptr %49), !dbg !382
  %50 = load ptr, ptr %3, align 8, !dbg !383
  %51 = call i32 @json.peek_char(ptr %50), !dbg !383
  %52 = icmp eq i32 %51, 125, !dbg !383
  br i1 %52, label %block_4, label %block_5, !dbg !383

block_4:                                          ; preds = %block_3
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %10, i64 24, i1 false), !dbg !384
  ret void, !dbg !384

block_5:                                          ; preds = %block_3
  br label %block_6, !dbg !384

block_6:                                          ; preds = %block_5
  br label %block_7, !dbg !385

block_7:                                          ; preds = %block_24, %block_6
  br label %block_8, !dbg !385

block_8:                                          ; preds = %block_7
  %53 = load ptr, ptr %3, align 8, !dbg !386
  call void @json.parse_string(ptr %12, ptr %53), !dbg !386
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %13, ptr align 8 %12, i64 24, i1 false), !dbg !386
  call void @llvm.dbg.declare(metadata ptr %13, metadata !387, metadata !DIExpression()), !dbg !386
  %54 = load ptr, ptr %3, align 8, !dbg !388
  %55 = getelementptr inbounds %json.Parser, ptr %54, i32 0, i32 3, !dbg !388
  %56 = load i1, ptr %55, align 1, !dbg !388
  br i1 %56, label %block_10, label %block_11, !dbg !388

block_10:                                         ; preds = %block_8
  %57 = getelementptr inbounds %slice.7, ptr %14, i32 0, i32 0, !dbg !389
  %58 = getelementptr inbounds %slice.7, ptr %14, i32 0, i32 1, !dbg !389
  store i64 0, ptr %57, align 8, !dbg !389
  store ptr %15, ptr %58, align 8, !dbg !389
  %59 = alloca %string, align 8, !dbg !389
  %String1 = getelementptr inbounds %string, ptr %59, i32 0, i32 0, !dbg !389
  %Size2 = getelementptr inbounds %string, ptr %59, i32 0, i32 1, !dbg !389
  store ptr @7, ptr %String1, align 8, !dbg !389
  store i64 20, ptr %Size2, align 8, !dbg !389
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %16, ptr align 8 %59, i64 16, i1 false), !dbg !389
  call void @io.println(ptr %16, ptr %14), !dbg !389
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %17, i64 24, i1 false), !dbg !390
  ret void, !dbg !390

block_11:                                         ; preds = %block_8
  br label %block_12, !dbg !390

block_12:                                         ; preds = %block_11
  %60 = load ptr, ptr %3, align 8, !dbg !391
  call void @json.eat_whitespace(ptr %60), !dbg !391
  %61 = load ptr, ptr %3, align 8, !dbg !392
  %62 = call i32 @json.eat_char(ptr %61, i32 58), !dbg !392
  %63 = load ptr, ptr %3, align 8, !dbg !393
  %64 = getelementptr inbounds %json.Parser, ptr %63, i32 0, i32 3, !dbg !393
  %65 = load i1, ptr %64, align 1, !dbg !393
  br i1 %65, label %block_13, label %block_14, !dbg !393

block_13:                                         ; preds = %block_12
  %66 = getelementptr inbounds %slice.7, ptr %18, i32 0, i32 0, !dbg !394
  %67 = getelementptr inbounds %slice.7, ptr %18, i32 0, i32 1, !dbg !394
  store i64 1, ptr %66, align 8, !dbg !394
  store ptr %19, ptr %67, align 8, !dbg !394
  %68 = alloca %string, align 8, !dbg !394
  %String3 = getelementptr inbounds %string, ptr %68, i32 0, i32 0, !dbg !394
  %Size4 = getelementptr inbounds %string, ptr %68, i32 0, i32 1, !dbg !394
  store ptr @8, ptr %String3, align 8, !dbg !394
  store i64 22, ptr %Size4, align 8, !dbg !394
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %20, ptr align 8 %68, i64 16, i1 false), !dbg !394
  %69 = getelementptr inbounds %json.Value, ptr %13, i32 0, i32 1, !dbg !394
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %21, ptr align 8 %69, i64 16, i1 false), !dbg !394
  %70 = getelementptr [1 x %init.Arg], ptr %19, i64 0, i64 0, !dbg !394
  %71 = getelementptr inbounds %init.Arg, ptr %70, i32 0, i32 0, !dbg !394
  %72 = getelementptr inbounds %init.Arg, ptr %70, i32 0, i32 1, !dbg !394
  store i64 1, ptr %71, align 8, !dbg !394
  store ptr %21, ptr %72, align 8, !dbg !394
  call void @io.println(ptr %20, ptr %18), !dbg !394
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %22, i64 24, i1 false), !dbg !395
  ret void, !dbg !395

block_14:                                         ; preds = %block_12
  br label %block_15, !dbg !395

block_15:                                         ; preds = %block_14
  %73 = load ptr, ptr %3, align 8, !dbg !396
  %74 = load ptr, ptr %4, align 8, !dbg !396
  call void @json.parse_value(ptr %23, ptr %73, ptr %74), !dbg !396
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %24, ptr align 8 %23, i64 24, i1 false), !dbg !396
  call void @llvm.dbg.declare(metadata ptr %24, metadata !397, metadata !DIExpression()), !dbg !396
  %75 = load ptr, ptr %3, align 8, !dbg !398
  %76 = getelementptr inbounds %json.Parser, ptr %75, i32 0, i32 3, !dbg !398
  %77 = load i1, ptr %76, align 1, !dbg !398
  br i1 %77, label %block_16, label %block_17, !dbg !398

block_16:                                         ; preds = %block_15
  %78 = getelementptr inbounds %slice.7, ptr %25, i32 0, i32 0, !dbg !399
  %79 = getelementptr inbounds %slice.7, ptr %25, i32 0, i32 1, !dbg !399
  store i64 1, ptr %78, align 8, !dbg !399
  store ptr %26, ptr %79, align 8, !dbg !399
  %80 = alloca %string, align 8, !dbg !399
  %String5 = getelementptr inbounds %string, ptr %80, i32 0, i32 0, !dbg !399
  %Size6 = getelementptr inbounds %string, ptr %80, i32 0, i32 1, !dbg !399
  store ptr @9, ptr %String5, align 8, !dbg !399
  store i64 23, ptr %Size6, align 8, !dbg !399
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %27, ptr align 8 %80, i64 16, i1 false), !dbg !399
  %81 = getelementptr inbounds %json.Value, ptr %13, i32 0, i32 1, !dbg !399
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %28, ptr align 8 %81, i64 16, i1 false), !dbg !399
  %82 = getelementptr [1 x %init.Arg], ptr %26, i64 0, i64 0, !dbg !399
  %83 = getelementptr inbounds %init.Arg, ptr %82, i32 0, i32 0, !dbg !399
  %84 = getelementptr inbounds %init.Arg, ptr %82, i32 0, i32 1, !dbg !399
  store i64 1, ptr %83, align 8, !dbg !399
  store ptr %28, ptr %84, align 8, !dbg !399
  call void @io.println(ptr %27, ptr %25), !dbg !399
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %29, i64 24, i1 false), !dbg !400
  ret void, !dbg !400

block_17:                                         ; preds = %block_15
  br label %block_18, !dbg !400

block_18:                                         ; preds = %block_17
  %85 = getelementptr inbounds %json.Value, ptr %10, i32 0, i32 1, !dbg !401
  %86 = getelementptr inbounds %json.Value, ptr %13, i32 0, i32 1, !dbg !401
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %30, ptr align 8 %86, i64 16, i1 false), !dbg !401
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %31, ptr align 8 %24, i64 24, i1 false), !dbg !401
  call void @json.add_kvp(ptr %85, ptr %30, ptr %31), !dbg !401
  %87 = load ptr, ptr %3, align 8, !dbg !402
  call void @json.eat_whitespace(ptr %87), !dbg !402
  %88 = load ptr, ptr %3, align 8, !dbg !403
  %89 = call i32 @json.peek_char(ptr %88), !dbg !403
  %90 = icmp eq i32 %89, 125, !dbg !403
  br i1 %90, label %block_19, label %block_20, !dbg !403

block_19:                                         ; preds = %block_18
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %10, i64 24, i1 false), !dbg !404
  ret void, !dbg !404

block_20:                                         ; preds = %block_18
  br label %block_21, !dbg !404

block_21:                                         ; preds = %block_20
  %91 = load ptr, ptr %3, align 8, !dbg !405
  %92 = call i32 @json.eat_char(ptr %91, i32 44), !dbg !405
  %93 = load ptr, ptr %3, align 8, !dbg !406
  %94 = getelementptr inbounds %json.Parser, ptr %93, i32 0, i32 3, !dbg !406
  %95 = load i1, ptr %94, align 1, !dbg !406
  br i1 %95, label %block_22, label %block_23, !dbg !406

block_22:                                         ; preds = %block_21
  %96 = getelementptr inbounds %slice.7, ptr %32, i32 0, i32 0, !dbg !407
  %97 = getelementptr inbounds %slice.7, ptr %32, i32 0, i32 1, !dbg !407
  store i64 1, ptr %96, align 8, !dbg !407
  store ptr %33, ptr %97, align 8, !dbg !407
  %98 = alloca %string, align 8, !dbg !407
  %String7 = getelementptr inbounds %string, ptr %98, i32 0, i32 0, !dbg !407
  %Size8 = getelementptr inbounds %string, ptr %98, i32 0, i32 1, !dbg !407
  store ptr @10, ptr %String7, align 8, !dbg !407
  store i64 34, ptr %Size8, align 8, !dbg !407
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %34, ptr align 8 %98, i64 16, i1 false), !dbg !407
  %99 = getelementptr inbounds %json.Value, ptr %13, i32 0, i32 1, !dbg !407
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %35, ptr align 8 %99, i64 16, i1 false), !dbg !407
  %100 = getelementptr [1 x %init.Arg], ptr %33, i64 0, i64 0, !dbg !407
  %101 = getelementptr inbounds %init.Arg, ptr %100, i32 0, i32 0, !dbg !407
  %102 = getelementptr inbounds %init.Arg, ptr %100, i32 0, i32 1, !dbg !407
  store i64 1, ptr %101, align 8, !dbg !407
  store ptr %35, ptr %102, align 8, !dbg !407
  call void @io.println(ptr %34, ptr %32), !dbg !407
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %36, i64 24, i1 false), !dbg !408
  ret void, !dbg !408

block_23:                                         ; preds = %block_21
  br label %block_24, !dbg !408

block_24:                                         ; preds = %block_23
  %103 = load ptr, ptr %3, align 8, !dbg !409
  call void @json.eat_whitespace(ptr %103), !dbg !409
  br label %block_7, !dbg !409

block_9:                                          ; No predecessors!
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %37, i64 24, i1 false), !dbg !410
  ret void, !dbg !410
}

declare void @init.global_initializers()

declare i64 @init.get_struct_alignment(i64)

declare i64 @init.get_type_alignment(i64)

declare i64 @init.get_basic_type_size(ptr)

declare i64 @init.get_struct_size(i64)

declare i64 @init.get_type_size(i64)

declare i64 @init.get_struct_member_offset(ptr, i64)

declare i32 @main.main.1()

declare i32 @main()

declare void @os.assert(i1, ptr)

declare i1 @WriteFile(ptr, ptr, i32, ptr, ptr)

declare ptr @GetStdHandle(i32)

declare void @ExitProcess(i32)

declare i32 @SetConsoleOutputCP(i32)

declare ptr @VirtualAlloc(ptr, i64, i32, i32)

declare i1 @VirtualFree(ptr, i64, i32)

declare i1 @ReadConsoleA(ptr, ptr, i32, ptr, ptr)

declare void @os.abort()

declare void @os.print(ptr, i32)

declare ptr @os.alloc(i64)

declare void @os.free(ptr)

declare i32 @os.read_stdin_line(ptr, i32)

declare void @io.push_string(ptr, ptr)

declare void @io.format_uint(ptr, i64)

declare void @io.format_int(ptr, i64)

declare void @io.print_typetype(ptr, ptr)

declare void @io.print_type(ptr, ptr)

declare void @io.builder_to_string(ptr, ptr)

declare void @io.print_type_with_formatter(ptr, i32, ptr)

declare void @io.__internal_print(ptr, ptr, ptr)

declare void @io.vsprint(ptr, ptr, ptr)

declare void @io.sprint(ptr, ptr, ptr)

declare void @io.print(ptr, ptr)

declare void @io.println(ptr, ptr)

declare void @io.readln(ptr, ptr, i32)

declare i32 @io.get_next(ptr)

declare void @"io.format_float:(type,*[]u32,f32,i32)->void"(i64, ptr, float, i32)

declare void @"io.format_float:(type,*[]u32,f64,i32)->void"(i64, ptr, double, i32)

declare ptr @mem.generic_alloc(i64, ptr)

declare void @mem.generic_free(ptr, ptr)

declare void @mem.create_generic_allocator(ptr)

declare ptr @mem.arena_alloc(i64, ptr)

declare void @mem.no_free(ptr, ptr)

declare void @mem.create_scratch(ptr, i64)

declare void @mem.destroy_scratch(ptr)

declare ptr @memcpy(ptr, ptr, i64)

declare ptr @memset(ptr, i32, i64)

declare i32 @memcmp(ptr, ptr, i64)

declare void @"mem.make_slice:(type,int,*mem.Allocator)->[]u8"(ptr, i64, i64, ptr)

declare i64 @str.to_int(ptr)

declare void @str.create(ptr, ptr)

declare void @str.append(ptr, ptr)

declare void @str.append_u32(ptr, i32)

declare void @str.append_u8(ptr, i8)

declare void @str.from_builder(ptr, ptr, ptr)

declare void @str.substr(ptr, ptr, i64, i64)

declare i64 @str.get_codepoint_size(ptr)

declare ptr @str.advance(ptr)

declare i32 @str.deref(ptr)

declare i32 @str.index(ptr, i64)

declare void @"array.create:(type,*mem.Allocator)->[]json.KeyValuePair"(ptr, i64, ptr)

declare void @"array.add:(json.KeyValuePair {string,json.Value},json.KeyValuePair {string,json.Value})->void"(ptr, ptr)

declare void @"array.create:(type,*mem.Allocator)->[]json.Value"(ptr, i64, ptr)

declare void @"array.add:(json.Value {json.Type,json.ValueUnion},json.Value {json.Type,json.ValueUnion})->void"(ptr, ptr)

declare void @"array.add:(*[]u32,u32)->void"(ptr, i32)

declare void @"array.create:(type,*mem.Allocator)->[]u8"(ptr, i64, ptr)

declare void @"array.add:(*[]u8,u8)->void"(ptr, i8)

declare void @"array.create:(type,*mem.Allocator)->[]u32"(ptr, i64, ptr)

declare void @"array.free:(*[]u32)->void"(ptr)

declare void @"array.free:(*[]u8)->void"(ptr)

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!80, !81}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false)
!1 = !DIFile(filename: "json.rcp", directory: "E:\\Non_C_Projects\\RCPProjects\\rcpJSON\\src")
!2 = !{!3, !15, !36, !45, !50, !54, !65, !71}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.TypeKind", scope: !1, file: !1, size: 64, align: 64, elements: !4)
!4 = !{!5, !6, !7, !8, !9, !10, !11, !12, !13, !14}
!5 = !DIEnumerator(name: "Invalid", value: 0, isUnsigned: true)
!6 = !DIEnumerator(name: "Basic", value: 1, isUnsigned: true)
!7 = !DIEnumerator(name: "Function", value: 2, isUnsigned: true)
!8 = !DIEnumerator(name: "Struct", value: 3, isUnsigned: true)
!9 = !DIEnumerator(name: "Pointer", value: 4, isUnsigned: true)
!10 = !DIEnumerator(name: "Array", value: 5, isUnsigned: true)
!11 = !DIEnumerator(name: "Slice", value: 6, isUnsigned: true)
!12 = !DIEnumerator(name: "Vector", value: 7, isUnsigned: true)
!13 = !DIEnumerator(name: "Enum", value: 8, isUnsigned: true)
!14 = !DIEnumerator(name: "Generic", value: 9, isUnsigned: true)
!15 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.BasicKind", scope: !1, file: !1, size: 64, align: 64, elements: !16)
!16 = !{!17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35}
!17 = !DIEnumerator(name: "Bool", value: 0, isUnsigned: true)
!18 = !DIEnumerator(name: "String", value: 1, isUnsigned: true)
!19 = !DIEnumerator(name: "U8", value: 2, isUnsigned: true)
!20 = !DIEnumerator(name: "U16", value: 3, isUnsigned: true)
!21 = !DIEnumerator(name: "U32", value: 4, isUnsigned: true)
!22 = !DIEnumerator(name: "U64", value: 5, isUnsigned: true)
!23 = !DIEnumerator(name: "I8", value: 6, isUnsigned: true)
!24 = !DIEnumerator(name: "I16", value: 7, isUnsigned: true)
!25 = !DIEnumerator(name: "I32", value: 8, isUnsigned: true)
!26 = !DIEnumerator(name: "I64", value: 9, isUnsigned: true)
!27 = !DIEnumerator(name: "F32", value: 10, isUnsigned: true)
!28 = !DIEnumerator(name: "F64", value: 11, isUnsigned: true)
!29 = !DIEnumerator(name: "untypedInteger", value: 12, isUnsigned: true)
!30 = !DIEnumerator(name: "untypedFloat", value: 13, isUnsigned: true)
!31 = !DIEnumerator(name: "Int", value: 14, isUnsigned: true)
!32 = !DIEnumerator(name: "Uint", value: 15, isUnsigned: true)
!33 = !DIEnumerator(name: "Type", value: 16, isUnsigned: true)
!34 = !DIEnumerator(name: "Auto", value: 17, isUnsigned: true)
!35 = !DIEnumerator(name: "Module", value: 18, isUnsigned: true)
!36 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.BasicFlag", scope: !1, file: !1, size: 32, align: 32, elements: !37)
!37 = !{!38, !39, !40, !41, !42, !43, !44}
!38 = !DIEnumerator(name: "Boolean", value: 1, isUnsigned: true)
!39 = !DIEnumerator(name: "Integer", value: 2, isUnsigned: true)
!40 = !DIEnumerator(name: "Float", value: 4, isUnsigned: true)
!41 = !DIEnumerator(name: "String", value: 8, isUnsigned: true)
!42 = !DIEnumerator(name: "Untyped", value: 32, isUnsigned: true)
!43 = !DIEnumerator(name: "Unsigned", value: 64, isUnsigned: true)
!44 = !DIEnumerator(name: "TypeID", value: 128, isUnsigned: true)
!45 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.StructFlag", scope: !1, file: !1, size: 32, align: 32, elements: !46)
!46 = !{!47, !48, !49}
!47 = !DIEnumerator(name: "Packed", value: 1, isUnsigned: true)
!48 = !DIEnumerator(name: "Generic", value: 2, isUnsigned: true)
!49 = !DIEnumerator(name: "Union", value: 4, isUnsigned: true)
!50 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.VectorKind", scope: !1, file: !1, size: 64, align: 64, elements: !51)
!51 = !{!52, !53}
!52 = !DIEnumerator(name: "Float", value: 0, isUnsigned: true)
!53 = !DIEnumerator(name: "Int", value: 1, isUnsigned: true)
!54 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compile.CompileFlag", scope: !1, file: !1, size: 32, align: 32, elements: !55)
!55 = !{!56, !57, !58, !59, !60, !61, !62, !63, !64}
!56 = !DIEnumerator(name: "Debug", value: 1, isUnsigned: true)
!57 = !DIEnumerator(name: "SanAddress", value: 2, isUnsigned: true)
!58 = !DIEnumerator(name: "SanMemory", value: 4, isUnsigned: true)
!59 = !DIEnumerator(name: "SanThread", value: 8, isUnsigned: true)
!60 = !DIEnumerator(name: "SanUndefined", value: 16, isUnsigned: true)
!61 = !DIEnumerator(name: "NoStdLib", value: 32, isUnsigned: true)
!62 = !DIEnumerator(name: "SharedLib", value: 64, isUnsigned: true)
!63 = !DIEnumerator(name: "CrossAndroid", value: 128, isUnsigned: true)
!64 = !DIEnumerator(name: "NoLink", value: 256, isUnsigned: true)
!65 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compile.Arch", scope: !1, file: !1, size: 32, align: 32, elements: !66)
!66 = !{!67, !68, !69, !70}
!67 = !DIEnumerator(name: "x86_64", value: 0, isUnsigned: true)
!68 = !DIEnumerator(name: "x86", value: 1, isUnsigned: true)
!69 = !DIEnumerator(name: "Arm32", value: 2, isUnsigned: true)
!70 = !DIEnumerator(name: "Arm64", value: 4, isUnsigned: true)
!71 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "json.Type", scope: !1, file: !1, size: 64, align: 64, elements: !72)
!72 = !{!73, !74, !75, !76, !77, !78, !79}
!73 = !DIEnumerator(name: "Number", value: 0, isUnsigned: true)
!74 = !DIEnumerator(name: "Integer", value: 1, isUnsigned: true)
!75 = !DIEnumerator(name: "String", value: 2, isUnsigned: true)
!76 = !DIEnumerator(name: "Object", value: 3, isUnsigned: true)
!77 = !DIEnumerator(name: "Array", value: 4, isUnsigned: true)
!78 = !DIEnumerator(name: "Boolean", value: 5, isUnsigned: true)
!79 = !DIEnumerator(name: "Null", value: 6, isUnsigned: true)
!80 = !{i32 2, !"CodeView", i32 1}
!81 = !{i32 2, !"Debug Info Version", i32 3}
!82 = distinct !DISubprogram(name: "get_item", linkageName: "json.get_item", scope: !1, file: !1, line: 41, type: !83, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !123)
!83 = !DISubroutineType(types: !84)
!84 = !{!85, !85, !96}
!85 = !DICompositeType(tag: DW_TAG_structure_type, name: "json.Value", scope: !1, file: !1, size: 192, elements: !86)
!86 = !{!87, !88}
!87 = !DIDerivedType(tag: DW_TAG_member, name: "t", scope: !1, file: !1, baseType: !71, size: 64, align: 64)
!88 = !DIDerivedType(tag: DW_TAG_member, name: "v", scope: !1, file: !1, baseType: !89, size: 128, align: 64, offset: 64)
!89 = !DICompositeType(tag: DW_TAG_structure_type, name: "json.ValueUnion", scope: !1, file: !1, size: 128, elements: !90)
!90 = !{!91, !93, !95, !102, !116, !121}
!91 = !DIDerivedType(tag: DW_TAG_member, name: "number", scope: !1, file: !1, baseType: !92, size: 64, align: 64)
!92 = !DIBasicType(name: "f64", size: 64, encoding: DW_ATE_float)
!93 = !DIDerivedType(tag: DW_TAG_member, name: "integer", scope: !1, file: !1, baseType: !94, size: 64, align: 64)
!94 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!95 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1, file: !1, baseType: !96, size: 128, align: 64)
!96 = !DICompositeType(tag: DW_TAG_structure_type, name: "string", scope: !1, file: !1, size: 128, elements: !97)
!97 = !{!98, !101}
!98 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !99, size: 64, align: 64)
!99 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*u8", baseType: !100, size: 64, align: 64, dwarfAddressSpace: 0)
!100 = !DIBasicType(name: "u8", size: 8, encoding: DW_ATE_unsigned)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1, file: !1, baseType: !94, size: 64, align: 64, offset: 64)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "object", scope: !1, file: !1, baseType: !103, size: 128, align: 64)
!103 = !DICompositeType(tag: DW_TAG_structure_type, name: "json.Dictionary", scope: !1, file: !1, size: 128, elements: !104)
!104 = !{!105}
!105 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1, file: !1, baseType: !106, size: 128, align: 64)
!106 = !DICompositeType(tag: DW_TAG_structure_type, scope: !1, file: !1, size: 128, align: 64, elements: !107)
!107 = !{!108, !109}
!108 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1, file: !1, baseType: !94, size: 64, align: 64)
!109 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !110, size: 64, align: 64, offset: 64)
!110 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*json.KeyValuePair", baseType: !111, size: 64, align: 64, dwarfAddressSpace: 0)
!111 = !DICompositeType(tag: DW_TAG_structure_type, name: "json.KeyValuePair", scope: !1, file: !1, size: 320, elements: !112)
!112 = !{!113, !114}
!113 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1, file: !1, baseType: !96, size: 128, align: 64)
!114 = !DIDerivedType(tag: DW_TAG_member, name: "obj", scope: !1, file: !1, baseType: !115, size: 192, align: 64, offset: 128)
!115 = !DICompositeType(tag: DW_TAG_structure_type, name: "json.Value", scope: !1, file: !1, size: 192, align: 64, flags: DIFlagFwdDecl)
!116 = !DIDerivedType(tag: DW_TAG_member, name: "array", scope: !1, file: !1, baseType: !117, size: 128, align: 64)
!117 = !DICompositeType(tag: DW_TAG_structure_type, scope: !1, file: !1, size: 128, align: 64, elements: !118)
!118 = !{!108, !119}
!119 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !120, size: 64, align: 64, offset: 64)
!120 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*json.Value", baseType: !115, size: 64, align: 64, dwarfAddressSpace: 0)
!121 = !DIDerivedType(tag: DW_TAG_member, name: "boolean", scope: !1, file: !1, baseType: !122, size: 8, align: 8)
!122 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!123 = !{}
!124 = !DILocation(line: 41, scope: !82)
!125 = !DILocalVariable(name: "obj", scope: !82, file: !1, line: 41, type: !85)
!126 = !DILocalVariable(name: "str", arg: 1, scope: !82, file: !1, line: 41, type: !96)
!127 = !DILocation(line: 42, scope: !82)
!128 = !DILocation(line: 43, scope: !82)
!129 = !DILocalVariable(name: "vals", scope: !82, file: !1, line: 43, type: !106)
!130 = !DILocation(line: 44, scope: !82)
!131 = !DILocalVariable(name: "val", scope: !82, file: !1, line: 44, type: !111)
!132 = !DILocalVariable(name: "i", scope: !82, file: !1, line: 44, type: !94)
!133 = !DILocation(line: 46, scope: !82)
!134 = !DILocation(line: 47, scope: !82)
!135 = !DILocation(line: 48, scope: !82)
!136 = !DILocation(line: 52, scope: !82)
!137 = distinct !DISubprogram(name: "parse", linkageName: "json.parse", scope: !1, file: !1, line: 55, type: !138, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !123)
!138 = !DISubroutineType(types: !139)
!139 = !{!85, !96, !140}
!140 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*mem.Allocator", baseType: !141, size: 64, align: 64, dwarfAddressSpace: 0)
!141 = !DICompositeType(tag: DW_TAG_structure_type, name: "mem.Allocator", scope: !1, file: !1, size: 192, align: 64, flags: DIFlagFwdDecl)
!142 = !DILocation(line: 55, scope: !137)
!143 = !DILocalVariable(name: "text", scope: !137, file: !1, line: 55, type: !96)
!144 = !DILocalVariable(name: "alloc", arg: 1, scope: !137, file: !1, line: 55, type: !140)
!145 = !DILocation(line: 56, scope: !137)
!146 = !DILocalVariable(name: "p", scope: !137, file: !1, line: 56, type: !147)
!147 = !DICompositeType(tag: DW_TAG_structure_type, name: "json.Parser", scope: !1, file: !1, size: 320, elements: !148)
!148 = !{!95, !149, !150, !151}
!149 = !DIDerivedType(tag: DW_TAG_member, name: "pos", scope: !1, file: !1, baseType: !99, size: 64, align: 64, offset: 128)
!150 = !DIDerivedType(tag: DW_TAG_member, name: "at", scope: !1, file: !1, baseType: !94, size: 64, align: 64, offset: 192)
!151 = !DIDerivedType(tag: DW_TAG_member, name: "failed", scope: !1, file: !1, baseType: !122, size: 8, align: 8, offset: 256)
!152 = !DILocation(line: 57, scope: !137)
!153 = distinct !DISubprogram(name: "create_dict", linkageName: "json.create_dict", scope: !1, file: !1, line: 70, type: !154, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !123)
!154 = !DISubroutineType(types: !155)
!155 = !{!103, !140}
!156 = !DILocation(line: 70, scope: !153)
!157 = !DILocalVariable(name: "alloc", scope: !153, file: !1, line: 70, type: !140)
!158 = !DILocation(line: 71, scope: !153)
!159 = distinct !DISubprogram(name: "add_kvp", linkageName: "json.add_kvp", scope: !1, file: !1, line: 76, type: !160, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !123)
!160 = !DISubroutineType(types: !161)
!161 = !{null, !162, !96, !85}
!162 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*json.Dictionary", baseType: !103, size: 64, align: 64, dwarfAddressSpace: 0)
!163 = !DILocation(line: 76, scope: !159)
!164 = !DILocalVariable(name: "dict", scope: !159, file: !1, line: 76, type: !162)
!165 = !DILocalVariable(name: "name", arg: 1, scope: !159, file: !1, line: 76, type: !96)
!166 = !DILocalVariable(name: "value", arg: 2, scope: !159, file: !1, line: 76, type: !85)
!167 = !DILocation(line: 77, scope: !159)
!168 = !DILocalVariable(name: "dict", scope: !159, file: !1, line: 77, type: !162)
!169 = !DILocation(line: 78, scope: !159)
!170 = !DILocation(line: 79, scope: !159)
!171 = distinct !DISubprogram(name: "is_whitespace", linkageName: "json.is_whitespace", scope: !1, file: !1, line: 81, type: !172, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !123)
!172 = !DISubroutineType(types: !173)
!173 = !{!122, !174}
!174 = !DIBasicType(name: "u32", size: 32, encoding: DW_ATE_unsigned)
!175 = !DILocation(line: 81, scope: !171)
!176 = !DILocalVariable(name: "c", scope: !171, file: !1, line: 81, type: !174)
!177 = !DILocation(line: 82, scope: !171)
!178 = distinct !DISubprogram(name: "peek_char", linkageName: "json.peek_char", scope: !1, file: !1, line: 85, type: !179, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !123)
!179 = !DISubroutineType(types: !180)
!180 = !{!174, !181}
!181 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*json.Parser", baseType: !147, size: 64, align: 64, dwarfAddressSpace: 0)
!182 = !DILocation(line: 85, scope: !178)
!183 = !DILocalVariable(name: "p", scope: !178, file: !1, line: 85, type: !181)
!184 = !DILocation(line: 86, scope: !178)
!185 = distinct !DISubprogram(name: "next_char", linkageName: "json.next_char", scope: !1, file: !1, line: 89, type: !179, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !123)
!186 = !DILocation(line: 89, scope: !185)
!187 = !DILocalVariable(name: "p", scope: !185, file: !1, line: 89, type: !181)
!188 = !DILocation(line: 90, scope: !185)
!189 = !DILocalVariable(name: "p", scope: !185, file: !1, line: 90, type: !181)
!190 = !DILocation(line: 91, scope: !185)
!191 = !DILocation(line: 92, scope: !185)
!192 = !DILocation(line: 93, scope: !185)
!193 = !DILocation(line: 95, scope: !185)
!194 = !DILocalVariable(name: "c", scope: !185, file: !1, line: 95, type: !174)
!195 = !DILocation(line: 96, scope: !185)
!196 = !DILocation(line: 97, scope: !185)
!197 = !DILocation(line: 98, scope: !185)
!198 = distinct !DISubprogram(name: "eat_char", linkageName: "json.eat_char", scope: !1, file: !1, line: 101, type: !199, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !123)
!199 = !DISubroutineType(types: !200)
!200 = !{!174, !181, !174}
!201 = !DILocation(line: 101, scope: !198)
!202 = !DILocalVariable(name: "p", scope: !198, file: !1, line: 101, type: !181)
!203 = !DILocalVariable(name: "c", arg: 1, scope: !198, file: !1, line: 101, type: !174)
!204 = !DILocation(line: 102, scope: !198)
!205 = !DILocalVariable(name: "p", scope: !198, file: !1, line: 102, type: !181)
!206 = !DILocation(line: 103, scope: !198)
!207 = !DILocation(line: 104, scope: !198)
!208 = !DILocation(line: 105, scope: !198)
!209 = !DILocation(line: 106, scope: !198)
!210 = !DILocation(line: 108, scope: !198)
!211 = !DILocation(line: 109, scope: !198)
!212 = distinct !DISubprogram(name: "eat_whitespace", linkageName: "json.eat_whitespace", scope: !1, file: !1, line: 112, type: !213, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !123)
!213 = !DISubroutineType(types: !214)
!214 = !{null, !181}
!215 = !DILocation(line: 112, scope: !212)
!216 = !DILocalVariable(name: "p", scope: !212, file: !1, line: 112, type: !181)
!217 = !DILocation(line: 113, scope: !212)
!218 = !DILocation(line: 114, scope: !212)
!219 = !DILocation(line: 116, scope: !212)
!220 = distinct !DISubprogram(name: "parse_string", linkageName: "json.parse_string", scope: !1, file: !1, line: 118, type: !221, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !123)
!221 = !DISubroutineType(types: !222)
!222 = !{!85, !181}
!223 = !DILocation(line: 118, scope: !220)
!224 = !DILocalVariable(name: "p", scope: !220, file: !1, line: 118, type: !181)
!225 = !DILocation(line: 119, scope: !220)
!226 = !DILocation(line: 120, scope: !220)
!227 = !DILocation(line: 121, scope: !220)
!228 = !DILocalVariable(name: "start", scope: !220, file: !1, line: 121, type: !99)
!229 = !DILocation(line: 122, scope: !220)
!230 = !DILocalVariable(name: "end", scope: !220, file: !1, line: 122, type: !99)
!231 = !DILocation(line: 123, scope: !220)
!232 = !DILocation(line: 124, scope: !220)
!233 = !DILocation(line: 125, scope: !220)
!234 = !DILocation(line: 127, scope: !220)
!235 = !DILocation(line: 128, scope: !220)
!236 = !DILocation(line: 131, scope: !220)
!237 = !DILocation(line: 132, scope: !220)
!238 = !DILocation(line: 134, scope: !220)
!239 = !DILocalVariable(name: "v_str", scope: !220, file: !1, line: 134, type: !96)
!240 = !DILocation(line: 135, scope: !220)
!241 = !DILocalVariable(name: "value", scope: !220, file: !1, line: 135, type: !85)
!242 = !DILocation(line: 136, scope: !220)
!243 = !DILocation(line: 137, scope: !220)
!244 = !DILocation(line: 138, scope: !220)
!245 = distinct !DISubprogram(name: "make_parser", linkageName: "json.make_parser", scope: !1, file: !1, line: 141, type: !246, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !123)
!246 = !DISubroutineType(types: !247)
!247 = !{!147, !96}
!248 = !DILocation(line: 141, scope: !245)
!249 = !DILocalVariable(name: "text", scope: !245, file: !1, line: 141, type: !96)
!250 = !DILocation(line: 142, scope: !245)
!251 = distinct !DISubprogram(name: "is_number", linkageName: "json.is_number", scope: !1, file: !1, line: 150, type: !172, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !123)
!252 = !DILocation(line: 150, scope: !251)
!253 = !DILocalVariable(name: "c", scope: !251, file: !1, line: 150, type: !174)
!254 = !DILocation(line: 151, scope: !251)
!255 = distinct !DISubprogram(name: "parse_number", linkageName: "json.parse_number", scope: !1, file: !1, line: 154, type: !221, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !123)
!256 = !DILocation(line: 154, scope: !255)
!257 = !DILocalVariable(name: "p", scope: !255, file: !1, line: 154, type: !181)
!258 = !DILocation(line: 155, scope: !255)
!259 = !DILocalVariable(name: "is_neg", scope: !255, file: !1, line: 155, type: !122)
!260 = !DILocation(line: 156, scope: !255)
!261 = !DILocation(line: 157, scope: !255)
!262 = !DILocation(line: 158, scope: !255)
!263 = !DILocation(line: 159, scope: !255)
!264 = !DILocation(line: 160, scope: !255)
!265 = !DILocation(line: 161, scope: !255)
!266 = !DILocation(line: 165, scope: !255)
!267 = !DILocalVariable(name: "num", scope: !255, file: !1, line: 165, type: !94)
!268 = !DILocation(line: 166, scope: !255)
!269 = !DILocation(line: 167, scope: !255)
!270 = !DILocation(line: 168, scope: !255)
!271 = !DILocation(line: 171, scope: !255)
!272 = !DILocation(line: 173, scope: !255)
!273 = !DILocalVariable(name: "res", scope: !255, file: !1, line: 173, type: !85)
!274 = !DILocation(line: 174, scope: !255)
!275 = !DILocation(line: 175, scope: !255)
!276 = !DILocation(line: 176, scope: !255)
!277 = distinct !DISubprogram(name: "parse_literal", linkageName: "json.parse_literal", scope: !1, file: !1, line: 179, type: !221, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !123)
!278 = !DILocation(line: 179, scope: !277)
!279 = !DILocalVariable(name: "p", scope: !277, file: !1, line: 179, type: !181)
!280 = !DILocation(line: 180, scope: !277)
!281 = !DILocalVariable(name: "p", scope: !277, file: !1, line: 180, type: !181)
!282 = !DILocation(line: 181, scope: !277)
!283 = !DILocation(line: 182, scope: !277)
!284 = !DILocation(line: 183, scope: !277)
!285 = !DILocation(line: 184, scope: !277)
!286 = !DILocation(line: 185, scope: !277)
!287 = !DILocation(line: 187, scope: !277)
!288 = !DILocalVariable(name: "ret", scope: !277, file: !1, line: 187, type: !85)
!289 = !DILocation(line: 188, scope: !277)
!290 = !DILocation(line: 189, scope: !277)
!291 = !DILocation(line: 190, scope: !277)
!292 = !DILocation(line: 192, scope: !277)
!293 = !DILocation(line: 193, scope: !277)
!294 = !DILocation(line: 194, scope: !277)
!295 = !DILocation(line: 195, scope: !277)
!296 = !DILocation(line: 196, scope: !277)
!297 = !DILocation(line: 197, scope: !277)
!298 = !DILocation(line: 199, scope: !277)
!299 = !DILocalVariable(name: "ret", scope: !277, file: !1, line: 199, type: !85)
!300 = !DILocation(line: 200, scope: !277)
!301 = !DILocation(line: 201, scope: !277)
!302 = !DILocation(line: 202, scope: !277)
!303 = !DILocation(line: 204, scope: !277)
!304 = !DILocation(line: 205, scope: !277)
!305 = !DILocation(line: 206, scope: !277)
!306 = !DILocation(line: 207, scope: !277)
!307 = !DILocation(line: 208, scope: !277)
!308 = !DILocation(line: 210, scope: !277)
!309 = !DILocalVariable(name: "ret", scope: !277, file: !1, line: 210, type: !85)
!310 = !DILocation(line: 211, scope: !277)
!311 = !DILocation(line: 212, scope: !277)
!312 = !DILocation(line: 215, scope: !277)
!313 = !DILocation(line: 216, scope: !277)
!314 = !DILocation(line: 217, scope: !277)
!315 = distinct !DISubprogram(name: "parse_value", linkageName: "json.parse_value", scope: !1, file: !1, line: 220, type: !316, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !123)
!316 = !DISubroutineType(types: !317)
!317 = !{!85, !181, !140}
!318 = !DILocation(line: 220, scope: !315)
!319 = !DILocalVariable(name: "p", scope: !315, file: !1, line: 220, type: !181)
!320 = !DILocalVariable(name: "alloc", arg: 1, scope: !315, file: !1, line: 220, type: !140)
!321 = !DILocation(line: 221, scope: !315)
!322 = !DILocalVariable(name: "p", scope: !315, file: !1, line: 221, type: !181)
!323 = !DILocation(line: 222, scope: !315)
!324 = !DILocation(line: 223, scope: !315)
!325 = !DILocalVariable(name: "c", scope: !315, file: !1, line: 223, type: !174)
!326 = !DILocation(line: 224, scope: !315)
!327 = !DILocation(line: 225, scope: !315)
!328 = !DILocation(line: 226, scope: !315)
!329 = !DILocation(line: 227, scope: !315)
!330 = !DILocation(line: 228, scope: !315)
!331 = !DILocation(line: 229, scope: !315)
!332 = !DILocation(line: 230, scope: !315)
!333 = !DILocation(line: 231, scope: !315)
!334 = !DILocation(line: 233, scope: !315)
!335 = !DILocation(line: 235, scope: !315)
!336 = !DILocation(line: 236, scope: !315)
!337 = distinct !DISubprogram(name: "parse_array", linkageName: "json.parse_array", scope: !1, file: !1, line: 239, type: !316, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !123)
!338 = !DILocation(line: 239, scope: !337)
!339 = !DILocalVariable(name: "p", scope: !337, file: !1, line: 239, type: !181)
!340 = !DILocalVariable(name: "alloc", arg: 1, scope: !337, file: !1, line: 239, type: !140)
!341 = !DILocation(line: 240, scope: !337)
!342 = !DILocalVariable(name: "p", scope: !337, file: !1, line: 240, type: !181)
!343 = !DILocation(line: 241, scope: !337)
!344 = !DILocation(line: 242, scope: !337)
!345 = !DILocation(line: 243, scope: !337)
!346 = !DILocation(line: 244, scope: !337)
!347 = !DILocation(line: 247, scope: !337)
!348 = !DILocalVariable(name: "value", scope: !337, file: !1, line: 247, type: !85)
!349 = !DILocation(line: 248, scope: !337)
!350 = !DILocation(line: 249, scope: !337)
!351 = !DILocation(line: 250, scope: !337)
!352 = !DILocation(line: 251, scope: !337)
!353 = !DILocation(line: 253, scope: !337)
!354 = !DILocation(line: 255, scope: !337)
!355 = !DILocation(line: 256, scope: !337)
!356 = !DILocalVariable(name: "v", scope: !337, file: !1, line: 256, type: !85)
!357 = !DILocation(line: 257, scope: !337)
!358 = !DILocation(line: 258, scope: !337)
!359 = !DILocation(line: 259, scope: !337)
!360 = !DILocation(line: 262, scope: !337)
!361 = !DILocation(line: 264, scope: !337)
!362 = !DILocation(line: 265, scope: !337)
!363 = !DILocation(line: 266, scope: !337)
!364 = !DILocation(line: 267, scope: !337)
!365 = !DILocation(line: 270, scope: !337)
!366 = !DILocation(line: 271, scope: !337)
!367 = !DILocation(line: 272, scope: !337)
!368 = !DILocation(line: 273, scope: !337)
!369 = !DILocation(line: 277, scope: !337)
!370 = distinct !DISubprogram(name: "parse_object", linkageName: "json.parse_object", scope: !1, file: !1, line: 280, type: !316, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !123)
!371 = !DILocation(line: 280, scope: !370)
!372 = !DILocalVariable(name: "p", scope: !370, file: !1, line: 280, type: !181)
!373 = !DILocalVariable(name: "alloc", arg: 1, scope: !370, file: !1, line: 280, type: !140)
!374 = !DILocation(line: 281, scope: !370)
!375 = !DILocation(line: 282, scope: !370)
!376 = !DILocation(line: 283, scope: !370)
!377 = !DILocation(line: 284, scope: !370)
!378 = !DILocation(line: 287, scope: !370)
!379 = !DILocalVariable(name: "obj", scope: !370, file: !1, line: 287, type: !85)
!380 = !DILocation(line: 288, scope: !370)
!381 = !DILocation(line: 289, scope: !370)
!382 = !DILocation(line: 290, scope: !370)
!383 = !DILocation(line: 291, scope: !370)
!384 = !DILocation(line: 292, scope: !370)
!385 = !DILocation(line: 295, scope: !370)
!386 = !DILocation(line: 296, scope: !370)
!387 = !DILocalVariable(name: "name", scope: !370, file: !1, line: 296, type: !85)
!388 = !DILocation(line: 297, scope: !370)
!389 = !DILocation(line: 298, scope: !370)
!390 = !DILocation(line: 299, scope: !370)
!391 = !DILocation(line: 301, scope: !370)
!392 = !DILocation(line: 302, scope: !370)
!393 = !DILocation(line: 303, scope: !370)
!394 = !DILocation(line: 304, scope: !370)
!395 = !DILocation(line: 305, scope: !370)
!396 = !DILocation(line: 307, scope: !370)
!397 = !DILocalVariable(name: "value", scope: !370, file: !1, line: 307, type: !85)
!398 = !DILocation(line: 308, scope: !370)
!399 = !DILocation(line: 309, scope: !370)
!400 = !DILocation(line: 310, scope: !370)
!401 = !DILocation(line: 313, scope: !370)
!402 = !DILocation(line: 315, scope: !370)
!403 = !DILocation(line: 316, scope: !370)
!404 = !DILocation(line: 317, scope: !370)
!405 = !DILocation(line: 320, scope: !370)
!406 = !DILocation(line: 321, scope: !370)
!407 = !DILocation(line: 322, scope: !370)
!408 = !DILocation(line: 323, scope: !370)
!409 = !DILocation(line: 326, scope: !370)
!410 = !DILocation(line: 330, scope: !370)
