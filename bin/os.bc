; ModuleID = 'os'
source_filename = "os.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%string = type { ptr, i64 }
%slice.5 = type { i64, ptr }
%os.CONSOLE_READCONSOLE_CONTROL = type { i32, i32, i32, i32 }

@main.test_string = external global %string
@init.INVALID_TYPE = external global i64
@init.type_table = external global %slice.5
@os.STD_INPUT_HANDLE = global i32 0
@os.STD_OUTPUT_HANDLE = global i32 0
@os.STD_ERROR_HANDLE = global i32 0
@os.INVALID_HANDLE_VALUE = global ptr null
@os.CP_UTF7 = global i32 0
@os.CP_UTF8 = global i32 0
@os.MEM_COMMIT = global i32 0
@os.MEM_RESERVE = global i32 0
@os.MEM_RELEASE = global i32 0
@os.PAGE_NOACCESS = global i32 0
@os.PAGE_READONLY = global i32 0
@os.PAGE_READWRITE = global i32 0
@os.PAGE_WRITECOPY = global i32 0
@os.PAGE_EXECUTE = global i32 0
@os.PAGE_EXECUTE_READ = global i32 0
@os.PAGE_EXECUTE_READWRITE = global i32 0
@os.PAGE_EXECUTE_WRITECOPY = global i32 0
@os.PAGE_GUARD = global i32 0
@os.PAGE_NOCACHE = global i32 0
@os.PAGE_WRITECOMBINE = global i32 0
@str.CONTINUE_BIT = external global i8
@0 = private unnamed_addr constant [16 x i8] c"Assert Failed!\0A\00", align 1

define void @os.__GlobalInitializerFunction.0() {
block_0:
  store i32 -10, ptr @os.STD_INPUT_HANDLE, align 4
  store i32 -11, ptr @os.STD_OUTPUT_HANDLE, align 4
  store i32 -12, ptr @os.STD_ERROR_HANDLE, align 4
  store ptr inttoptr (i64 -1 to ptr), ptr @os.INVALID_HANDLE_VALUE, align 8
  store i32 65000, ptr @os.CP_UTF7, align 4
  store i32 65001, ptr @os.CP_UTF8, align 4
  store i32 4096, ptr @os.MEM_COMMIT, align 4
  store i32 8192, ptr @os.MEM_RESERVE, align 4
  store i32 32768, ptr @os.MEM_RELEASE, align 4
  store i32 1, ptr @os.PAGE_NOACCESS, align 4
  store i32 2, ptr @os.PAGE_READONLY, align 4
  store i32 4, ptr @os.PAGE_READWRITE, align 4
  store i32 8, ptr @os.PAGE_WRITECOPY, align 4
  store i32 16, ptr @os.PAGE_EXECUTE, align 4
  store i32 32, ptr @os.PAGE_EXECUTE_READ, align 4
  store i32 64, ptr @os.PAGE_EXECUTE_READWRITE, align 4
  store i32 128, ptr @os.PAGE_EXECUTE_WRITECOPY, align 4
  store i32 256, ptr @os.PAGE_GUARD, align 4
  store i32 512, ptr @os.PAGE_NOCACHE, align 4
  store i32 1024, ptr @os.PAGE_WRITECOMBINE, align 4
  ret void
}

declare i32 @main.main()

declare void @json.get_item(ptr, ptr, ptr)

declare void @json.parse(ptr, ptr, ptr)

declare void @json.create_dict(ptr, ptr)

declare void @json.add_kvp(ptr, ptr, ptr)

declare i1 @json.is_whitespace(i32)

declare i32 @json.peek_char(ptr)

declare i32 @json.next_char(ptr)

declare i32 @json.eat_char(ptr, i32)

declare void @json.eat_whitespace(ptr)

declare void @json.parse_string(ptr, ptr)

declare void @json.make_parser(ptr, ptr)

declare i1 @json.is_number(i32)

declare void @json.parse_number(ptr, ptr)

declare void @json.parse_literal(ptr, ptr)

declare void @json.parse_value(ptr, ptr, ptr)

declare void @json.parse_array(ptr, ptr, ptr)

declare void @json.parse_object(ptr, ptr, ptr)

declare void @init.global_initializers()

declare i64 @init.get_struct_alignment(i64)

declare i64 @init.get_type_alignment(i64)

declare i64 @init.get_basic_type_size(ptr)

declare i64 @init.get_struct_size(i64)

declare i64 @init.get_type_size(i64)

declare i64 @init.get_struct_member_offset(ptr, i64)

declare i32 @main.main.1()

declare i32 @main()

define void @os.assert(i1 %0, ptr %1) !dbg !82 {
block_0:
  %2 = alloca i1, align 1
  %3 = alloca %string, align 8
  %4 = alloca %string, align 8
  store i1 %0, ptr %2, align 1, !dbg !94
  call void @llvm.dbg.value(metadata ptr %2, metadata !95, metadata !DIExpression()), !dbg !94
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %1, i64 16, i1 false), !dbg !94
  call void @llvm.dbg.value(metadata ptr %3, metadata !96, metadata !DIExpression()), !dbg !94
  %5 = load i1, ptr %2, align 1, !dbg !97
  %6 = icmp eq i1 %5, false, !dbg !97
  br i1 %6, label %block_1, label %block_2, !dbg !97

block_1:                                          ; preds = %block_0
  %7 = alloca %string, align 8, !dbg !98
  %String = getelementptr inbounds %string, ptr %7, i32 0, i32 0, !dbg !98
  %Size = getelementptr inbounds %string, ptr %7, i32 0, i32 1, !dbg !98
  store ptr @0, ptr %String, align 8, !dbg !98
  store i64 15, ptr %Size, align 8, !dbg !98
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %4, ptr align 8 %7, i64 16, i1 false), !dbg !98
  call void @llvm.dbg.declare(metadata ptr %4, metadata !99, metadata !DIExpression()), !dbg !98
  %8 = getelementptr inbounds %string, ptr %4, i32 0, i32 0, !dbg !100
  %9 = load ptr, ptr %8, align 8, !dbg !100
  %10 = getelementptr inbounds %string, ptr %4, i32 0, i32 1, !dbg !100
  %11 = load i64, ptr %10, align 8, !dbg !100
  %12 = trunc i64 %11 to i32, !dbg !100
  call void @os.print(ptr %9, i32 %12), !dbg !100
  %13 = getelementptr inbounds %string, ptr %3, i32 0, i32 0, !dbg !101
  %14 = load ptr, ptr %13, align 8, !dbg !101
  %15 = getelementptr inbounds %string, ptr %3, i32 0, i32 1, !dbg !101
  %16 = load i64, ptr %15, align 8, !dbg !101
  %17 = trunc i64 %16 to i32, !dbg !101
  call void @os.print(ptr %14, i32 %17), !dbg !101
  call void @os.abort(), !dbg !102
  br label %block_3, !dbg !102

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !102

block_3:                                          ; preds = %block_2, %block_1
  ret void, !dbg !103
}

declare i1 @WriteFile(ptr, ptr, i32, ptr, ptr)

declare ptr @GetStdHandle(i32)

declare void @ExitProcess(i32)

declare i32 @SetConsoleOutputCP(i32)

declare ptr @VirtualAlloc(ptr, i64, i32, i32)

declare i1 @VirtualFree(ptr, i64, i32)

declare i1 @ReadConsoleA(ptr, ptr, i32, ptr, ptr)

define void @os.abort() !dbg !104 {
block_0:
  call void @ExitProcess(i32 1), !dbg !107
  ret void, !dbg !108
}

define void @os.print(ptr %0, i32 %1) !dbg !109 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  %5 = alloca i32, align 4
  store ptr %0, ptr %2, align 8, !dbg !113
  call void @llvm.dbg.value(metadata ptr %2, metadata !114, metadata !DIExpression()), !dbg !113
  store i32 %1, ptr %3, align 4, !dbg !113
  call void @llvm.dbg.value(metadata ptr %3, metadata !115, metadata !DIExpression()), !dbg !113
  %6 = load i32, ptr @os.CP_UTF8, align 4, !dbg !116
  %7 = call i32 @SetConsoleOutputCP(i32 %6), !dbg !116
  %8 = load i32, ptr @os.STD_OUTPUT_HANDLE, align 4, !dbg !117
  %9 = call ptr @GetStdHandle(i32 %8), !dbg !117
  store ptr %9, ptr %4, align 8, !dbg !117
  call void @llvm.dbg.declare(metadata ptr %4, metadata !118, metadata !DIExpression()), !dbg !117
  store i32 0, ptr %5, align 4, !dbg !120
  call void @llvm.dbg.declare(metadata ptr %5, metadata !121, metadata !DIExpression()), !dbg !120
  %10 = load ptr, ptr %4, align 8, !dbg !122
  %11 = icmp ne ptr %10, null, !dbg !122
  %12 = load ptr, ptr %4, align 8, !dbg !122
  %13 = load ptr, ptr @os.INVALID_HANDLE_VALUE, align 8, !dbg !122
  %14 = icmp ne ptr %12, %13, !dbg !122
  %15 = icmp ne i1 %11, false, !dbg !122
  %16 = icmp ne i1 %14, false, !dbg !122
  %17 = and i1 %15, %16, !dbg !122
  br i1 %17, label %block_1, label %block_2, !dbg !122

block_1:                                          ; preds = %block_0
  %18 = load ptr, ptr %4, align 8, !dbg !123
  %19 = load ptr, ptr %2, align 8, !dbg !123
  %20 = load i32, ptr %3, align 4, !dbg !123
  %21 = call i1 @WriteFile(ptr %18, ptr %19, i32 %20, ptr %5, ptr null), !dbg !123
  br label %block_3, !dbg !123

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !123

block_3:                                          ; preds = %block_2, %block_1
  ret void, !dbg !124
}

define ptr @os.alloc(i64 %0) !dbg !125 {
block_0:
  %1 = alloca i64, align 8
  store i64 %0, ptr %1, align 8, !dbg !128
  call void @llvm.dbg.value(metadata ptr %1, metadata !129, metadata !DIExpression()), !dbg !128
  %2 = load i64, ptr %1, align 8, !dbg !130
  %3 = load i32, ptr @os.MEM_RESERVE, align 4, !dbg !130
  %4 = load i32, ptr @os.MEM_COMMIT, align 4, !dbg !130
  %5 = or i32 %3, %4, !dbg !130
  %6 = load i32, ptr @os.PAGE_READWRITE, align 4, !dbg !130
  %7 = call ptr @VirtualAlloc(ptr null, i64 %2, i32 %5, i32 %6), !dbg !130
  ret ptr %7, !dbg !130
}

define void @os.free(ptr %0) !dbg !131 {
block_0:
  %1 = alloca ptr, align 8
  store ptr %0, ptr %1, align 8, !dbg !134
  call void @llvm.dbg.value(metadata ptr %1, metadata !135, metadata !DIExpression()), !dbg !134
  %2 = load ptr, ptr %1, align 8, !dbg !136
  %3 = load i32, ptr @os.MEM_RELEASE, align 4, !dbg !136
  %4 = call i1 @VirtualFree(ptr %2, i64 0, i32 %3), !dbg !136
  ret void, !dbg !137
}

define i32 @os.read_stdin_line(ptr %0, i32 %1) !dbg !138 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  %5 = alloca %os.CONSOLE_READCONSOLE_CONTROL, align 8
  %6 = alloca %os.CONSOLE_READCONSOLE_CONTROL, align 8
  %7 = alloca i32, align 4
  %8 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8, !dbg !141
  call void @llvm.dbg.value(metadata ptr %2, metadata !142, metadata !DIExpression()), !dbg !141
  store i32 %1, ptr %3, align 4, !dbg !141
  call void @llvm.dbg.value(metadata ptr %3, metadata !143, metadata !DIExpression()), !dbg !141
  %9 = load i32, ptr @os.STD_INPUT_HANDLE, align 4, !dbg !144
  %10 = call ptr @GetStdHandle(i32 %9), !dbg !144
  store ptr %10, ptr %4, align 8, !dbg !144
  call void @llvm.dbg.declare(metadata ptr %4, metadata !145, metadata !DIExpression()), !dbg !144
  %11 = getelementptr inbounds %os.CONSOLE_READCONSOLE_CONTROL, ptr %5, i32 0, i32 2, !dbg !146
  store i32 1024, ptr %11, align 4, !dbg !146
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %6, ptr align 4 %5, i64 16, i1 false), !dbg !146
  call void @llvm.dbg.declare(metadata ptr %6, metadata !147, metadata !DIExpression()), !dbg !146
  %12 = load ptr, ptr %4, align 8, !dbg !154
  %13 = icmp eq ptr %12, null, !dbg !154
  br i1 %13, label %block_1, label %block_2, !dbg !154

block_1:                                          ; preds = %block_0
  ret i32 0, !dbg !155

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !155

block_3:                                          ; preds = %block_2
  store i32 0, ptr %7, align 4, !dbg !156
  call void @llvm.dbg.declare(metadata ptr %7, metadata !157, metadata !DIExpression()), !dbg !156
  %14 = load ptr, ptr %4, align 8, !dbg !158
  %15 = load ptr, ptr %2, align 8, !dbg !158
  %16 = load i32, ptr %3, align 4, !dbg !158
  %17 = call i1 @ReadConsoleA(ptr %14, ptr %15, i32 %16, ptr %7, ptr %6), !dbg !158
  %18 = icmp eq i1 %17, false, !dbg !158
  br i1 %18, label %block_4, label %block_5, !dbg !158

block_4:                                          ; preds = %block_3
  ret i32 0, !dbg !159

block_5:                                          ; preds = %block_3
  br label %block_6, !dbg !159

block_6:                                          ; preds = %block_5
  %19 = load ptr, ptr %2, align 8, !dbg !160
  store ptr %19, ptr %8, align 8, !dbg !160
  call void @llvm.dbg.declare(metadata ptr %8, metadata !161, metadata !DIExpression()), !dbg !160
  %20 = load ptr, ptr %8, align 8, !dbg !162
  %21 = load i32, ptr %7, align 4, !dbg !162
  %22 = sub i32 %21, 2, !dbg !162
  %23 = getelementptr i8, ptr %20, i32 %22, !dbg !162
  store i8 0, ptr %23, align 1, !dbg !162
  %24 = load i32, ptr %7, align 4, !dbg !163
  %25 = sub i32 %24, 2, !dbg !163
  ret i32 %25, !dbg !163
}

declare void @io.push_string(ptr, ptr)

declare void @io.format_uint(ptr, i64)

declare void @io.format_int(ptr, i64)

declare void @io.print_typetype(ptr, ptr)

declare void @io.print_type(ptr, ptr)

declare void @io.builder_to_string(ptr, ptr)

declare void @io.print_type_with_formatter(ptr, i32, ptr)

declare void @io.__internal_print(ptr, ptr, ptr)

declare void @io.vsprint(ptr, ptr, ptr)

declare void @io.sprint(ptr, ptr, ptr)

declare void @io.print(ptr, ptr)

declare void @io.println(ptr, ptr)

declare void @io.readln(ptr, ptr, i32)

declare i32 @io.get_next(ptr)

declare void @"io.format_float:(type,*[]u32,f32,i32)->void"(i64, ptr, float, i32)

declare void @"io.format_float:(type,*[]u32,f64,i32)->void"(i64, ptr, double, i32)

declare ptr @mem.generic_alloc(i64, ptr)

declare void @mem.generic_free(ptr, ptr)

declare void @mem.create_generic_allocator(ptr)

declare ptr @mem.arena_alloc(i64, ptr)

declare void @mem.no_free(ptr, ptr)

declare void @mem.create_scratch(ptr, i64)

declare void @mem.destroy_scratch(ptr)

declare ptr @memcpy(ptr, ptr, i64)

declare ptr @memset(ptr, i32, i64)

declare i32 @memcmp(ptr, ptr, i64)

declare void @"mem.make_slice:(type,int,*mem.Allocator)->[]u8"(ptr, i64, i64, ptr)

declare i64 @str.to_int(ptr)

declare void @str.create(ptr, ptr)

declare void @str.append(ptr, ptr)

declare void @str.append_u32(ptr, i32)

declare void @str.append_u8(ptr, i8)

declare void @str.from_builder(ptr, ptr, ptr)

declare void @str.substr(ptr, ptr, i64, i64)

declare i64 @str.get_codepoint_size(ptr)

declare ptr @str.advance(ptr)

declare i32 @str.deref(ptr)

declare i32 @str.index(ptr, i64)

declare void @"array.create:(type,*mem.Allocator)->[]json.KeyValuePair"(ptr, i64, ptr)

declare void @"array.add:(json.KeyValuePair {string,json.Value},json.KeyValuePair {string,json.Value})->void"(ptr, ptr)

declare void @"array.create:(type,*mem.Allocator)->[]json.Value"(ptr, i64, ptr)

declare void @"array.add:(json.Value {json.Type,json.ValueUnion},json.Value {json.Type,json.ValueUnion})->void"(ptr, ptr)

declare void @"array.add:(*[]u32,u32)->void"(ptr, i32)

declare void @"array.create:(type,*mem.Allocator)->[]u8"(ptr, i64, ptr)

declare void @"array.add:(*[]u8,u8)->void"(ptr, i8)

declare void @"array.create:(type,*mem.Allocator)->[]u32"(ptr, i64, ptr)

declare void @"array.free:(*[]u32)->void"(ptr)

declare void @"array.free:(*[]u8)->void"(ptr)

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!80, !81}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false)
!1 = !DIFile(filename: "os.rcp", directory: "E:\\C_Projects\\ReComp\\std")
!2 = !{!3, !15, !36, !45, !50, !54, !65, !71}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.TypeKind", scope: !1, file: !1, size: 64, align: 64, elements: !4)
!4 = !{!5, !6, !7, !8, !9, !10, !11, !12, !13, !14}
!5 = !DIEnumerator(name: "Invalid", value: 0, isUnsigned: true)
!6 = !DIEnumerator(name: "Basic", value: 1, isUnsigned: true)
!7 = !DIEnumerator(name: "Function", value: 2, isUnsigned: true)
!8 = !DIEnumerator(name: "Struct", value: 3, isUnsigned: true)
!9 = !DIEnumerator(name: "Pointer", value: 4, isUnsigned: true)
!10 = !DIEnumerator(name: "Array", value: 5, isUnsigned: true)
!11 = !DIEnumerator(name: "Slice", value: 6, isUnsigned: true)
!12 = !DIEnumerator(name: "Vector", value: 7, isUnsigned: true)
!13 = !DIEnumerator(name: "Enum", value: 8, isUnsigned: true)
!14 = !DIEnumerator(name: "Generic", value: 9, isUnsigned: true)
!15 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.BasicKind", scope: !1, file: !1, size: 64, align: 64, elements: !16)
!16 = !{!17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35}
!17 = !DIEnumerator(name: "Bool", value: 0, isUnsigned: true)
!18 = !DIEnumerator(name: "String", value: 1, isUnsigned: true)
!19 = !DIEnumerator(name: "U8", value: 2, isUnsigned: true)
!20 = !DIEnumerator(name: "U16", value: 3, isUnsigned: true)
!21 = !DIEnumerator(name: "U32", value: 4, isUnsigned: true)
!22 = !DIEnumerator(name: "U64", value: 5, isUnsigned: true)
!23 = !DIEnumerator(name: "I8", value: 6, isUnsigned: true)
!24 = !DIEnumerator(name: "I16", value: 7, isUnsigned: true)
!25 = !DIEnumerator(name: "I32", value: 8, isUnsigned: true)
!26 = !DIEnumerator(name: "I64", value: 9, isUnsigned: true)
!27 = !DIEnumerator(name: "F32", value: 10, isUnsigned: true)
!28 = !DIEnumerator(name: "F64", value: 11, isUnsigned: true)
!29 = !DIEnumerator(name: "untypedInteger", value: 12, isUnsigned: true)
!30 = !DIEnumerator(name: "untypedFloat", value: 13, isUnsigned: true)
!31 = !DIEnumerator(name: "Int", value: 14, isUnsigned: true)
!32 = !DIEnumerator(name: "Uint", value: 15, isUnsigned: true)
!33 = !DIEnumerator(name: "Type", value: 16, isUnsigned: true)
!34 = !DIEnumerator(name: "Auto", value: 17, isUnsigned: true)
!35 = !DIEnumerator(name: "Module", value: 18, isUnsigned: true)
!36 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.BasicFlag", scope: !1, file: !1, size: 32, align: 32, elements: !37)
!37 = !{!38, !39, !40, !41, !42, !43, !44}
!38 = !DIEnumerator(name: "Boolean", value: 1, isUnsigned: true)
!39 = !DIEnumerator(name: "Integer", value: 2, isUnsigned: true)
!40 = !DIEnumerator(name: "Float", value: 4, isUnsigned: true)
!41 = !DIEnumerator(name: "String", value: 8, isUnsigned: true)
!42 = !DIEnumerator(name: "Untyped", value: 32, isUnsigned: true)
!43 = !DIEnumerator(name: "Unsigned", value: 64, isUnsigned: true)
!44 = !DIEnumerator(name: "TypeID", value: 128, isUnsigned: true)
!45 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.StructFlag", scope: !1, file: !1, size: 32, align: 32, elements: !46)
!46 = !{!47, !48, !49}
!47 = !DIEnumerator(name: "Packed", value: 1, isUnsigned: true)
!48 = !DIEnumerator(name: "Generic", value: 2, isUnsigned: true)
!49 = !DIEnumerator(name: "Union", value: 4, isUnsigned: true)
!50 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.VectorKind", scope: !1, file: !1, size: 64, align: 64, elements: !51)
!51 = !{!52, !53}
!52 = !DIEnumerator(name: "Float", value: 0, isUnsigned: true)
!53 = !DIEnumerator(name: "Int", value: 1, isUnsigned: true)
!54 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compile.CompileFlag", scope: !1, file: !1, size: 32, align: 32, elements: !55)
!55 = !{!56, !57, !58, !59, !60, !61, !62, !63, !64}
!56 = !DIEnumerator(name: "Debug", value: 1, isUnsigned: true)
!57 = !DIEnumerator(name: "SanAddress", value: 2, isUnsigned: true)
!58 = !DIEnumerator(name: "SanMemory", value: 4, isUnsigned: true)
!59 = !DIEnumerator(name: "SanThread", value: 8, isUnsigned: true)
!60 = !DIEnumerator(name: "SanUndefined", value: 16, isUnsigned: true)
!61 = !DIEnumerator(name: "NoStdLib", value: 32, isUnsigned: true)
!62 = !DIEnumerator(name: "SharedLib", value: 64, isUnsigned: true)
!63 = !DIEnumerator(name: "CrossAndroid", value: 128, isUnsigned: true)
!64 = !DIEnumerator(name: "NoLink", value: 256, isUnsigned: true)
!65 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compile.Arch", scope: !1, file: !1, size: 32, align: 32, elements: !66)
!66 = !{!67, !68, !69, !70}
!67 = !DIEnumerator(name: "x86_64", value: 0, isUnsigned: true)
!68 = !DIEnumerator(name: "x86", value: 1, isUnsigned: true)
!69 = !DIEnumerator(name: "Arm32", value: 2, isUnsigned: true)
!70 = !DIEnumerator(name: "Arm64", value: 4, isUnsigned: true)
!71 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "json.Type", scope: !1, file: !1, size: 64, align: 64, elements: !72)
!72 = !{!73, !74, !75, !76, !77, !78, !79}
!73 = !DIEnumerator(name: "Number", value: 0, isUnsigned: true)
!74 = !DIEnumerator(name: "Integer", value: 1, isUnsigned: true)
!75 = !DIEnumerator(name: "String", value: 2, isUnsigned: true)
!76 = !DIEnumerator(name: "Object", value: 3, isUnsigned: true)
!77 = !DIEnumerator(name: "Array", value: 4, isUnsigned: true)
!78 = !DIEnumerator(name: "Boolean", value: 5, isUnsigned: true)
!79 = !DIEnumerator(name: "Null", value: 6, isUnsigned: true)
!80 = !{i32 2, !"CodeView", i32 1}
!81 = !{i32 2, !"Debug Info Version", i32 3}
!82 = distinct !DISubprogram(name: "assert", linkageName: "os.assert", scope: !1, file: !1, line: 5, type: !83, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !93)
!83 = !DISubroutineType(types: !84)
!84 = !{null, !85, !86}
!85 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!86 = !DICompositeType(tag: DW_TAG_structure_type, name: "string", scope: !1, file: !1, size: 128, elements: !87)
!87 = !{!88, !91}
!88 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !89, size: 64, align: 64)
!89 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*u8", baseType: !90, size: 64, align: 64, dwarfAddressSpace: 0)
!90 = !DIBasicType(name: "u8", size: 8, encoding: DW_ATE_unsigned)
!91 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1, file: !1, baseType: !92, size: 64, align: 64, offset: 64)
!92 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!93 = !{}
!94 = !DILocation(line: 5, scope: !82)
!95 = !DILocalVariable(name: "cond", scope: !82, file: !1, line: 5, type: !85)
!96 = !DILocalVariable(name: "reason", arg: 1, scope: !82, file: !1, line: 5, type: !86)
!97 = !DILocation(line: 6, scope: !82)
!98 = !DILocation(line: 7, scope: !82)
!99 = !DILocalVariable(name: "header", scope: !82, file: !1, line: 7, type: !86)
!100 = !DILocation(line: 8, scope: !82)
!101 = !DILocation(line: 9, scope: !82)
!102 = !DILocation(line: 10, scope: !82)
!103 = !DILocation(line: 12, scope: !82)
!104 = distinct !DISubprogram(name: "abort", linkageName: "os.abort", scope: !1, file: !1, line: 49, type: !105, spFlags: DISPFlagDefinition, unit: !0)
!105 = !DISubroutineType(types: !106)
!106 = !{null}
!107 = !DILocation(line: 50, scope: !104)
!108 = !DILocation(line: 51, scope: !104)
!109 = distinct !DISubprogram(name: "print", linkageName: "os.print", scope: !1, file: !1, line: 54, type: !110, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !93)
!110 = !DISubroutineType(types: !111)
!111 = !{null, !89, !112}
!112 = !DIBasicType(name: "u32", size: 32, encoding: DW_ATE_unsigned)
!113 = !DILocation(line: 54, scope: !109)
!114 = !DILocalVariable(name: "data", scope: !109, file: !1, line: 54, type: !89)
!115 = !DILocalVariable(name: "count", arg: 1, scope: !109, file: !1, line: 54, type: !112)
!116 = !DILocation(line: 55, scope: !109)
!117 = !DILocation(line: 56, scope: !109)
!118 = !DILocalVariable(name: "handle", scope: !109, file: !1, line: 56, type: !119)
!119 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*void", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!120 = !DILocation(line: 57, scope: !109)
!121 = !DILocalVariable(name: "written", scope: !109, file: !1, line: 57, type: !112)
!122 = !DILocation(line: 58, scope: !109)
!123 = !DILocation(line: 59, scope: !109)
!124 = !DILocation(line: 61, scope: !109)
!125 = distinct !DISubprogram(name: "alloc", linkageName: "os.alloc", scope: !1, file: !1, line: 63, type: !126, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !93)
!126 = !DISubroutineType(types: !127)
!127 = !{!119, !92}
!128 = !DILocation(line: 63, scope: !125)
!129 = !DILocalVariable(name: "size", scope: !125, file: !1, line: 63, type: !92)
!130 = !DILocation(line: 64, scope: !125)
!131 = distinct !DISubprogram(name: "free", linkageName: "os.free", scope: !1, file: !1, line: 67, type: !132, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !93)
!132 = !DISubroutineType(types: !133)
!133 = !{null, !119}
!134 = !DILocation(line: 67, scope: !131)
!135 = !DILocalVariable(name: "ptr", scope: !131, file: !1, line: 67, type: !119)
!136 = !DILocation(line: 68, scope: !131)
!137 = !DILocation(line: 69, scope: !131)
!138 = distinct !DISubprogram(name: "read_stdin_line", linkageName: "os.read_stdin_line", scope: !1, file: !1, line: 78, type: !139, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !93)
!139 = !DISubroutineType(types: !140)
!140 = !{!112, !119, !112}
!141 = !DILocation(line: 78, scope: !138)
!142 = !DILocalVariable(name: "buffer", scope: !138, file: !1, line: 78, type: !119)
!143 = !DILocalVariable(name: "size", arg: 1, scope: !138, file: !1, line: 78, type: !112)
!144 = !DILocation(line: 79, scope: !138)
!145 = !DILocalVariable(name: "handle", scope: !138, file: !1, line: 79, type: !119)
!146 = !DILocation(line: 80, scope: !138)
!147 = !DILocalVariable(name: "control", scope: !138, file: !1, line: 80, type: !148)
!148 = !DICompositeType(tag: DW_TAG_structure_type, name: "os.CONSOLE_READCONSOLE_CONTROL", scope: !1, file: !1, size: 128, elements: !149)
!149 = !{!150, !151, !152, !153}
!150 = !DIDerivedType(tag: DW_TAG_member, name: "nLength", scope: !1, file: !1, baseType: !112, size: 32, align: 32)
!151 = !DIDerivedType(tag: DW_TAG_member, name: "nInitialChars", scope: !1, file: !1, baseType: !112, size: 32, align: 32, offset: 32)
!152 = !DIDerivedType(tag: DW_TAG_member, name: "dwCtrlWakeupMask", scope: !1, file: !1, baseType: !112, size: 32, align: 32, offset: 64)
!153 = !DIDerivedType(tag: DW_TAG_member, name: "dwControlKeyState", scope: !1, file: !1, baseType: !112, size: 32, align: 32, offset: 96)
!154 = !DILocation(line: 84, scope: !138)
!155 = !DILocation(line: 85, scope: !138)
!156 = !DILocation(line: 88, scope: !138)
!157 = !DILocalVariable(name: "read", scope: !138, file: !1, line: 88, type: !112)
!158 = !DILocation(line: 89, scope: !138)
!159 = !DILocation(line: 90, scope: !138)
!160 = !DILocation(line: 93, scope: !138)
!161 = !DILocalVariable(name: "as_chars", scope: !138, file: !1, line: 93, type: !89)
!162 = !DILocation(line: 96, scope: !138)
!163 = !DILocation(line: 97, scope: !138)
