; ModuleID = 'array'
source_filename = "array.rcp"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%string = type { ptr, i64 }
%slice.5 = type { i64, ptr }
%slice.4 = type { i64, ptr }
%mem.Allocator = type { ptr, ptr, ptr }
%array.Header = type { i64, %mem.Allocator }
%json.KeyValuePair = type { %string, %json.Value }
%json.Value = type { i64, %json.ValueUnion }
%json.ValueUnion = type { %string }
%slice.8 = type { i64, ptr }
%slice.3 = type { i64, ptr }
%slice.6 = type { i64, ptr }

@main.test_string = external global %string
@init.INVALID_TYPE = external global i64
@init.type_table = external global %slice.5
@os.STD_INPUT_HANDLE = external global i32
@os.STD_OUTPUT_HANDLE = external global i32
@os.STD_ERROR_HANDLE = external global i32
@os.INVALID_HANDLE_VALUE = external global ptr
@os.CP_UTF7 = external global i32
@os.CP_UTF8 = external global i32
@os.MEM_COMMIT = external global i32
@os.MEM_RESERVE = external global i32
@os.MEM_RELEASE = external global i32
@os.PAGE_NOACCESS = external global i32
@os.PAGE_READONLY = external global i32
@os.PAGE_READWRITE = external global i32
@os.PAGE_WRITECOPY = external global i32
@os.PAGE_EXECUTE = external global i32
@os.PAGE_EXECUTE_READ = external global i32
@os.PAGE_EXECUTE_READWRITE = external global i32
@os.PAGE_EXECUTE_WRITECOPY = external global i32
@os.PAGE_GUARD = external global i32
@os.PAGE_NOCACHE = external global i32
@os.PAGE_WRITECOMBINE = external global i32
@str.CONTINUE_BIT = external global i8

define void @array.__GlobalInitializerFunction.0() {
block_0:
  ret void
}

declare i32 @main.main()

declare void @json.get_item(ptr, ptr, ptr)

declare void @json.parse(ptr, ptr, ptr)

declare void @json.create_dict(ptr, ptr)

declare void @json.add_kvp(ptr, ptr, ptr)

declare i1 @json.is_whitespace(i32)

declare i32 @json.peek_char(ptr)

declare i32 @json.next_char(ptr)

declare i32 @json.eat_char(ptr, i32)

declare void @json.eat_whitespace(ptr)

declare void @json.parse_string(ptr, ptr)

declare void @json.make_parser(ptr, ptr)

declare i1 @json.is_number(i32)

declare void @json.parse_number(ptr, ptr)

declare void @json.parse_literal(ptr, ptr)

declare void @json.parse_value(ptr, ptr, ptr)

declare void @json.parse_array(ptr, ptr, ptr)

declare void @json.parse_object(ptr, ptr, ptr)

declare void @init.global_initializers()

declare i64 @init.get_struct_alignment(i64)

declare i64 @init.get_type_alignment(i64)

declare i64 @init.get_basic_type_size(ptr)

declare i64 @init.get_struct_size(i64)

declare i64 @init.get_type_size(i64)

declare i64 @init.get_struct_member_offset(ptr, i64)

declare i32 @main.main.1()

declare i32 @main()

declare void @os.assert(i1, ptr)

declare i1 @WriteFile(ptr, ptr, i32, ptr, ptr)

declare ptr @GetStdHandle(i32)

declare void @ExitProcess(i32)

declare i32 @SetConsoleOutputCP(i32)

declare ptr @VirtualAlloc(ptr, i64, i32, i32)

declare i1 @VirtualFree(ptr, i64, i32)

declare i1 @ReadConsoleA(ptr, ptr, i32, ptr, ptr)

declare void @os.abort()

declare void @os.print(ptr, i32)

declare ptr @os.alloc(i64)

declare void @os.free(ptr)

declare i32 @os.read_stdin_line(ptr, i32)

declare void @io.push_string(ptr, ptr)

declare void @io.format_uint(ptr, i64)

declare void @io.format_int(ptr, i64)

declare void @io.print_typetype(ptr, ptr)

declare void @io.print_type(ptr, ptr)

declare void @io.builder_to_string(ptr, ptr)

declare void @io.print_type_with_formatter(ptr, i32, ptr)

declare void @io.__internal_print(ptr, ptr, ptr)

declare void @io.vsprint(ptr, ptr, ptr)

declare void @io.sprint(ptr, ptr, ptr)

declare void @io.print(ptr, ptr)

declare void @io.println(ptr, ptr)

declare void @io.readln(ptr, ptr, i32)

declare i32 @io.get_next(ptr)

declare void @"io.format_float:(type,*[]u32,f32,i32)->void"(i64, ptr, float, i32)

declare void @"io.format_float:(type,*[]u32,f64,i32)->void"(i64, ptr, double, i32)

declare ptr @mem.generic_alloc(i64, ptr)

declare void @mem.generic_free(ptr, ptr)

declare void @mem.create_generic_allocator(ptr)

declare ptr @mem.arena_alloc(i64, ptr)

declare void @mem.no_free(ptr, ptr)

declare void @mem.create_scratch(ptr, i64)

declare void @mem.destroy_scratch(ptr)

declare ptr @memcpy(ptr, ptr, i64)

declare ptr @memset(ptr, i32, i64)

declare i32 @memcmp(ptr, ptr, i64)

declare void @"mem.make_slice:(type,int,*mem.Allocator)->[]u8"(ptr, i64, i64, ptr)

declare i64 @str.to_int(ptr)

declare void @str.create(ptr, ptr)

declare void @str.append(ptr, ptr)

declare void @str.append_u32(ptr, i32)

declare void @str.append_u8(ptr, i8)

declare void @str.from_builder(ptr, ptr, ptr)

declare void @str.substr(ptr, ptr, i64, i64)

declare i64 @str.get_codepoint_size(ptr)

declare ptr @str.advance(ptr)

declare i32 @str.deref(ptr)

declare i32 @str.index(ptr, i64)

define void @"array.create:(type,*mem.Allocator)->[]json.KeyValuePair"(ptr %0, i64 %1, ptr %2) !dbg !82 {
block_0:
  %3 = alloca i64, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i64, align 8
  %6 = alloca ptr, align 8
  %7 = alloca %slice.4, align 8
  %8 = alloca ptr, align 8
  %9 = alloca %mem.Allocator, align 8
  %10 = alloca %slice.4, align 8
  %11 = alloca %slice.4, align 8
  store i64 %1, ptr %3, align 8, !dbg !106
  call void @llvm.dbg.value(metadata ptr %3, metadata !107, metadata !DIExpression()), !dbg !106
  store ptr %2, ptr %4, align 8, !dbg !106
  call void @llvm.dbg.value(metadata ptr %4, metadata !108, metadata !DIExpression()), !dbg !106
  store i64 8, ptr %5, align 8, !dbg !109
  call void @llvm.dbg.declare(metadata ptr %5, metadata !110, metadata !DIExpression()), !dbg !109
  %12 = load ptr, ptr %4, align 8, !dbg !111
  %13 = getelementptr inbounds %mem.Allocator, ptr %12, i32 0, i32 0, !dbg !111
  %14 = load ptr, ptr %13, align 8, !dbg !111
  %15 = load i64, ptr %5, align 8, !dbg !111
  %16 = mul i64 %15, 40, !dbg !111
  %17 = add i64 %16, 32, !dbg !111
  %18 = load ptr, ptr %4, align 8, !dbg !111
  %19 = call ptr %14(i64 %17, ptr %18), !dbg !111
  store ptr %19, ptr %6, align 8, !dbg !111
  call void @llvm.dbg.declare(metadata ptr %6, metadata !112, metadata !DIExpression()), !dbg !111
  %20 = load ptr, ptr %6, align 8, !dbg !130
  %21 = icmp ne ptr %20, null, !dbg !130
  %22 = icmp eq i1 %21, false, !dbg !130
  br i1 %22, label %block_1, label %block_2, !dbg !130

block_1:                                          ; preds = %block_0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %7, i64 16, i1 false), !dbg !131
  ret void, !dbg !131

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !131

block_3:                                          ; preds = %block_2
  %23 = load ptr, ptr %6, align 8, !dbg !132
  store ptr %23, ptr %8, align 8, !dbg !132
  call void @llvm.dbg.declare(metadata ptr %8, metadata !133, metadata !DIExpression()), !dbg !132
  %24 = load ptr, ptr %8, align 8, !dbg !135
  %25 = getelementptr inbounds %array.Header, ptr %24, i32 0, i32 0, !dbg !135
  %26 = load i64, ptr %5, align 8, !dbg !135
  store i64 %26, ptr %25, align 8, !dbg !135
  %27 = load ptr, ptr %8, align 8, !dbg !136
  %28 = getelementptr inbounds %array.Header, ptr %27, i32 0, i32 1, !dbg !136
  %29 = load ptr, ptr %4, align 8, !dbg !136
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %9, ptr align 8 %29, i64 24, i1 false), !dbg !136
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %28, ptr align 8 %9, i64 24, i1 false), !dbg !136
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %11, ptr align 8 %10, i64 16, i1 false), !dbg !137
  call void @llvm.dbg.declare(metadata ptr %11, metadata !138, metadata !DIExpression()), !dbg !137
  %30 = getelementptr inbounds %slice.4, ptr %11, i32 0, i32 1, !dbg !139
  %31 = load ptr, ptr %8, align 8, !dbg !139
  %32 = getelementptr %array.Header, ptr %31, i64 1, !dbg !139
  store ptr %32, ptr %30, align 8, !dbg !139
  %33 = getelementptr inbounds %slice.4, ptr %11, i32 0, i32 0, !dbg !140
  store i64 0, ptr %33, align 8, !dbg !140
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %11, i64 16, i1 false), !dbg !141
  ret void, !dbg !141
}

define void @"array.add:(json.KeyValuePair {string,json.Value},json.KeyValuePair {string,json.Value})->void"(ptr %0, ptr %1) !dbg !142 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca %json.KeyValuePair, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i64, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8, !dbg !146
  call void @llvm.dbg.value(metadata ptr %2, metadata !147, metadata !DIExpression()), !dbg !146
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %1, i64 40, i1 false), !dbg !146
  call void @llvm.dbg.value(metadata ptr %3, metadata !148, metadata !DIExpression()), !dbg !146
  %9 = load ptr, ptr %2, align 8, !dbg !149
  store ptr %9, ptr %4, align 8, !dbg !149
  call void @llvm.dbg.declare(metadata ptr %4, metadata !150, metadata !DIExpression()), !dbg !149
  %10 = load ptr, ptr %4, align 8, !dbg !151
  %11 = getelementptr inbounds %slice.4, ptr %10, i32 0, i32 1, !dbg !151
  %12 = load ptr, ptr %11, align 8, !dbg !151
  %13 = getelementptr %array.Header, ptr %12, i64 -1, !dbg !151
  store ptr %13, ptr %5, align 8, !dbg !151
  call void @llvm.dbg.declare(metadata ptr %5, metadata !152, metadata !DIExpression()), !dbg !151
  %14 = load ptr, ptr %4, align 8, !dbg !153
  %15 = getelementptr inbounds %slice.4, ptr %14, i32 0, i32 0, !dbg !153
  %16 = load i64, ptr %15, align 8, !dbg !153
  %17 = load ptr, ptr %5, align 8, !dbg !153
  %18 = getelementptr inbounds %array.Header, ptr %17, i32 0, i32 0, !dbg !153
  %19 = load i64, ptr %18, align 8, !dbg !153
  %20 = icmp sge i64 %16, %19, !dbg !153
  br i1 %20, label %block_1, label %block_2, !dbg !153

block_1:                                          ; preds = %block_0
  %21 = load ptr, ptr %5, align 8, !dbg !154
  %22 = getelementptr inbounds %array.Header, ptr %21, i32 0, i32 0, !dbg !154
  %23 = load i64, ptr %22, align 8, !dbg !154
  %24 = mul i64 %23, 2, !dbg !154
  store i64 %24, ptr %6, align 8, !dbg !154
  call void @llvm.dbg.declare(metadata ptr %6, metadata !155, metadata !DIExpression()), !dbg !154
  %25 = load ptr, ptr %5, align 8, !dbg !156
  %26 = getelementptr inbounds %array.Header, ptr %25, i32 0, i32 1, !dbg !156
  %27 = getelementptr inbounds %mem.Allocator, ptr %26, i32 0, i32 0, !dbg !156
  %28 = load ptr, ptr %27, align 8, !dbg !156
  %29 = load i64, ptr %6, align 8, !dbg !156
  %30 = mul i64 %29, 40, !dbg !156
  %31 = add i64 %30, 32, !dbg !156
  %32 = load ptr, ptr %5, align 8, !dbg !156
  %33 = getelementptr inbounds %array.Header, ptr %32, i32 0, i32 1, !dbg !156
  %34 = call ptr %28(i64 %31, ptr %33), !dbg !156
  store ptr %34, ptr %7, align 8, !dbg !156
  call void @llvm.dbg.declare(metadata ptr %7, metadata !157, metadata !DIExpression()), !dbg !156
  %35 = load ptr, ptr %7, align 8, !dbg !158
  %36 = icmp ne ptr %35, null, !dbg !158
  %37 = icmp eq i1 %36, false, !dbg !158
  br i1 %37, label %block_4, label %block_5, !dbg !158

block_4:                                          ; preds = %block_1
  %38 = load ptr, ptr %4, align 8, !dbg !159
  %39 = getelementptr inbounds %slice.4, ptr %38, i32 0, i32 1, !dbg !159
  store ptr null, ptr %39, align 8, !dbg !159
  %40 = load ptr, ptr %4, align 8, !dbg !160
  %41 = getelementptr inbounds %slice.4, ptr %40, i32 0, i32 0, !dbg !160
  store i64 0, ptr %41, align 8, !dbg !160
  ret void, !dbg !161

block_5:                                          ; preds = %block_1
  br label %block_6, !dbg !161

block_6:                                          ; preds = %block_5
  %42 = load ptr, ptr %7, align 8, !dbg !162
  store ptr %42, ptr %8, align 8, !dbg !162
  call void @llvm.dbg.declare(metadata ptr %8, metadata !163, metadata !DIExpression()), !dbg !162
  %43 = load ptr, ptr %8, align 8, !dbg !164
  %44 = getelementptr inbounds %array.Header, ptr %43, i32 0, i32 0, !dbg !164
  %45 = load i64, ptr %6, align 8, !dbg !164
  store i64 %45, ptr %44, align 8, !dbg !164
  %46 = load ptr, ptr %8, align 8, !dbg !165
  %47 = getelementptr inbounds %array.Header, ptr %46, i32 0, i32 1, !dbg !165
  %48 = load ptr, ptr %5, align 8, !dbg !165
  %49 = getelementptr inbounds %array.Header, ptr %48, i32 0, i32 1, !dbg !165
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %47, ptr align 8 %49, i64 24, i1 false), !dbg !165
  %50 = load ptr, ptr %8, align 8, !dbg !166
  %51 = getelementptr %array.Header, ptr %50, i64 1, !dbg !166
  %52 = load ptr, ptr %4, align 8, !dbg !166
  %53 = getelementptr inbounds %slice.4, ptr %52, i32 0, i32 1, !dbg !166
  %54 = load ptr, ptr %53, align 8, !dbg !166
  %55 = load ptr, ptr %4, align 8, !dbg !166
  %56 = getelementptr inbounds %slice.4, ptr %55, i32 0, i32 0, !dbg !166
  %57 = load i64, ptr %56, align 8, !dbg !166
  %58 = mul i64 %57, 40, !dbg !166
  %59 = call ptr @memcpy(ptr %51, ptr %54, i64 %58), !dbg !166
  %60 = load ptr, ptr %8, align 8, !dbg !167
  %61 = getelementptr inbounds %array.Header, ptr %60, i32 0, i32 1, !dbg !167
  %62 = getelementptr inbounds %mem.Allocator, ptr %61, i32 0, i32 1, !dbg !167
  %63 = load ptr, ptr %62, align 8, !dbg !167
  %64 = load ptr, ptr %5, align 8, !dbg !167
  %65 = load ptr, ptr %8, align 8, !dbg !167
  %66 = getelementptr inbounds %array.Header, ptr %65, i32 0, i32 1, !dbg !167
  call void %63(ptr %64, ptr %66), !dbg !167
  %67 = load ptr, ptr %4, align 8, !dbg !168
  %68 = getelementptr inbounds %slice.4, ptr %67, i32 0, i32 1, !dbg !168
  %69 = load ptr, ptr %8, align 8, !dbg !168
  %70 = getelementptr %array.Header, ptr %69, i64 1, !dbg !168
  store ptr %70, ptr %68, align 8, !dbg !168
  br label %block_3, !dbg !168

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !168

block_3:                                          ; preds = %block_2, %block_6
  %71 = load ptr, ptr %4, align 8, !dbg !169
  %72 = load ptr, ptr %4, align 8, !dbg !169
  %73 = getelementptr inbounds %slice.4, ptr %72, i32 0, i32 0, !dbg !169
  %74 = load i64, ptr %73, align 8, !dbg !169
  %75 = getelementptr inbounds %slice.4, ptr %71, i32 0, i32 1, !dbg !169
  %76 = load ptr, ptr %75, align 8, !dbg !169
  %77 = getelementptr %json.KeyValuePair, ptr %76, i64 %74, !dbg !169
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %77, ptr align 8 %3, i64 40, i1 false), !dbg !169
  %78 = load ptr, ptr %4, align 8, !dbg !170
  %79 = getelementptr inbounds %slice.4, ptr %78, i32 0, i32 0, !dbg !170
  %80 = load ptr, ptr %4, align 8, !dbg !170
  %81 = getelementptr inbounds %slice.4, ptr %80, i32 0, i32 0, !dbg !170
  %82 = load i64, ptr %81, align 8, !dbg !170
  %83 = add i64 %82, 1, !dbg !170
  store i64 %83, ptr %79, align 8, !dbg !170
  ret void, !dbg !171
}

define void @"array.create:(type,*mem.Allocator)->[]json.Value"(ptr %0, i64 %1, ptr %2) !dbg !172 {
block_0:
  %3 = alloca i64, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i64, align 8
  %6 = alloca ptr, align 8
  %7 = alloca %slice.8, align 8
  %8 = alloca ptr, align 8
  %9 = alloca %mem.Allocator, align 8
  %10 = alloca %slice.8, align 8
  %11 = alloca %slice.8, align 8
  store i64 %1, ptr %3, align 8, !dbg !179
  call void @llvm.dbg.value(metadata ptr %3, metadata !180, metadata !DIExpression()), !dbg !179
  store ptr %2, ptr %4, align 8, !dbg !179
  call void @llvm.dbg.value(metadata ptr %4, metadata !181, metadata !DIExpression()), !dbg !179
  store i64 8, ptr %5, align 8, !dbg !182
  call void @llvm.dbg.declare(metadata ptr %5, metadata !183, metadata !DIExpression()), !dbg !182
  %12 = load ptr, ptr %4, align 8, !dbg !184
  %13 = getelementptr inbounds %mem.Allocator, ptr %12, i32 0, i32 0, !dbg !184
  %14 = load ptr, ptr %13, align 8, !dbg !184
  %15 = load i64, ptr %5, align 8, !dbg !184
  %16 = mul i64 %15, 24, !dbg !184
  %17 = add i64 %16, 32, !dbg !184
  %18 = load ptr, ptr %4, align 8, !dbg !184
  %19 = call ptr %14(i64 %17, ptr %18), !dbg !184
  store ptr %19, ptr %6, align 8, !dbg !184
  call void @llvm.dbg.declare(metadata ptr %6, metadata !185, metadata !DIExpression()), !dbg !184
  %20 = load ptr, ptr %6, align 8, !dbg !186
  %21 = icmp ne ptr %20, null, !dbg !186
  %22 = icmp eq i1 %21, false, !dbg !186
  br i1 %22, label %block_1, label %block_2, !dbg !186

block_1:                                          ; preds = %block_0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %7, i64 16, i1 false), !dbg !187
  ret void, !dbg !187

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !187

block_3:                                          ; preds = %block_2
  %23 = load ptr, ptr %6, align 8, !dbg !188
  store ptr %23, ptr %8, align 8, !dbg !188
  call void @llvm.dbg.declare(metadata ptr %8, metadata !189, metadata !DIExpression()), !dbg !188
  %24 = load ptr, ptr %8, align 8, !dbg !190
  %25 = getelementptr inbounds %array.Header, ptr %24, i32 0, i32 0, !dbg !190
  %26 = load i64, ptr %5, align 8, !dbg !190
  store i64 %26, ptr %25, align 8, !dbg !190
  %27 = load ptr, ptr %8, align 8, !dbg !191
  %28 = getelementptr inbounds %array.Header, ptr %27, i32 0, i32 1, !dbg !191
  %29 = load ptr, ptr %4, align 8, !dbg !191
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %9, ptr align 8 %29, i64 24, i1 false), !dbg !191
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %28, ptr align 8 %9, i64 24, i1 false), !dbg !191
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %11, ptr align 8 %10, i64 16, i1 false), !dbg !192
  call void @llvm.dbg.declare(metadata ptr %11, metadata !193, metadata !DIExpression()), !dbg !192
  %30 = getelementptr inbounds %slice.8, ptr %11, i32 0, i32 1, !dbg !194
  %31 = load ptr, ptr %8, align 8, !dbg !194
  %32 = getelementptr %array.Header, ptr %31, i64 1, !dbg !194
  store ptr %32, ptr %30, align 8, !dbg !194
  %33 = getelementptr inbounds %slice.8, ptr %11, i32 0, i32 0, !dbg !195
  store i64 0, ptr %33, align 8, !dbg !195
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %11, i64 16, i1 false), !dbg !196
  ret void, !dbg !196
}

define void @"array.add:(json.Value {json.Type,json.ValueUnion},json.Value {json.Type,json.ValueUnion})->void"(ptr %0, ptr %1) !dbg !197 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca %json.Value, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i64, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8, !dbg !218
  call void @llvm.dbg.value(metadata ptr %2, metadata !219, metadata !DIExpression()), !dbg !218
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3, ptr align 8 %1, i64 24, i1 false), !dbg !218
  call void @llvm.dbg.value(metadata ptr %3, metadata !220, metadata !DIExpression()), !dbg !218
  %9 = load ptr, ptr %2, align 8, !dbg !221
  store ptr %9, ptr %4, align 8, !dbg !221
  call void @llvm.dbg.declare(metadata ptr %4, metadata !222, metadata !DIExpression()), !dbg !221
  %10 = load ptr, ptr %4, align 8, !dbg !223
  %11 = getelementptr inbounds %slice.8, ptr %10, i32 0, i32 1, !dbg !223
  %12 = load ptr, ptr %11, align 8, !dbg !223
  %13 = getelementptr %array.Header, ptr %12, i64 -1, !dbg !223
  store ptr %13, ptr %5, align 8, !dbg !223
  call void @llvm.dbg.declare(metadata ptr %5, metadata !224, metadata !DIExpression()), !dbg !223
  %14 = load ptr, ptr %4, align 8, !dbg !225
  %15 = getelementptr inbounds %slice.8, ptr %14, i32 0, i32 0, !dbg !225
  %16 = load i64, ptr %15, align 8, !dbg !225
  %17 = load ptr, ptr %5, align 8, !dbg !225
  %18 = getelementptr inbounds %array.Header, ptr %17, i32 0, i32 0, !dbg !225
  %19 = load i64, ptr %18, align 8, !dbg !225
  %20 = icmp sge i64 %16, %19, !dbg !225
  br i1 %20, label %block_1, label %block_2, !dbg !225

block_1:                                          ; preds = %block_0
  %21 = load ptr, ptr %5, align 8, !dbg !226
  %22 = getelementptr inbounds %array.Header, ptr %21, i32 0, i32 0, !dbg !226
  %23 = load i64, ptr %22, align 8, !dbg !226
  %24 = mul i64 %23, 2, !dbg !226
  store i64 %24, ptr %6, align 8, !dbg !226
  call void @llvm.dbg.declare(metadata ptr %6, metadata !227, metadata !DIExpression()), !dbg !226
  %25 = load ptr, ptr %5, align 8, !dbg !228
  %26 = getelementptr inbounds %array.Header, ptr %25, i32 0, i32 1, !dbg !228
  %27 = getelementptr inbounds %mem.Allocator, ptr %26, i32 0, i32 0, !dbg !228
  %28 = load ptr, ptr %27, align 8, !dbg !228
  %29 = load i64, ptr %6, align 8, !dbg !228
  %30 = mul i64 %29, 24, !dbg !228
  %31 = add i64 %30, 32, !dbg !228
  %32 = load ptr, ptr %5, align 8, !dbg !228
  %33 = getelementptr inbounds %array.Header, ptr %32, i32 0, i32 1, !dbg !228
  %34 = call ptr %28(i64 %31, ptr %33), !dbg !228
  store ptr %34, ptr %7, align 8, !dbg !228
  call void @llvm.dbg.declare(metadata ptr %7, metadata !229, metadata !DIExpression()), !dbg !228
  %35 = load ptr, ptr %7, align 8, !dbg !230
  %36 = icmp ne ptr %35, null, !dbg !230
  %37 = icmp eq i1 %36, false, !dbg !230
  br i1 %37, label %block_4, label %block_5, !dbg !230

block_4:                                          ; preds = %block_1
  %38 = load ptr, ptr %4, align 8, !dbg !231
  %39 = getelementptr inbounds %slice.8, ptr %38, i32 0, i32 1, !dbg !231
  store ptr null, ptr %39, align 8, !dbg !231
  %40 = load ptr, ptr %4, align 8, !dbg !232
  %41 = getelementptr inbounds %slice.8, ptr %40, i32 0, i32 0, !dbg !232
  store i64 0, ptr %41, align 8, !dbg !232
  ret void, !dbg !233

block_5:                                          ; preds = %block_1
  br label %block_6, !dbg !233

block_6:                                          ; preds = %block_5
  %42 = load ptr, ptr %7, align 8, !dbg !234
  store ptr %42, ptr %8, align 8, !dbg !234
  call void @llvm.dbg.declare(metadata ptr %8, metadata !235, metadata !DIExpression()), !dbg !234
  %43 = load ptr, ptr %8, align 8, !dbg !236
  %44 = getelementptr inbounds %array.Header, ptr %43, i32 0, i32 0, !dbg !236
  %45 = load i64, ptr %6, align 8, !dbg !236
  store i64 %45, ptr %44, align 8, !dbg !236
  %46 = load ptr, ptr %8, align 8, !dbg !237
  %47 = getelementptr inbounds %array.Header, ptr %46, i32 0, i32 1, !dbg !237
  %48 = load ptr, ptr %5, align 8, !dbg !237
  %49 = getelementptr inbounds %array.Header, ptr %48, i32 0, i32 1, !dbg !237
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %47, ptr align 8 %49, i64 24, i1 false), !dbg !237
  %50 = load ptr, ptr %8, align 8, !dbg !238
  %51 = getelementptr %array.Header, ptr %50, i64 1, !dbg !238
  %52 = load ptr, ptr %4, align 8, !dbg !238
  %53 = getelementptr inbounds %slice.8, ptr %52, i32 0, i32 1, !dbg !238
  %54 = load ptr, ptr %53, align 8, !dbg !238
  %55 = load ptr, ptr %4, align 8, !dbg !238
  %56 = getelementptr inbounds %slice.8, ptr %55, i32 0, i32 0, !dbg !238
  %57 = load i64, ptr %56, align 8, !dbg !238
  %58 = mul i64 %57, 24, !dbg !238
  %59 = call ptr @memcpy(ptr %51, ptr %54, i64 %58), !dbg !238
  %60 = load ptr, ptr %8, align 8, !dbg !239
  %61 = getelementptr inbounds %array.Header, ptr %60, i32 0, i32 1, !dbg !239
  %62 = getelementptr inbounds %mem.Allocator, ptr %61, i32 0, i32 1, !dbg !239
  %63 = load ptr, ptr %62, align 8, !dbg !239
  %64 = load ptr, ptr %5, align 8, !dbg !239
  %65 = load ptr, ptr %8, align 8, !dbg !239
  %66 = getelementptr inbounds %array.Header, ptr %65, i32 0, i32 1, !dbg !239
  call void %63(ptr %64, ptr %66), !dbg !239
  %67 = load ptr, ptr %4, align 8, !dbg !240
  %68 = getelementptr inbounds %slice.8, ptr %67, i32 0, i32 1, !dbg !240
  %69 = load ptr, ptr %8, align 8, !dbg !240
  %70 = getelementptr %array.Header, ptr %69, i64 1, !dbg !240
  store ptr %70, ptr %68, align 8, !dbg !240
  br label %block_3, !dbg !240

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !240

block_3:                                          ; preds = %block_2, %block_6
  %71 = load ptr, ptr %4, align 8, !dbg !241
  %72 = load ptr, ptr %4, align 8, !dbg !241
  %73 = getelementptr inbounds %slice.8, ptr %72, i32 0, i32 0, !dbg !241
  %74 = load i64, ptr %73, align 8, !dbg !241
  %75 = getelementptr inbounds %slice.8, ptr %71, i32 0, i32 1, !dbg !241
  %76 = load ptr, ptr %75, align 8, !dbg !241
  %77 = getelementptr %json.Value, ptr %76, i64 %74, !dbg !241
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %77, ptr align 8 %3, i64 24, i1 false), !dbg !241
  %78 = load ptr, ptr %4, align 8, !dbg !242
  %79 = getelementptr inbounds %slice.8, ptr %78, i32 0, i32 0, !dbg !242
  %80 = load ptr, ptr %4, align 8, !dbg !242
  %81 = getelementptr inbounds %slice.8, ptr %80, i32 0, i32 0, !dbg !242
  %82 = load i64, ptr %81, align 8, !dbg !242
  %83 = add i64 %82, 1, !dbg !242
  store i64 %83, ptr %79, align 8, !dbg !242
  ret void, !dbg !243
}

define void @"array.add:(*[]u32,u32)->void"(ptr %0, i32 %1) !dbg !244 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i64, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8, !dbg !253
  call void @llvm.dbg.value(metadata ptr %2, metadata !254, metadata !DIExpression()), !dbg !253
  store i32 %1, ptr %3, align 4, !dbg !253
  call void @llvm.dbg.value(metadata ptr %3, metadata !255, metadata !DIExpression()), !dbg !253
  %9 = load ptr, ptr %2, align 8, !dbg !256
  store ptr %9, ptr %4, align 8, !dbg !256
  call void @llvm.dbg.declare(metadata ptr %4, metadata !257, metadata !DIExpression()), !dbg !256
  %10 = load ptr, ptr %4, align 8, !dbg !258
  %11 = getelementptr inbounds %slice.3, ptr %10, i32 0, i32 1, !dbg !258
  %12 = load ptr, ptr %11, align 8, !dbg !258
  %13 = getelementptr %array.Header, ptr %12, i64 -1, !dbg !258
  store ptr %13, ptr %5, align 8, !dbg !258
  call void @llvm.dbg.declare(metadata ptr %5, metadata !259, metadata !DIExpression()), !dbg !258
  %14 = load ptr, ptr %4, align 8, !dbg !260
  %15 = getelementptr inbounds %slice.3, ptr %14, i32 0, i32 0, !dbg !260
  %16 = load i64, ptr %15, align 8, !dbg !260
  %17 = load ptr, ptr %5, align 8, !dbg !260
  %18 = getelementptr inbounds %array.Header, ptr %17, i32 0, i32 0, !dbg !260
  %19 = load i64, ptr %18, align 8, !dbg !260
  %20 = icmp sge i64 %16, %19, !dbg !260
  br i1 %20, label %block_1, label %block_2, !dbg !260

block_1:                                          ; preds = %block_0
  %21 = load ptr, ptr %5, align 8, !dbg !261
  %22 = getelementptr inbounds %array.Header, ptr %21, i32 0, i32 0, !dbg !261
  %23 = load i64, ptr %22, align 8, !dbg !261
  %24 = mul i64 %23, 2, !dbg !261
  store i64 %24, ptr %6, align 8, !dbg !261
  call void @llvm.dbg.declare(metadata ptr %6, metadata !262, metadata !DIExpression()), !dbg !261
  %25 = load ptr, ptr %5, align 8, !dbg !263
  %26 = getelementptr inbounds %array.Header, ptr %25, i32 0, i32 1, !dbg !263
  %27 = getelementptr inbounds %mem.Allocator, ptr %26, i32 0, i32 0, !dbg !263
  %28 = load ptr, ptr %27, align 8, !dbg !263
  %29 = load i64, ptr %6, align 8, !dbg !263
  %30 = mul i64 %29, 4, !dbg !263
  %31 = add i64 %30, 32, !dbg !263
  %32 = load ptr, ptr %5, align 8, !dbg !263
  %33 = getelementptr inbounds %array.Header, ptr %32, i32 0, i32 1, !dbg !263
  %34 = call ptr %28(i64 %31, ptr %33), !dbg !263
  store ptr %34, ptr %7, align 8, !dbg !263
  call void @llvm.dbg.declare(metadata ptr %7, metadata !264, metadata !DIExpression()), !dbg !263
  %35 = load ptr, ptr %7, align 8, !dbg !265
  %36 = icmp ne ptr %35, null, !dbg !265
  %37 = icmp eq i1 %36, false, !dbg !265
  br i1 %37, label %block_4, label %block_5, !dbg !265

block_4:                                          ; preds = %block_1
  %38 = load ptr, ptr %4, align 8, !dbg !266
  %39 = getelementptr inbounds %slice.3, ptr %38, i32 0, i32 1, !dbg !266
  store ptr null, ptr %39, align 8, !dbg !266
  %40 = load ptr, ptr %4, align 8, !dbg !267
  %41 = getelementptr inbounds %slice.3, ptr %40, i32 0, i32 0, !dbg !267
  store i64 0, ptr %41, align 8, !dbg !267
  ret void, !dbg !268

block_5:                                          ; preds = %block_1
  br label %block_6, !dbg !268

block_6:                                          ; preds = %block_5
  %42 = load ptr, ptr %7, align 8, !dbg !269
  store ptr %42, ptr %8, align 8, !dbg !269
  call void @llvm.dbg.declare(metadata ptr %8, metadata !270, metadata !DIExpression()), !dbg !269
  %43 = load ptr, ptr %8, align 8, !dbg !271
  %44 = getelementptr inbounds %array.Header, ptr %43, i32 0, i32 0, !dbg !271
  %45 = load i64, ptr %6, align 8, !dbg !271
  store i64 %45, ptr %44, align 8, !dbg !271
  %46 = load ptr, ptr %8, align 8, !dbg !272
  %47 = getelementptr inbounds %array.Header, ptr %46, i32 0, i32 1, !dbg !272
  %48 = load ptr, ptr %5, align 8, !dbg !272
  %49 = getelementptr inbounds %array.Header, ptr %48, i32 0, i32 1, !dbg !272
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %47, ptr align 8 %49, i64 24, i1 false), !dbg !272
  %50 = load ptr, ptr %8, align 8, !dbg !273
  %51 = getelementptr %array.Header, ptr %50, i64 1, !dbg !273
  %52 = load ptr, ptr %4, align 8, !dbg !273
  %53 = getelementptr inbounds %slice.3, ptr %52, i32 0, i32 1, !dbg !273
  %54 = load ptr, ptr %53, align 8, !dbg !273
  %55 = load ptr, ptr %4, align 8, !dbg !273
  %56 = getelementptr inbounds %slice.3, ptr %55, i32 0, i32 0, !dbg !273
  %57 = load i64, ptr %56, align 8, !dbg !273
  %58 = mul i64 %57, 4, !dbg !273
  %59 = call ptr @memcpy(ptr %51, ptr %54, i64 %58), !dbg !273
  %60 = load ptr, ptr %8, align 8, !dbg !274
  %61 = getelementptr inbounds %array.Header, ptr %60, i32 0, i32 1, !dbg !274
  %62 = getelementptr inbounds %mem.Allocator, ptr %61, i32 0, i32 1, !dbg !274
  %63 = load ptr, ptr %62, align 8, !dbg !274
  %64 = load ptr, ptr %5, align 8, !dbg !274
  %65 = load ptr, ptr %8, align 8, !dbg !274
  %66 = getelementptr inbounds %array.Header, ptr %65, i32 0, i32 1, !dbg !274
  call void %63(ptr %64, ptr %66), !dbg !274
  %67 = load ptr, ptr %4, align 8, !dbg !275
  %68 = getelementptr inbounds %slice.3, ptr %67, i32 0, i32 1, !dbg !275
  %69 = load ptr, ptr %8, align 8, !dbg !275
  %70 = getelementptr %array.Header, ptr %69, i64 1, !dbg !275
  store ptr %70, ptr %68, align 8, !dbg !275
  br label %block_3, !dbg !275

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !275

block_3:                                          ; preds = %block_2, %block_6
  %71 = load ptr, ptr %4, align 8, !dbg !276
  %72 = load ptr, ptr %4, align 8, !dbg !276
  %73 = getelementptr inbounds %slice.3, ptr %72, i32 0, i32 0, !dbg !276
  %74 = load i64, ptr %73, align 8, !dbg !276
  %75 = getelementptr inbounds %slice.3, ptr %71, i32 0, i32 1, !dbg !276
  %76 = load ptr, ptr %75, align 8, !dbg !276
  %77 = getelementptr i32, ptr %76, i64 %74, !dbg !276
  %78 = load i32, ptr %3, align 4, !dbg !276
  store i32 %78, ptr %77, align 4, !dbg !276
  %79 = load ptr, ptr %4, align 8, !dbg !277
  %80 = getelementptr inbounds %slice.3, ptr %79, i32 0, i32 0, !dbg !277
  %81 = load ptr, ptr %4, align 8, !dbg !277
  %82 = getelementptr inbounds %slice.3, ptr %81, i32 0, i32 0, !dbg !277
  %83 = load i64, ptr %82, align 8, !dbg !277
  %84 = add i64 %83, 1, !dbg !277
  store i64 %84, ptr %80, align 8, !dbg !277
  ret void, !dbg !278
}

define void @"array.create:(type,*mem.Allocator)->[]u8"(ptr %0, i64 %1, ptr %2) !dbg !279 {
block_0:
  %3 = alloca i64, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i64, align 8
  %6 = alloca ptr, align 8
  %7 = alloca %slice.6, align 8
  %8 = alloca ptr, align 8
  %9 = alloca %mem.Allocator, align 8
  %10 = alloca %slice.6, align 8
  %11 = alloca %slice.6, align 8
  store i64 %1, ptr %3, align 8, !dbg !285
  call void @llvm.dbg.value(metadata ptr %3, metadata !286, metadata !DIExpression()), !dbg !285
  store ptr %2, ptr %4, align 8, !dbg !285
  call void @llvm.dbg.value(metadata ptr %4, metadata !287, metadata !DIExpression()), !dbg !285
  store i64 8, ptr %5, align 8, !dbg !288
  call void @llvm.dbg.declare(metadata ptr %5, metadata !289, metadata !DIExpression()), !dbg !288
  %12 = load ptr, ptr %4, align 8, !dbg !290
  %13 = getelementptr inbounds %mem.Allocator, ptr %12, i32 0, i32 0, !dbg !290
  %14 = load ptr, ptr %13, align 8, !dbg !290
  %15 = load i64, ptr %5, align 8, !dbg !290
  %16 = mul i64 %15, 1, !dbg !290
  %17 = add i64 %16, 32, !dbg !290
  %18 = load ptr, ptr %4, align 8, !dbg !290
  %19 = call ptr %14(i64 %17, ptr %18), !dbg !290
  store ptr %19, ptr %6, align 8, !dbg !290
  call void @llvm.dbg.declare(metadata ptr %6, metadata !291, metadata !DIExpression()), !dbg !290
  %20 = load ptr, ptr %6, align 8, !dbg !292
  %21 = icmp ne ptr %20, null, !dbg !292
  %22 = icmp eq i1 %21, false, !dbg !292
  br i1 %22, label %block_1, label %block_2, !dbg !292

block_1:                                          ; preds = %block_0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %7, i64 16, i1 false), !dbg !293
  ret void, !dbg !293

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !293

block_3:                                          ; preds = %block_2
  %23 = load ptr, ptr %6, align 8, !dbg !294
  store ptr %23, ptr %8, align 8, !dbg !294
  call void @llvm.dbg.declare(metadata ptr %8, metadata !295, metadata !DIExpression()), !dbg !294
  %24 = load ptr, ptr %8, align 8, !dbg !296
  %25 = getelementptr inbounds %array.Header, ptr %24, i32 0, i32 0, !dbg !296
  %26 = load i64, ptr %5, align 8, !dbg !296
  store i64 %26, ptr %25, align 8, !dbg !296
  %27 = load ptr, ptr %8, align 8, !dbg !297
  %28 = getelementptr inbounds %array.Header, ptr %27, i32 0, i32 1, !dbg !297
  %29 = load ptr, ptr %4, align 8, !dbg !297
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %9, ptr align 8 %29, i64 24, i1 false), !dbg !297
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %28, ptr align 8 %9, i64 24, i1 false), !dbg !297
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %11, ptr align 8 %10, i64 16, i1 false), !dbg !298
  call void @llvm.dbg.declare(metadata ptr %11, metadata !299, metadata !DIExpression()), !dbg !298
  %30 = getelementptr inbounds %slice.6, ptr %11, i32 0, i32 1, !dbg !300
  %31 = load ptr, ptr %8, align 8, !dbg !300
  %32 = getelementptr %array.Header, ptr %31, i64 1, !dbg !300
  store ptr %32, ptr %30, align 8, !dbg !300
  %33 = getelementptr inbounds %slice.6, ptr %11, i32 0, i32 0, !dbg !301
  store i64 0, ptr %33, align 8, !dbg !301
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %11, i64 16, i1 false), !dbg !302
  ret void, !dbg !302
}

define void @"array.add:(*[]u8,u8)->void"(ptr %0, i8 %1) !dbg !303 {
block_0:
  %2 = alloca ptr, align 8
  %3 = alloca i8, align 1
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i64, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8, !dbg !307
  call void @llvm.dbg.value(metadata ptr %2, metadata !308, metadata !DIExpression()), !dbg !307
  store i8 %1, ptr %3, align 1, !dbg !307
  call void @llvm.dbg.value(metadata ptr %3, metadata !309, metadata !DIExpression()), !dbg !307
  %9 = load ptr, ptr %2, align 8, !dbg !310
  store ptr %9, ptr %4, align 8, !dbg !310
  call void @llvm.dbg.declare(metadata ptr %4, metadata !311, metadata !DIExpression()), !dbg !310
  %10 = load ptr, ptr %4, align 8, !dbg !312
  %11 = getelementptr inbounds %slice.6, ptr %10, i32 0, i32 1, !dbg !312
  %12 = load ptr, ptr %11, align 8, !dbg !312
  %13 = getelementptr %array.Header, ptr %12, i64 -1, !dbg !312
  store ptr %13, ptr %5, align 8, !dbg !312
  call void @llvm.dbg.declare(metadata ptr %5, metadata !313, metadata !DIExpression()), !dbg !312
  %14 = load ptr, ptr %4, align 8, !dbg !314
  %15 = getelementptr inbounds %slice.6, ptr %14, i32 0, i32 0, !dbg !314
  %16 = load i64, ptr %15, align 8, !dbg !314
  %17 = load ptr, ptr %5, align 8, !dbg !314
  %18 = getelementptr inbounds %array.Header, ptr %17, i32 0, i32 0, !dbg !314
  %19 = load i64, ptr %18, align 8, !dbg !314
  %20 = icmp sge i64 %16, %19, !dbg !314
  br i1 %20, label %block_1, label %block_2, !dbg !314

block_1:                                          ; preds = %block_0
  %21 = load ptr, ptr %5, align 8, !dbg !315
  %22 = getelementptr inbounds %array.Header, ptr %21, i32 0, i32 0, !dbg !315
  %23 = load i64, ptr %22, align 8, !dbg !315
  %24 = mul i64 %23, 2, !dbg !315
  store i64 %24, ptr %6, align 8, !dbg !315
  call void @llvm.dbg.declare(metadata ptr %6, metadata !316, metadata !DIExpression()), !dbg !315
  %25 = load ptr, ptr %5, align 8, !dbg !317
  %26 = getelementptr inbounds %array.Header, ptr %25, i32 0, i32 1, !dbg !317
  %27 = getelementptr inbounds %mem.Allocator, ptr %26, i32 0, i32 0, !dbg !317
  %28 = load ptr, ptr %27, align 8, !dbg !317
  %29 = load i64, ptr %6, align 8, !dbg !317
  %30 = mul i64 %29, 1, !dbg !317
  %31 = add i64 %30, 32, !dbg !317
  %32 = load ptr, ptr %5, align 8, !dbg !317
  %33 = getelementptr inbounds %array.Header, ptr %32, i32 0, i32 1, !dbg !317
  %34 = call ptr %28(i64 %31, ptr %33), !dbg !317
  store ptr %34, ptr %7, align 8, !dbg !317
  call void @llvm.dbg.declare(metadata ptr %7, metadata !318, metadata !DIExpression()), !dbg !317
  %35 = load ptr, ptr %7, align 8, !dbg !319
  %36 = icmp ne ptr %35, null, !dbg !319
  %37 = icmp eq i1 %36, false, !dbg !319
  br i1 %37, label %block_4, label %block_5, !dbg !319

block_4:                                          ; preds = %block_1
  %38 = load ptr, ptr %4, align 8, !dbg !320
  %39 = getelementptr inbounds %slice.6, ptr %38, i32 0, i32 1, !dbg !320
  store ptr null, ptr %39, align 8, !dbg !320
  %40 = load ptr, ptr %4, align 8, !dbg !321
  %41 = getelementptr inbounds %slice.6, ptr %40, i32 0, i32 0, !dbg !321
  store i64 0, ptr %41, align 8, !dbg !321
  ret void, !dbg !322

block_5:                                          ; preds = %block_1
  br label %block_6, !dbg !322

block_6:                                          ; preds = %block_5
  %42 = load ptr, ptr %7, align 8, !dbg !323
  store ptr %42, ptr %8, align 8, !dbg !323
  call void @llvm.dbg.declare(metadata ptr %8, metadata !324, metadata !DIExpression()), !dbg !323
  %43 = load ptr, ptr %8, align 8, !dbg !325
  %44 = getelementptr inbounds %array.Header, ptr %43, i32 0, i32 0, !dbg !325
  %45 = load i64, ptr %6, align 8, !dbg !325
  store i64 %45, ptr %44, align 8, !dbg !325
  %46 = load ptr, ptr %8, align 8, !dbg !326
  %47 = getelementptr inbounds %array.Header, ptr %46, i32 0, i32 1, !dbg !326
  %48 = load ptr, ptr %5, align 8, !dbg !326
  %49 = getelementptr inbounds %array.Header, ptr %48, i32 0, i32 1, !dbg !326
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %47, ptr align 8 %49, i64 24, i1 false), !dbg !326
  %50 = load ptr, ptr %8, align 8, !dbg !327
  %51 = getelementptr %array.Header, ptr %50, i64 1, !dbg !327
  %52 = load ptr, ptr %4, align 8, !dbg !327
  %53 = getelementptr inbounds %slice.6, ptr %52, i32 0, i32 1, !dbg !327
  %54 = load ptr, ptr %53, align 8, !dbg !327
  %55 = load ptr, ptr %4, align 8, !dbg !327
  %56 = getelementptr inbounds %slice.6, ptr %55, i32 0, i32 0, !dbg !327
  %57 = load i64, ptr %56, align 8, !dbg !327
  %58 = mul i64 %57, 1, !dbg !327
  %59 = call ptr @memcpy(ptr %51, ptr %54, i64 %58), !dbg !327
  %60 = load ptr, ptr %8, align 8, !dbg !328
  %61 = getelementptr inbounds %array.Header, ptr %60, i32 0, i32 1, !dbg !328
  %62 = getelementptr inbounds %mem.Allocator, ptr %61, i32 0, i32 1, !dbg !328
  %63 = load ptr, ptr %62, align 8, !dbg !328
  %64 = load ptr, ptr %5, align 8, !dbg !328
  %65 = load ptr, ptr %8, align 8, !dbg !328
  %66 = getelementptr inbounds %array.Header, ptr %65, i32 0, i32 1, !dbg !328
  call void %63(ptr %64, ptr %66), !dbg !328
  %67 = load ptr, ptr %4, align 8, !dbg !329
  %68 = getelementptr inbounds %slice.6, ptr %67, i32 0, i32 1, !dbg !329
  %69 = load ptr, ptr %8, align 8, !dbg !329
  %70 = getelementptr %array.Header, ptr %69, i64 1, !dbg !329
  store ptr %70, ptr %68, align 8, !dbg !329
  br label %block_3, !dbg !329

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !329

block_3:                                          ; preds = %block_2, %block_6
  %71 = load ptr, ptr %4, align 8, !dbg !330
  %72 = load ptr, ptr %4, align 8, !dbg !330
  %73 = getelementptr inbounds %slice.6, ptr %72, i32 0, i32 0, !dbg !330
  %74 = load i64, ptr %73, align 8, !dbg !330
  %75 = getelementptr inbounds %slice.6, ptr %71, i32 0, i32 1, !dbg !330
  %76 = load ptr, ptr %75, align 8, !dbg !330
  %77 = getelementptr i8, ptr %76, i64 %74, !dbg !330
  %78 = load i8, ptr %3, align 1, !dbg !330
  store i8 %78, ptr %77, align 1, !dbg !330
  %79 = load ptr, ptr %4, align 8, !dbg !331
  %80 = getelementptr inbounds %slice.6, ptr %79, i32 0, i32 0, !dbg !331
  %81 = load ptr, ptr %4, align 8, !dbg !331
  %82 = getelementptr inbounds %slice.6, ptr %81, i32 0, i32 0, !dbg !331
  %83 = load i64, ptr %82, align 8, !dbg !331
  %84 = add i64 %83, 1, !dbg !331
  store i64 %84, ptr %80, align 8, !dbg !331
  ret void, !dbg !332
}

define void @"array.create:(type,*mem.Allocator)->[]u32"(ptr %0, i64 %1, ptr %2) !dbg !333 {
block_0:
  %3 = alloca i64, align 8
  %4 = alloca ptr, align 8
  %5 = alloca i64, align 8
  %6 = alloca ptr, align 8
  %7 = alloca %slice.3, align 8
  %8 = alloca ptr, align 8
  %9 = alloca %mem.Allocator, align 8
  %10 = alloca %slice.3, align 8
  %11 = alloca %slice.3, align 8
  store i64 %1, ptr %3, align 8, !dbg !336
  call void @llvm.dbg.value(metadata ptr %3, metadata !337, metadata !DIExpression()), !dbg !336
  store ptr %2, ptr %4, align 8, !dbg !336
  call void @llvm.dbg.value(metadata ptr %4, metadata !338, metadata !DIExpression()), !dbg !336
  store i64 8, ptr %5, align 8, !dbg !339
  call void @llvm.dbg.declare(metadata ptr %5, metadata !340, metadata !DIExpression()), !dbg !339
  %12 = load ptr, ptr %4, align 8, !dbg !341
  %13 = getelementptr inbounds %mem.Allocator, ptr %12, i32 0, i32 0, !dbg !341
  %14 = load ptr, ptr %13, align 8, !dbg !341
  %15 = load i64, ptr %5, align 8, !dbg !341
  %16 = mul i64 %15, 4, !dbg !341
  %17 = add i64 %16, 32, !dbg !341
  %18 = load ptr, ptr %4, align 8, !dbg !341
  %19 = call ptr %14(i64 %17, ptr %18), !dbg !341
  store ptr %19, ptr %6, align 8, !dbg !341
  call void @llvm.dbg.declare(metadata ptr %6, metadata !342, metadata !DIExpression()), !dbg !341
  %20 = load ptr, ptr %6, align 8, !dbg !343
  %21 = icmp ne ptr %20, null, !dbg !343
  %22 = icmp eq i1 %21, false, !dbg !343
  br i1 %22, label %block_1, label %block_2, !dbg !343

block_1:                                          ; preds = %block_0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %7, i64 16, i1 false), !dbg !344
  ret void, !dbg !344

block_2:                                          ; preds = %block_0
  br label %block_3, !dbg !344

block_3:                                          ; preds = %block_2
  %23 = load ptr, ptr %6, align 8, !dbg !345
  store ptr %23, ptr %8, align 8, !dbg !345
  call void @llvm.dbg.declare(metadata ptr %8, metadata !346, metadata !DIExpression()), !dbg !345
  %24 = load ptr, ptr %8, align 8, !dbg !347
  %25 = getelementptr inbounds %array.Header, ptr %24, i32 0, i32 0, !dbg !347
  %26 = load i64, ptr %5, align 8, !dbg !347
  store i64 %26, ptr %25, align 8, !dbg !347
  %27 = load ptr, ptr %8, align 8, !dbg !348
  %28 = getelementptr inbounds %array.Header, ptr %27, i32 0, i32 1, !dbg !348
  %29 = load ptr, ptr %4, align 8, !dbg !348
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %9, ptr align 8 %29, i64 24, i1 false), !dbg !348
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %28, ptr align 8 %9, i64 24, i1 false), !dbg !348
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %11, ptr align 8 %10, i64 16, i1 false), !dbg !349
  call void @llvm.dbg.declare(metadata ptr %11, metadata !350, metadata !DIExpression()), !dbg !349
  %30 = getelementptr inbounds %slice.3, ptr %11, i32 0, i32 1, !dbg !351
  %31 = load ptr, ptr %8, align 8, !dbg !351
  %32 = getelementptr %array.Header, ptr %31, i64 1, !dbg !351
  store ptr %32, ptr %30, align 8, !dbg !351
  %33 = getelementptr inbounds %slice.3, ptr %11, i32 0, i32 0, !dbg !352
  store i64 0, ptr %33, align 8, !dbg !352
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %0, ptr align 8 %11, i64 16, i1 false), !dbg !353
  ret void, !dbg !353
}

define void @"array.free:(*[]u32)->void"(ptr %0) !dbg !354 {
block_0:
  %1 = alloca ptr, align 8
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  store ptr %0, ptr %1, align 8, !dbg !357
  call void @llvm.dbg.value(metadata ptr %1, metadata !358, metadata !DIExpression()), !dbg !357
  %4 = load ptr, ptr %1, align 8, !dbg !359
  store ptr %4, ptr %2, align 8, !dbg !359
  call void @llvm.dbg.declare(metadata ptr %2, metadata !360, metadata !DIExpression()), !dbg !359
  %5 = load ptr, ptr %2, align 8, !dbg !361
  %6 = getelementptr inbounds %slice.3, ptr %5, i32 0, i32 1, !dbg !361
  %7 = load ptr, ptr %6, align 8, !dbg !361
  %8 = getelementptr %array.Header, ptr %7, i64 -1, !dbg !361
  store ptr %8, ptr %3, align 8, !dbg !361
  call void @llvm.dbg.declare(metadata ptr %3, metadata !362, metadata !DIExpression()), !dbg !361
  %9 = load ptr, ptr %3, align 8, !dbg !363
  %10 = getelementptr inbounds %array.Header, ptr %9, i32 0, i32 1, !dbg !363
  %11 = getelementptr inbounds %mem.Allocator, ptr %10, i32 0, i32 1, !dbg !363
  %12 = load ptr, ptr %11, align 8, !dbg !363
  %13 = load ptr, ptr %3, align 8, !dbg !363
  %14 = load ptr, ptr %3, align 8, !dbg !363
  %15 = getelementptr inbounds %array.Header, ptr %14, i32 0, i32 1, !dbg !363
  call void %12(ptr %13, ptr %15), !dbg !363
  %16 = load ptr, ptr %2, align 8, !dbg !364
  %17 = getelementptr inbounds %slice.3, ptr %16, i32 0, i32 1, !dbg !364
  store ptr null, ptr %17, align 8, !dbg !364
  %18 = load ptr, ptr %2, align 8, !dbg !365
  %19 = getelementptr inbounds %slice.3, ptr %18, i32 0, i32 0, !dbg !365
  store i64 0, ptr %19, align 8, !dbg !365
  ret void, !dbg !366
}

define void @"array.free:(*[]u8)->void"(ptr %0) !dbg !367 {
block_0:
  %1 = alloca ptr, align 8
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  store ptr %0, ptr %1, align 8, !dbg !370
  call void @llvm.dbg.value(metadata ptr %1, metadata !371, metadata !DIExpression()), !dbg !370
  %4 = load ptr, ptr %1, align 8, !dbg !372
  store ptr %4, ptr %2, align 8, !dbg !372
  call void @llvm.dbg.declare(metadata ptr %2, metadata !373, metadata !DIExpression()), !dbg !372
  %5 = load ptr, ptr %2, align 8, !dbg !374
  %6 = getelementptr inbounds %slice.6, ptr %5, i32 0, i32 1, !dbg !374
  %7 = load ptr, ptr %6, align 8, !dbg !374
  %8 = getelementptr %array.Header, ptr %7, i64 -1, !dbg !374
  store ptr %8, ptr %3, align 8, !dbg !374
  call void @llvm.dbg.declare(metadata ptr %3, metadata !375, metadata !DIExpression()), !dbg !374
  %9 = load ptr, ptr %3, align 8, !dbg !376
  %10 = getelementptr inbounds %array.Header, ptr %9, i32 0, i32 1, !dbg !376
  %11 = getelementptr inbounds %mem.Allocator, ptr %10, i32 0, i32 1, !dbg !376
  %12 = load ptr, ptr %11, align 8, !dbg !376
  %13 = load ptr, ptr %3, align 8, !dbg !376
  %14 = load ptr, ptr %3, align 8, !dbg !376
  %15 = getelementptr inbounds %array.Header, ptr %14, i32 0, i32 1, !dbg !376
  call void %12(ptr %13, ptr %15), !dbg !376
  %16 = load ptr, ptr %2, align 8, !dbg !377
  %17 = getelementptr inbounds %slice.6, ptr %16, i32 0, i32 1, !dbg !377
  store ptr null, ptr %17, align 8, !dbg !377
  %18 = load ptr, ptr %2, align 8, !dbg !378
  %19 = getelementptr inbounds %slice.6, ptr %18, i32 0, i32 0, !dbg !378
  store i64 0, ptr %19, align 8, !dbg !378
  ret void, !dbg !379
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!80, !81}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "RCP Compiler", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false)
!1 = !DIFile(filename: "array.rcp", directory: "E:\\C_Projects\\ReComp\\std")
!2 = !{!3, !15, !36, !45, !50, !54, !65, !71}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.TypeKind", scope: !1, file: !1, size: 64, align: 64, elements: !4)
!4 = !{!5, !6, !7, !8, !9, !10, !11, !12, !13, !14}
!5 = !DIEnumerator(name: "Invalid", value: 0, isUnsigned: true)
!6 = !DIEnumerator(name: "Basic", value: 1, isUnsigned: true)
!7 = !DIEnumerator(name: "Function", value: 2, isUnsigned: true)
!8 = !DIEnumerator(name: "Struct", value: 3, isUnsigned: true)
!9 = !DIEnumerator(name: "Pointer", value: 4, isUnsigned: true)
!10 = !DIEnumerator(name: "Array", value: 5, isUnsigned: true)
!11 = !DIEnumerator(name: "Slice", value: 6, isUnsigned: true)
!12 = !DIEnumerator(name: "Vector", value: 7, isUnsigned: true)
!13 = !DIEnumerator(name: "Enum", value: 8, isUnsigned: true)
!14 = !DIEnumerator(name: "Generic", value: 9, isUnsigned: true)
!15 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.BasicKind", scope: !1, file: !1, size: 64, align: 64, elements: !16)
!16 = !{!17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35}
!17 = !DIEnumerator(name: "Bool", value: 0, isUnsigned: true)
!18 = !DIEnumerator(name: "String", value: 1, isUnsigned: true)
!19 = !DIEnumerator(name: "U8", value: 2, isUnsigned: true)
!20 = !DIEnumerator(name: "U16", value: 3, isUnsigned: true)
!21 = !DIEnumerator(name: "U32", value: 4, isUnsigned: true)
!22 = !DIEnumerator(name: "U64", value: 5, isUnsigned: true)
!23 = !DIEnumerator(name: "I8", value: 6, isUnsigned: true)
!24 = !DIEnumerator(name: "I16", value: 7, isUnsigned: true)
!25 = !DIEnumerator(name: "I32", value: 8, isUnsigned: true)
!26 = !DIEnumerator(name: "I64", value: 9, isUnsigned: true)
!27 = !DIEnumerator(name: "F32", value: 10, isUnsigned: true)
!28 = !DIEnumerator(name: "F64", value: 11, isUnsigned: true)
!29 = !DIEnumerator(name: "untypedInteger", value: 12, isUnsigned: true)
!30 = !DIEnumerator(name: "untypedFloat", value: 13, isUnsigned: true)
!31 = !DIEnumerator(name: "Int", value: 14, isUnsigned: true)
!32 = !DIEnumerator(name: "Uint", value: 15, isUnsigned: true)
!33 = !DIEnumerator(name: "Type", value: 16, isUnsigned: true)
!34 = !DIEnumerator(name: "Auto", value: 17, isUnsigned: true)
!35 = !DIEnumerator(name: "Module", value: 18, isUnsigned: true)
!36 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.BasicFlag", scope: !1, file: !1, size: 32, align: 32, elements: !37)
!37 = !{!38, !39, !40, !41, !42, !43, !44}
!38 = !DIEnumerator(name: "Boolean", value: 1, isUnsigned: true)
!39 = !DIEnumerator(name: "Integer", value: 2, isUnsigned: true)
!40 = !DIEnumerator(name: "Float", value: 4, isUnsigned: true)
!41 = !DIEnumerator(name: "String", value: 8, isUnsigned: true)
!42 = !DIEnumerator(name: "Untyped", value: 32, isUnsigned: true)
!43 = !DIEnumerator(name: "Unsigned", value: 64, isUnsigned: true)
!44 = !DIEnumerator(name: "TypeID", value: 128, isUnsigned: true)
!45 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.StructFlag", scope: !1, file: !1, size: 32, align: 32, elements: !46)
!46 = !{!47, !48, !49}
!47 = !DIEnumerator(name: "Packed", value: 1, isUnsigned: true)
!48 = !DIEnumerator(name: "Generic", value: 2, isUnsigned: true)
!49 = !DIEnumerator(name: "Union", value: 4, isUnsigned: true)
!50 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "init.VectorKind", scope: !1, file: !1, size: 64, align: 64, elements: !51)
!51 = !{!52, !53}
!52 = !DIEnumerator(name: "Float", value: 0, isUnsigned: true)
!53 = !DIEnumerator(name: "Int", value: 1, isUnsigned: true)
!54 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compile.CompileFlag", scope: !1, file: !1, size: 32, align: 32, elements: !55)
!55 = !{!56, !57, !58, !59, !60, !61, !62, !63, !64}
!56 = !DIEnumerator(name: "Debug", value: 1, isUnsigned: true)
!57 = !DIEnumerator(name: "SanAddress", value: 2, isUnsigned: true)
!58 = !DIEnumerator(name: "SanMemory", value: 4, isUnsigned: true)
!59 = !DIEnumerator(name: "SanThread", value: 8, isUnsigned: true)
!60 = !DIEnumerator(name: "SanUndefined", value: 16, isUnsigned: true)
!61 = !DIEnumerator(name: "NoStdLib", value: 32, isUnsigned: true)
!62 = !DIEnumerator(name: "SharedLib", value: 64, isUnsigned: true)
!63 = !DIEnumerator(name: "CrossAndroid", value: 128, isUnsigned: true)
!64 = !DIEnumerator(name: "NoLink", value: 256, isUnsigned: true)
!65 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compile.Arch", scope: !1, file: !1, size: 32, align: 32, elements: !66)
!66 = !{!67, !68, !69, !70}
!67 = !DIEnumerator(name: "x86_64", value: 0, isUnsigned: true)
!68 = !DIEnumerator(name: "x86", value: 1, isUnsigned: true)
!69 = !DIEnumerator(name: "Arm32", value: 2, isUnsigned: true)
!70 = !DIEnumerator(name: "Arm64", value: 4, isUnsigned: true)
!71 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "json.Type", scope: !1, file: !1, size: 64, align: 64, elements: !72)
!72 = !{!73, !74, !75, !76, !77, !78, !79}
!73 = !DIEnumerator(name: "Number", value: 0, isUnsigned: true)
!74 = !DIEnumerator(name: "Integer", value: 1, isUnsigned: true)
!75 = !DIEnumerator(name: "String", value: 2, isUnsigned: true)
!76 = !DIEnumerator(name: "Object", value: 3, isUnsigned: true)
!77 = !DIEnumerator(name: "Array", value: 4, isUnsigned: true)
!78 = !DIEnumerator(name: "Boolean", value: 5, isUnsigned: true)
!79 = !DIEnumerator(name: "Null", value: 6, isUnsigned: true)
!80 = !{i32 2, !"CodeView", i32 1}
!81 = !{i32 2, !"Debug Info Version", i32 3}
!82 = distinct !DISubprogram(name: "create:(type,*mem.Allocator)->[]json.KeyValuePair", linkageName: "array.create:(type,*mem.Allocator)->[]json.KeyValuePair", scope: !1, file: !1, line: 10, type: !83, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !105)
!83 = !DISubroutineType(types: !84)
!84 = !{!85, !102, !103}
!85 = !DICompositeType(tag: DW_TAG_structure_type, scope: !1, file: !1, size: 128, align: 64, elements: !86)
!86 = !{!87, !89}
!87 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1, file: !1, baseType: !88, size: 64, align: 64)
!88 = !DIBasicType(name: "int", size: 64, encoding: DW_ATE_signed)
!89 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !90, size: 64, align: 64, offset: 64)
!90 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*json.KeyValuePair", baseType: !91, size: 64, align: 64, dwarfAddressSpace: 0)
!91 = !DICompositeType(tag: DW_TAG_structure_type, name: "json.KeyValuePair", scope: !1, file: !1, size: 320, elements: !92)
!92 = !{!93, !100}
!93 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1, file: !1, baseType: !94, size: 128, align: 64)
!94 = !DICompositeType(tag: DW_TAG_structure_type, name: "string", scope: !1, file: !1, size: 128, elements: !95)
!95 = !{!96, !99}
!96 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !97, size: 64, align: 64)
!97 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*u8", baseType: !98, size: 64, align: 64, dwarfAddressSpace: 0)
!98 = !DIBasicType(name: "u8", size: 8, encoding: DW_ATE_unsigned)
!99 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1, file: !1, baseType: !88, size: 64, align: 64, offset: 64)
!100 = !DIDerivedType(tag: DW_TAG_member, name: "obj", scope: !1, file: !1, baseType: !101, size: 192, align: 64, offset: 128)
!101 = !DICompositeType(tag: DW_TAG_structure_type, name: "json.Value", scope: !1, file: !1, size: 192, align: 64, flags: DIFlagFwdDecl)
!102 = !DIBasicType(name: "type", size: 64, encoding: DW_ATE_unsigned)
!103 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*mem.Allocator", baseType: !104, size: 64, align: 64, dwarfAddressSpace: 0)
!104 = !DICompositeType(tag: DW_TAG_structure_type, name: "mem.Allocator", scope: !1, file: !1, size: 192, align: 64, flags: DIFlagFwdDecl)
!105 = !{}
!106 = !DILocation(line: 10, scope: !82)
!107 = !DILocalVariable(name: "T", scope: !82, file: !1, line: 10, type: !102)
!108 = !DILocalVariable(name: "allocator", arg: 1, scope: !82, file: !1, line: 10, type: !103)
!109 = !DILocation(line: 11, scope: !82)
!110 = !DILocalVariable(name: "INITIAL_CAPACITY", scope: !82, file: !1, line: 11, type: !88)
!111 = !DILocation(line: 12, scope: !82)
!112 = !DILocalVariable(name: "maybe_ptr", scope: !82, file: !1, line: 12, type: !113)
!113 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "?*array.Header", baseType: !114, size: 64, align: 64, dwarfAddressSpace: 0)
!114 = !DICompositeType(tag: DW_TAG_structure_type, name: "array.Header", scope: !1, file: !1, size: 256, elements: !115)
!115 = !{!116, !117}
!116 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1, file: !1, baseType: !88, size: 64, align: 64)
!117 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !1, file: !1, baseType: !118, size: 192, align: 64, offset: 64)
!118 = !DICompositeType(tag: DW_TAG_structure_type, name: "mem.Allocator", scope: !1, file: !1, size: 192, elements: !119)
!119 = !{!120, !125, !129}
!120 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1, file: !1, baseType: !121, size: 64, align: 64)
!121 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*fn(int, *mem.Allocator) -> ?*", baseType: !122, size: 64, align: 64, dwarfAddressSpace: 0)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !88, !103}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*void", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!125 = !DIDerivedType(tag: DW_TAG_member, name: "free", scope: !1, file: !1, baseType: !126, size: 64, align: 64, offset: 64)
!126 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*fn(*, *mem.Allocator)", baseType: !127, size: 64, align: 64, dwarfAddressSpace: 0)
!127 = !DISubroutineType(types: !128)
!128 = !{null, !124, !103}
!129 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !124, size: 64, align: 64, offset: 128)
!130 = !DILocation(line: 13, scope: !82)
!131 = !DILocation(line: 14, scope: !82)
!132 = !DILocation(line: 16, scope: !82)
!133 = !DILocalVariable(name: "ptr", scope: !82, file: !1, line: 16, type: !134)
!134 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*array.Header", baseType: !114, size: 64, align: 64, dwarfAddressSpace: 0)
!135 = !DILocation(line: 17, scope: !82)
!136 = !DILocation(line: 18, scope: !82)
!137 = !DILocation(line: 20, scope: !82)
!138 = !DILocalVariable(name: "res", scope: !82, file: !1, line: 20, type: !85)
!139 = !DILocation(line: 21, scope: !82)
!140 = !DILocation(line: 22, scope: !82)
!141 = !DILocation(line: 23, scope: !82)
!142 = distinct !DISubprogram(name: "add:(json.KeyValuePair {string,json.Value},json.KeyValuePair {string,json.Value})->void", linkageName: "array.add:(json.KeyValuePair {string,json.Value},json.KeyValuePair {string,json.Value})->void", scope: !1, file: !1, line: 26, type: !143, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !105)
!143 = !DISubroutineType(types: !144)
!144 = !{null, !145, !91}
!145 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*[]json.KeyValuePair", baseType: !85, size: 64, align: 64, dwarfAddressSpace: 0)
!146 = !DILocation(line: 26, scope: !142)
!147 = !DILocalVariable(name: "arg_arr", scope: !142, file: !1, line: 26, type: !145)
!148 = !DILocalVariable(name: "item", arg: 1, scope: !142, file: !1, line: 26, type: !91)
!149 = !DILocation(line: 27, scope: !142)
!150 = !DILocalVariable(name: "arr", scope: !142, file: !1, line: 27, type: !145)
!151 = !DILocation(line: 28, scope: !142)
!152 = !DILocalVariable(name: "header", scope: !142, file: !1, line: 28, type: !134)
!153 = !DILocation(line: 29, scope: !142)
!154 = !DILocation(line: 30, scope: !142)
!155 = !DILocalVariable(name: "new_capacity", scope: !142, file: !1, line: 30, type: !88)
!156 = !DILocation(line: 31, scope: !142)
!157 = !DILocalVariable(name: "maybe_ptr", scope: !142, file: !1, line: 31, type: !113)
!158 = !DILocation(line: 32, scope: !142)
!159 = !DILocation(line: 33, scope: !142)
!160 = !DILocation(line: 34, scope: !142)
!161 = !DILocation(line: 35, scope: !142)
!162 = !DILocation(line: 38, scope: !142)
!163 = !DILocalVariable(name: "ptr", scope: !142, file: !1, line: 38, type: !134)
!164 = !DILocation(line: 39, scope: !142)
!165 = !DILocation(line: 40, scope: !142)
!166 = !DILocation(line: 41, scope: !142)
!167 = !DILocation(line: 42, scope: !142)
!168 = !DILocation(line: 43, scope: !142)
!169 = !DILocation(line: 46, scope: !142)
!170 = !DILocation(line: 47, scope: !142)
!171 = !DILocation(line: 48, scope: !142)
!172 = distinct !DISubprogram(name: "create:(type,*mem.Allocator)->[]json.Value", linkageName: "array.create:(type,*mem.Allocator)->[]json.Value", scope: !1, file: !1, line: 10, type: !173, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !105)
!173 = !DISubroutineType(types: !174)
!174 = !{!175, !102, !103}
!175 = !DICompositeType(tag: DW_TAG_structure_type, scope: !1, file: !1, size: 128, align: 64, elements: !176)
!176 = !{!87, !177}
!177 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !178, size: 64, align: 64, offset: 64)
!178 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*json.Value", baseType: !101, size: 64, align: 64, dwarfAddressSpace: 0)
!179 = !DILocation(line: 10, scope: !172)
!180 = !DILocalVariable(name: "T", scope: !172, file: !1, line: 10, type: !102)
!181 = !DILocalVariable(name: "allocator", arg: 1, scope: !172, file: !1, line: 10, type: !103)
!182 = !DILocation(line: 11, scope: !172)
!183 = !DILocalVariable(name: "INITIAL_CAPACITY", scope: !172, file: !1, line: 11, type: !88)
!184 = !DILocation(line: 12, scope: !172)
!185 = !DILocalVariable(name: "maybe_ptr", scope: !172, file: !1, line: 12, type: !113)
!186 = !DILocation(line: 13, scope: !172)
!187 = !DILocation(line: 14, scope: !172)
!188 = !DILocation(line: 16, scope: !172)
!189 = !DILocalVariable(name: "ptr", scope: !172, file: !1, line: 16, type: !134)
!190 = !DILocation(line: 17, scope: !172)
!191 = !DILocation(line: 18, scope: !172)
!192 = !DILocation(line: 20, scope: !172)
!193 = !DILocalVariable(name: "res", scope: !172, file: !1, line: 20, type: !175)
!194 = !DILocation(line: 21, scope: !172)
!195 = !DILocation(line: 22, scope: !172)
!196 = !DILocation(line: 23, scope: !172)
!197 = distinct !DISubprogram(name: "add:(json.Value {json.Type,json.ValueUnion},json.Value {json.Type,json.ValueUnion})->void", linkageName: "array.add:(json.Value {json.Type,json.ValueUnion},json.Value {json.Type,json.ValueUnion})->void", scope: !1, file: !1, line: 26, type: !198, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !105)
!198 = !DISubroutineType(types: !199)
!199 = !{null, !200, !201}
!200 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*[]json.Value", baseType: !175, size: 64, align: 64, dwarfAddressSpace: 0)
!201 = !DICompositeType(tag: DW_TAG_structure_type, name: "json.Value", scope: !1, file: !1, size: 192, elements: !202)
!202 = !{!203, !204}
!203 = !DIDerivedType(tag: DW_TAG_member, name: "t", scope: !1, file: !1, baseType: !71, size: 64, align: 64)
!204 = !DIDerivedType(tag: DW_TAG_member, name: "v", scope: !1, file: !1, baseType: !205, size: 128, align: 64, offset: 64)
!205 = !DICompositeType(tag: DW_TAG_structure_type, name: "json.ValueUnion", scope: !1, file: !1, size: 128, elements: !206)
!206 = !{!207, !209, !210, !211, !215, !216}
!207 = !DIDerivedType(tag: DW_TAG_member, name: "number", scope: !1, file: !1, baseType: !208, size: 64, align: 64)
!208 = !DIBasicType(name: "f64", size: 64, encoding: DW_ATE_float)
!209 = !DIDerivedType(tag: DW_TAG_member, name: "integer", scope: !1, file: !1, baseType: !88, size: 64, align: 64)
!210 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1, file: !1, baseType: !94, size: 128, align: 64)
!211 = !DIDerivedType(tag: DW_TAG_member, name: "object", scope: !1, file: !1, baseType: !212, size: 128, align: 64)
!212 = !DICompositeType(tag: DW_TAG_structure_type, name: "json.Dictionary", scope: !1, file: !1, size: 128, elements: !213)
!213 = !{!214}
!214 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1, file: !1, baseType: !85, size: 128, align: 64)
!215 = !DIDerivedType(tag: DW_TAG_member, name: "array", scope: !1, file: !1, baseType: !175, size: 128, align: 64)
!216 = !DIDerivedType(tag: DW_TAG_member, name: "boolean", scope: !1, file: !1, baseType: !217, size: 8, align: 8)
!217 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!218 = !DILocation(line: 26, scope: !197)
!219 = !DILocalVariable(name: "arg_arr", scope: !197, file: !1, line: 26, type: !200)
!220 = !DILocalVariable(name: "item", arg: 1, scope: !197, file: !1, line: 26, type: !201)
!221 = !DILocation(line: 27, scope: !197)
!222 = !DILocalVariable(name: "arr", scope: !197, file: !1, line: 27, type: !200)
!223 = !DILocation(line: 28, scope: !197)
!224 = !DILocalVariable(name: "header", scope: !197, file: !1, line: 28, type: !134)
!225 = !DILocation(line: 29, scope: !197)
!226 = !DILocation(line: 30, scope: !197)
!227 = !DILocalVariable(name: "new_capacity", scope: !197, file: !1, line: 30, type: !88)
!228 = !DILocation(line: 31, scope: !197)
!229 = !DILocalVariable(name: "maybe_ptr", scope: !197, file: !1, line: 31, type: !113)
!230 = !DILocation(line: 32, scope: !197)
!231 = !DILocation(line: 33, scope: !197)
!232 = !DILocation(line: 34, scope: !197)
!233 = !DILocation(line: 35, scope: !197)
!234 = !DILocation(line: 38, scope: !197)
!235 = !DILocalVariable(name: "ptr", scope: !197, file: !1, line: 38, type: !134)
!236 = !DILocation(line: 39, scope: !197)
!237 = !DILocation(line: 40, scope: !197)
!238 = !DILocation(line: 41, scope: !197)
!239 = !DILocation(line: 42, scope: !197)
!240 = !DILocation(line: 43, scope: !197)
!241 = !DILocation(line: 46, scope: !197)
!242 = !DILocation(line: 47, scope: !197)
!243 = !DILocation(line: 48, scope: !197)
!244 = distinct !DISubprogram(name: "add:(*[]u32,u32)->void", linkageName: "array.add:(*[]u32,u32)->void", scope: !1, file: !1, line: 26, type: !245, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !105)
!245 = !DISubroutineType(types: !246)
!246 = !{null, !247, !252}
!247 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*[]u32", baseType: !248, size: 64, align: 64, dwarfAddressSpace: 0)
!248 = !DICompositeType(tag: DW_TAG_structure_type, scope: !1, file: !1, size: 128, align: 64, elements: !249)
!249 = !{!87, !250}
!250 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !251, size: 64, align: 64, offset: 64)
!251 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*u32", baseType: !252, size: 64, align: 64, dwarfAddressSpace: 0)
!252 = !DIBasicType(name: "u32", size: 32, encoding: DW_ATE_unsigned)
!253 = !DILocation(line: 26, scope: !244)
!254 = !DILocalVariable(name: "arg_arr", scope: !244, file: !1, line: 26, type: !247)
!255 = !DILocalVariable(name: "item", arg: 1, scope: !244, file: !1, line: 26, type: !252)
!256 = !DILocation(line: 27, scope: !244)
!257 = !DILocalVariable(name: "arr", scope: !244, file: !1, line: 27, type: !247)
!258 = !DILocation(line: 28, scope: !244)
!259 = !DILocalVariable(name: "header", scope: !244, file: !1, line: 28, type: !134)
!260 = !DILocation(line: 29, scope: !244)
!261 = !DILocation(line: 30, scope: !244)
!262 = !DILocalVariable(name: "new_capacity", scope: !244, file: !1, line: 30, type: !88)
!263 = !DILocation(line: 31, scope: !244)
!264 = !DILocalVariable(name: "maybe_ptr", scope: !244, file: !1, line: 31, type: !113)
!265 = !DILocation(line: 32, scope: !244)
!266 = !DILocation(line: 33, scope: !244)
!267 = !DILocation(line: 34, scope: !244)
!268 = !DILocation(line: 35, scope: !244)
!269 = !DILocation(line: 38, scope: !244)
!270 = !DILocalVariable(name: "ptr", scope: !244, file: !1, line: 38, type: !134)
!271 = !DILocation(line: 39, scope: !244)
!272 = !DILocation(line: 40, scope: !244)
!273 = !DILocation(line: 41, scope: !244)
!274 = !DILocation(line: 42, scope: !244)
!275 = !DILocation(line: 43, scope: !244)
!276 = !DILocation(line: 46, scope: !244)
!277 = !DILocation(line: 47, scope: !244)
!278 = !DILocation(line: 48, scope: !244)
!279 = distinct !DISubprogram(name: "create:(type,*mem.Allocator)->[]u8", linkageName: "array.create:(type,*mem.Allocator)->[]u8", scope: !1, file: !1, line: 10, type: !280, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !105)
!280 = !DISubroutineType(types: !281)
!281 = !{!282, !102, !103}
!282 = !DICompositeType(tag: DW_TAG_structure_type, scope: !1, file: !1, size: 128, align: 64, elements: !283)
!283 = !{!87, !284}
!284 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1, file: !1, baseType: !97, size: 64, align: 64, offset: 64)
!285 = !DILocation(line: 10, scope: !279)
!286 = !DILocalVariable(name: "T", scope: !279, file: !1, line: 10, type: !102)
!287 = !DILocalVariable(name: "allocator", arg: 1, scope: !279, file: !1, line: 10, type: !103)
!288 = !DILocation(line: 11, scope: !279)
!289 = !DILocalVariable(name: "INITIAL_CAPACITY", scope: !279, file: !1, line: 11, type: !88)
!290 = !DILocation(line: 12, scope: !279)
!291 = !DILocalVariable(name: "maybe_ptr", scope: !279, file: !1, line: 12, type: !113)
!292 = !DILocation(line: 13, scope: !279)
!293 = !DILocation(line: 14, scope: !279)
!294 = !DILocation(line: 16, scope: !279)
!295 = !DILocalVariable(name: "ptr", scope: !279, file: !1, line: 16, type: !134)
!296 = !DILocation(line: 17, scope: !279)
!297 = !DILocation(line: 18, scope: !279)
!298 = !DILocation(line: 20, scope: !279)
!299 = !DILocalVariable(name: "res", scope: !279, file: !1, line: 20, type: !282)
!300 = !DILocation(line: 21, scope: !279)
!301 = !DILocation(line: 22, scope: !279)
!302 = !DILocation(line: 23, scope: !279)
!303 = distinct !DISubprogram(name: "add:(*[]u8,u8)->void", linkageName: "array.add:(*[]u8,u8)->void", scope: !1, file: !1, line: 26, type: !304, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !105)
!304 = !DISubroutineType(types: !305)
!305 = !{null, !306, !98}
!306 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "*[]u8", baseType: !282, size: 64, align: 64, dwarfAddressSpace: 0)
!307 = !DILocation(line: 26, scope: !303)
!308 = !DILocalVariable(name: "arg_arr", scope: !303, file: !1, line: 26, type: !306)
!309 = !DILocalVariable(name: "item", arg: 1, scope: !303, file: !1, line: 26, type: !98)
!310 = !DILocation(line: 27, scope: !303)
!311 = !DILocalVariable(name: "arr", scope: !303, file: !1, line: 27, type: !306)
!312 = !DILocation(line: 28, scope: !303)
!313 = !DILocalVariable(name: "header", scope: !303, file: !1, line: 28, type: !134)
!314 = !DILocation(line: 29, scope: !303)
!315 = !DILocation(line: 30, scope: !303)
!316 = !DILocalVariable(name: "new_capacity", scope: !303, file: !1, line: 30, type: !88)
!317 = !DILocation(line: 31, scope: !303)
!318 = !DILocalVariable(name: "maybe_ptr", scope: !303, file: !1, line: 31, type: !113)
!319 = !DILocation(line: 32, scope: !303)
!320 = !DILocation(line: 33, scope: !303)
!321 = !DILocation(line: 34, scope: !303)
!322 = !DILocation(line: 35, scope: !303)
!323 = !DILocation(line: 38, scope: !303)
!324 = !DILocalVariable(name: "ptr", scope: !303, file: !1, line: 38, type: !134)
!325 = !DILocation(line: 39, scope: !303)
!326 = !DILocation(line: 40, scope: !303)
!327 = !DILocation(line: 41, scope: !303)
!328 = !DILocation(line: 42, scope: !303)
!329 = !DILocation(line: 43, scope: !303)
!330 = !DILocation(line: 46, scope: !303)
!331 = !DILocation(line: 47, scope: !303)
!332 = !DILocation(line: 48, scope: !303)
!333 = distinct !DISubprogram(name: "create:(type,*mem.Allocator)->[]u32", linkageName: "array.create:(type,*mem.Allocator)->[]u32", scope: !1, file: !1, line: 10, type: !334, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !105)
!334 = !DISubroutineType(types: !335)
!335 = !{!248, !102, !103}
!336 = !DILocation(line: 10, scope: !333)
!337 = !DILocalVariable(name: "T", scope: !333, file: !1, line: 10, type: !102)
!338 = !DILocalVariable(name: "allocator", arg: 1, scope: !333, file: !1, line: 10, type: !103)
!339 = !DILocation(line: 11, scope: !333)
!340 = !DILocalVariable(name: "INITIAL_CAPACITY", scope: !333, file: !1, line: 11, type: !88)
!341 = !DILocation(line: 12, scope: !333)
!342 = !DILocalVariable(name: "maybe_ptr", scope: !333, file: !1, line: 12, type: !113)
!343 = !DILocation(line: 13, scope: !333)
!344 = !DILocation(line: 14, scope: !333)
!345 = !DILocation(line: 16, scope: !333)
!346 = !DILocalVariable(name: "ptr", scope: !333, file: !1, line: 16, type: !134)
!347 = !DILocation(line: 17, scope: !333)
!348 = !DILocation(line: 18, scope: !333)
!349 = !DILocation(line: 20, scope: !333)
!350 = !DILocalVariable(name: "res", scope: !333, file: !1, line: 20, type: !248)
!351 = !DILocation(line: 21, scope: !333)
!352 = !DILocation(line: 22, scope: !333)
!353 = !DILocation(line: 23, scope: !333)
!354 = distinct !DISubprogram(name: "free:(*[]u32)->void", linkageName: "array.free:(*[]u32)->void", scope: !1, file: !1, line: 50, type: !355, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !105)
!355 = !DISubroutineType(types: !356)
!356 = !{null, !247}
!357 = !DILocation(line: 50, scope: !354)
!358 = !DILocalVariable(name: "arg_arr", scope: !354, file: !1, line: 50, type: !247)
!359 = !DILocation(line: 51, scope: !354)
!360 = !DILocalVariable(name: "arr", scope: !354, file: !1, line: 51, type: !247)
!361 = !DILocation(line: 52, scope: !354)
!362 = !DILocalVariable(name: "header", scope: !354, file: !1, line: 52, type: !134)
!363 = !DILocation(line: 53, scope: !354)
!364 = !DILocation(line: 54, scope: !354)
!365 = !DILocation(line: 55, scope: !354)
!366 = !DILocation(line: 56, scope: !354)
!367 = distinct !DISubprogram(name: "free:(*[]u8)->void", linkageName: "array.free:(*[]u8)->void", scope: !1, file: !1, line: 50, type: !368, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !105)
!368 = !DISubroutineType(types: !369)
!369 = !{null, !306}
!370 = !DILocation(line: 50, scope: !367)
!371 = !DILocalVariable(name: "arg_arr", scope: !367, file: !1, line: 50, type: !306)
!372 = !DILocation(line: 51, scope: !367)
!373 = !DILocalVariable(name: "arr", scope: !367, file: !1, line: 51, type: !306)
!374 = !DILocation(line: 52, scope: !367)
!375 = !DILocalVariable(name: "header", scope: !367, file: !1, line: 52, type: !134)
!376 = !DILocation(line: 53, scope: !367)
!377 = !DILocation(line: 54, scope: !367)
!378 = !DILocation(line: 55, scope: !367)
!379 = !DILocation(line: 56, scope: !367)
